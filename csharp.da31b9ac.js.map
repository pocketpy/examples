{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+EAK+E,EAI/E,IAAI,EAAO,CACT,YAAa,uFACb,SAAU,CACR,YAAa,KACb,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACvD,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,CACD,QAAS,CACP,QAAS,CACP,MAAO,AAAI,OAAO,mBAClB,IAAK,AAAI,OAAO,qBAClB,CACF,CACF,EACI,EAAW,CACb,aAAc,GACd,aAAc,MACd,SAAU,CACR,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EAClD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,kBAAmB,EACnD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,uBAAwB,EACxD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EACnD,CACD,SAAU,CACR,SACA,QACA,QACA,OACA,UACA,QACA,OACA,QACA,SACA,MACA,OACA,OACA,QACA,OACA,QACA,SACA,SACA,UACA,SACA,WACA,KACA,KACA,MACA,MACA,OACA,OACA,MACA,SACA,OACA,UACA,YACA,UACA,WACA,MACA,QACA,KACA,OACA,SACA,OACA,QACA,KACA,MACA,UACA,KACA,QACA,WACA,OACA,SACA,QACA,MACA,QACA,UACA,OACA,QACA,OACA,MACA,QACA,OACA,KACA,SACA,OACA,UACA,YACA,aACA,SACA,QACA,KACA,YACA,UACA,QACA,QACA,QACA,SACA,QACA,SACA,YACA,WACA,UACA,WACA,SACA,SACA,SACA,WACA,WACA,UACA,WACA,SACA,MACA,MACA,MACA,SACA,WACA,OACA,QACA,WACA,WACA,YACA,OACA,OACA,QACA,QACA,QACA,SACA,aACA,SACA,SACA,OACD,CACD,iBAAkB,CAAC,YAAa,QAAQ,CACxC,aAAc,CAAC,KAAM,MAAO,QAAS,SAAU,UAAW,QAAS,QAAS,OAAO,CACnF,UAAW,CACT,IACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACD,CACD,QAAS,wBAET,QAAS,wEAET,UAAW,CACT,KAAM,CAEJ,CACE,kBACA,CACE,MAAO,CACL,oBAAqB,CACnB,MAAO,aACP,KAAM,YACR,EACA,YAAa,CACX,MAAO,aACP,KAAM,YACR,EACA,WAAY,CAAE,MAAO,aAAc,KAAM,YAAa,CACxD,CACF,EACD,CAED,CAAE,QAAS,aAAc,EAEzB,CACE,IACA,CACE,MAAO,CACL,0BAA2B,CACzB,MAAO,eACP,KAAM,MACR,EACA,uBAAwB,CACtB,MAAO,eACP,KAAM,MACR,EACA,WAAY,WACd,CACF,EACD,CACD,CAAC,aAAc,YAAY,CAC3B,CAAC,mBAAoB,YAAY,CACjC,CACE,WACA,CACE,MAAO,CACL,aAAc,YACd,WAAY,EACd,CACF,EACD,CAED,CAAC,0CAA2C,eAAe,CAC3D,CAAC,qBAAsB,aAAa,CACpC,CAAC,cAAe,aAAa,CAE7B,CAAC,UAAW,SAAS,CAErB,CAAC,QAAS,YAAY,CAEtB,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,IAAK,CAAE,MAAO,eAAgB,KAAM,SAAU,EAAE,CACjD,CAAC,QAAS,CAAE,MAAO,eAAgB,KAAM,kBAAmB,EAAE,CAC9D,CAAC,MAAO,CAAE,MAAO,eAAgB,KAAM,YAAa,EAAE,CACtD,CAAC,MAAO,CAAE,MAAO,eAAgB,KAAM,qBAAsB,EAAE,CAE/D,CAAC,WAAY,SAAS,CACtB,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,SAAS,CAAC,CAC3D,CAAC,IAAK,iBAAiB,CACxB,CACD,UAAW,CACT,CACE,iBACA,CACE,MAAO,CACL,YAAa,CAAE,MAAO,YAAa,EACnC,WAAY,YACd,CACF,EACD,CACD,CAAC,KAAM,YAAY,CACnB,CAAC,GAAI,GAAI,OAAO,CACjB,CACD,UAAW,CACT,CAAE,QAAS,aAAc,EACzB,CAAC,WAAY,YAAY,CACzB,CAAC,QAAS,YAAY,CACtB,CAAC,GAAI,GAAI,OAAO,CACjB,CACD,QAAS,CACP,CAAC,UAAW,UAAU,CAEtB,CAAC,OAAQ,UAAW,OAAO,CAC3B,CAAC,QAAS,UAAU,CACrB,CACD,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,CAAE,MAAO,eAAgB,KAAM,MAAO,EAAE,CAC/C,CACD,UAAW,CACT,CAAC,QAAS,SAAS,CACnB,CAAC,KAAM,gBAAgB,CACvB,CAAC,IAAK,CAAE,MAAO,eAAgB,KAAM,MAAO,EAAE,CAC/C,CACD,gBAAiB,CACf,CAAC,SAAU,SAAS,CACpB,CAAC,KAAM,gBAAgB,CACvB,CAAC,KAAM,gBAAgB,CACvB,CAAC,KAAM,gBAAgB,CACvB,CAAC,IAAK,CAAE,MAAO,eAAgB,KAAM,sBAAuB,EAAE,CAC9D,CAAC,IAAK,CAAE,MAAO,eAAgB,KAAM,MAAO,EAAE,CAC/C,CACD,mBAAoB,CAClB,CAAC,WAAY,SAAS,CACtB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,KAAM,gBAAgB,CACvB,CAAC,KAAM,gBAAgB,CACvB,CAAC,IAAK,CAAE,MAAO,eAAgB,KAAM,yBAA0B,EAAE,CACjE,CAAC,IAAK,CAAE,MAAO,eAAgB,KAAM,MAAO,EAAE,CAC/C,CACD,WAAY,CACV,CAAC,iCAAkC,gBAAgB,CACnD,CAAC,oBAAqB,gBAAgB,CACtC,CAAC,iBAAkB,GAAG,CACtB,CAAC,OAAQ,UAAW,WAAW,CAC/B,CAAC,UAAW,UAAU,CACvB,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/csharp/csharp.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bjuqe\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $83c9113cc998c0ff$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $83c9113cc998c0ff$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/csharp/csharp.ts\nvar $83c9113cc998c0ff$export$c83be1687c028fc9 = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"<\",\n            close: \">\"\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nvar $83c9113cc998c0ff$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".cs\",\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        },\n        {\n            open: \"<\",\n            close: \">\",\n            token: \"delimiter.angle\"\n        }\n    ],\n    keywords: [\n        \"extern\",\n        \"alias\",\n        \"using\",\n        \"bool\",\n        \"decimal\",\n        \"sbyte\",\n        \"byte\",\n        \"short\",\n        \"ushort\",\n        \"int\",\n        \"uint\",\n        \"long\",\n        \"ulong\",\n        \"char\",\n        \"float\",\n        \"double\",\n        \"object\",\n        \"dynamic\",\n        \"string\",\n        \"assembly\",\n        \"is\",\n        \"as\",\n        \"ref\",\n        \"out\",\n        \"this\",\n        \"base\",\n        \"new\",\n        \"typeof\",\n        \"void\",\n        \"checked\",\n        \"unchecked\",\n        \"default\",\n        \"delegate\",\n        \"var\",\n        \"const\",\n        \"if\",\n        \"else\",\n        \"switch\",\n        \"case\",\n        \"while\",\n        \"do\",\n        \"for\",\n        \"foreach\",\n        \"in\",\n        \"break\",\n        \"continue\",\n        \"goto\",\n        \"return\",\n        \"throw\",\n        \"try\",\n        \"catch\",\n        \"finally\",\n        \"lock\",\n        \"yield\",\n        \"from\",\n        \"let\",\n        \"where\",\n        \"join\",\n        \"on\",\n        \"equals\",\n        \"into\",\n        \"orderby\",\n        \"ascending\",\n        \"descending\",\n        \"select\",\n        \"group\",\n        \"by\",\n        \"namespace\",\n        \"partial\",\n        \"class\",\n        \"field\",\n        \"event\",\n        \"method\",\n        \"param\",\n        \"public\",\n        \"protected\",\n        \"internal\",\n        \"private\",\n        \"abstract\",\n        \"sealed\",\n        \"static\",\n        \"struct\",\n        \"readonly\",\n        \"volatile\",\n        \"virtual\",\n        \"override\",\n        \"params\",\n        \"get\",\n        \"set\",\n        \"add\",\n        \"remove\",\n        \"operator\",\n        \"true\",\n        \"false\",\n        \"implicit\",\n        \"explicit\",\n        \"interface\",\n        \"enum\",\n        \"null\",\n        \"async\",\n        \"await\",\n        \"fixed\",\n        \"sizeof\",\n        \"stackalloc\",\n        \"unsafe\",\n        \"nameof\",\n        \"when\"\n    ],\n    namespaceFollows: [\n        \"namespace\",\n        \"using\"\n    ],\n    parenFollows: [\n        \"if\",\n        \"for\",\n        \"while\",\n        \"switch\",\n        \"foreach\",\n        \"using\",\n        \"catch\",\n        \"when\"\n    ],\n    operators: [\n        \"=\",\n        \"??\",\n        \"||\",\n        \"&&\",\n        \"|\",\n        \"^\",\n        \"&\",\n        \"==\",\n        \"!=\",\n        \"<=\",\n        \">=\",\n        \"<<\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"%\",\n        \"!\",\n        \"~\",\n        \"++\",\n        \"--\",\n        \"+=\",\n        \"-=\",\n        \"*=\",\n        \"/=\",\n        \"%=\",\n        \"&=\",\n        \"|=\",\n        \"^=\",\n        \"<<=\",\n        \">>=\",\n        \">>\",\n        \"=>\"\n    ],\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // escape sequences\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /\\@?[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        \"@namespaceFollows\": {\n                            token: \"keyword.$0\",\n                            next: \"@namespace\"\n                        },\n                        \"@keywords\": {\n                            token: \"keyword.$0\",\n                            next: \"@qualified\"\n                        },\n                        \"@default\": {\n                            token: \"identifier\",\n                            next: \"@qualified\"\n                        }\n                    }\n                }\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // delimiters and operators\n            [\n                /}/,\n                {\n                    cases: {\n                        \"$S2==interpolatedstring\": {\n                            token: \"string.quote\",\n                            next: \"@pop\"\n                        },\n                        \"$S2==litinterpstring\": {\n                            token: \"string.quote\",\n                            next: \"@pop\"\n                        },\n                        \"@default\": \"@brackets\"\n                    }\n                }\n            ],\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /[<>](?!@symbols)/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"delimiter\",\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/,\n                \"number.float\"\n            ],\n            [\n                /0[xX][0-9a-fA-F_]+/,\n                \"number.hex\"\n            ],\n            [\n                /0[bB][01_]+/,\n                \"number.hex\"\n            ],\n            // binary: use same theme style as hex\n            [\n                /[0-9_]+/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            // strings\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@string\"\n                }\n            ],\n            [\n                /\\$\\@\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@litinterpstring\"\n                }\n            ],\n            [\n                /\\@\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@litstring\"\n                }\n            ],\n            [\n                /\\$\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@interpolatedstring\"\n                }\n            ],\n            // characters\n            [\n                /'[^\\\\']'/,\n                \"string\"\n            ],\n            [\n                /(')(@escapes)(')/,\n                [\n                    \"string\",\n                    \"string.escape\",\n                    \"string\"\n                ]\n            ],\n            [\n                /'/,\n                \"string.invalid\"\n            ]\n        ],\n        qualified: [\n            [\n                /[a-zA-Z_][\\w]*/,\n                {\n                    cases: {\n                        \"@keywords\": {\n                            token: \"keyword.$0\"\n                        },\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            [\n                /\\./,\n                \"delimiter\"\n            ],\n            [\n                \"\",\n                \"\",\n                \"@pop\"\n            ]\n        ],\n        namespace: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /[A-Z]\\w*/,\n                \"namespace\"\n            ],\n            [\n                /[\\.=]/,\n                \"delimiter\"\n            ],\n            [\n                \"\",\n                \"\",\n                \"@pop\"\n            ]\n        ],\n        comment: [\n            [\n                /[^\\/*]+/,\n                \"comment\"\n            ],\n            // [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n            [\n                \"\\\\*/\",\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[\\/*]/,\n                \"comment\"\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        litstring: [\n            [\n                /[^\"]+/,\n                \"string\"\n            ],\n            [\n                /\"\"/,\n                \"string.escape\"\n            ],\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        litinterpstring: [\n            [\n                /[^\"{]+/,\n                \"string\"\n            ],\n            [\n                /\"\"/,\n                \"string.escape\"\n            ],\n            [\n                /{{/,\n                \"string.escape\"\n            ],\n            [\n                /}}/,\n                \"string.escape\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"string.quote\",\n                    next: \"root.litinterpstring\"\n                }\n            ],\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        interpolatedstring: [\n            [\n                /[^\\\\\"{]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /{{/,\n                \"string.escape\"\n            ],\n            [\n                /}}/,\n                \"string.escape\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"string.quote\",\n                    next: \"root.interpolatedstring\"\n                }\n            ],\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        whitespace: [\n            [\n                /^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/,\n                \"directive.csx\"\n            ],\n            [\n                /^[ \\t\\v\\f]*#\\w.*$/,\n                \"namespace.cpp\"\n            ],\n            [\n                /[ \\t\\v\\f\\r\\n]+/,\n                \"\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=csharp.da31b9ac.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/csharp/csharp.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".cs\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  keywords: [\n    \"extern\",\n    \"alias\",\n    \"using\",\n    \"bool\",\n    \"decimal\",\n    \"sbyte\",\n    \"byte\",\n    \"short\",\n    \"ushort\",\n    \"int\",\n    \"uint\",\n    \"long\",\n    \"ulong\",\n    \"char\",\n    \"float\",\n    \"double\",\n    \"object\",\n    \"dynamic\",\n    \"string\",\n    \"assembly\",\n    \"is\",\n    \"as\",\n    \"ref\",\n    \"out\",\n    \"this\",\n    \"base\",\n    \"new\",\n    \"typeof\",\n    \"void\",\n    \"checked\",\n    \"unchecked\",\n    \"default\",\n    \"delegate\",\n    \"var\",\n    \"const\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"case\",\n    \"while\",\n    \"do\",\n    \"for\",\n    \"foreach\",\n    \"in\",\n    \"break\",\n    \"continue\",\n    \"goto\",\n    \"return\",\n    \"throw\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"lock\",\n    \"yield\",\n    \"from\",\n    \"let\",\n    \"where\",\n    \"join\",\n    \"on\",\n    \"equals\",\n    \"into\",\n    \"orderby\",\n    \"ascending\",\n    \"descending\",\n    \"select\",\n    \"group\",\n    \"by\",\n    \"namespace\",\n    \"partial\",\n    \"class\",\n    \"field\",\n    \"event\",\n    \"method\",\n    \"param\",\n    \"public\",\n    \"protected\",\n    \"internal\",\n    \"private\",\n    \"abstract\",\n    \"sealed\",\n    \"static\",\n    \"struct\",\n    \"readonly\",\n    \"volatile\",\n    \"virtual\",\n    \"override\",\n    \"params\",\n    \"get\",\n    \"set\",\n    \"add\",\n    \"remove\",\n    \"operator\",\n    \"true\",\n    \"false\",\n    \"implicit\",\n    \"explicit\",\n    \"interface\",\n    \"enum\",\n    \"null\",\n    \"async\",\n    \"await\",\n    \"fixed\",\n    \"sizeof\",\n    \"stackalloc\",\n    \"unsafe\",\n    \"nameof\",\n    \"when\"\n  ],\n  namespaceFollows: [\"namespace\", \"using\"],\n  parenFollows: [\"if\", \"for\", \"while\", \"switch\", \"foreach\", \"using\", \"catch\", \"when\"],\n  operators: [\n    \"=\",\n    \"??\",\n    \"||\",\n    \"&&\",\n    \"|\",\n    \"^\",\n    \"&\",\n    \"==\",\n    \"!=\",\n    \"<=\",\n    \">=\",\n    \"<<\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"!\",\n    \"~\",\n    \"++\",\n    \"--\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"/=\",\n    \"%=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"<<=\",\n    \">>=\",\n    \">>\",\n    \"=>\"\n  ],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // escape sequences\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // identifiers and keywords\n      [\n        /\\@?[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            \"@namespaceFollows\": {\n              token: \"keyword.$0\",\n              next: \"@namespace\"\n            },\n            \"@keywords\": {\n              token: \"keyword.$0\",\n              next: \"@qualified\"\n            },\n            \"@default\": { token: \"identifier\", next: \"@qualified\" }\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [\n        /}/,\n        {\n          cases: {\n            \"$S2==interpolatedstring\": {\n              token: \"string.quote\",\n              next: \"@pop\"\n            },\n            \"$S2==litinterpstring\": {\n              token: \"string.quote\",\n              next: \"@pop\"\n            },\n            \"@default\": \"@brackets\"\n          }\n        }\n      ],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F_]+/, \"number.hex\"],\n      [/0[bB][01_]+/, \"number.hex\"],\n      // binary: use same theme style as hex\n      [/[0-9_]+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/\"/, { token: \"string.quote\", next: \"@string\" }],\n      [/\\$\\@\"/, { token: \"string.quote\", next: \"@litinterpstring\" }],\n      [/\\@\"/, { token: \"string.quote\", next: \"@litstring\" }],\n      [/\\$\"/, { token: \"string.quote\", next: \"@interpolatedstring\" }],\n      // characters\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    qualified: [\n      [\n        /[a-zA-Z_][\\w]*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/\\./, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    namespace: [\n      { include: \"@whitespace\" },\n      [/[A-Z]\\w*/, \"namespace\"],\n      [/[\\.=]/, \"delimiter\"],\n      [\"\", \"\", \"@pop\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      // [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    litstring: [\n      [/[^\"]+/, \"string\"],\n      [/\"\"/, \"string.escape\"],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    litinterpstring: [\n      [/[^\"{]+/, \"string\"],\n      [/\"\"/, \"string.escape\"],\n      [/{{/, \"string.escape\"],\n      [/}}/, \"string.escape\"],\n      [/{/, { token: \"string.quote\", next: \"root.litinterpstring\" }],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    interpolatedstring: [\n      [/[^\\\\\"{]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/{{/, \"string.escape\"],\n      [/}}/, \"string.escape\"],\n      [/{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\n      [/\"/, { token: \"string.quote\", next: \"@pop\" }]\n    ],\n    whitespace: [\n      [/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, \"directive.csx\"],\n      [/^[ \\t\\v\\f]*#\\w.*$/, \"namespace.cpp\"],\n      [/[ \\t\\v\\f\\r\\n]+/, \"\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$83c9113cc998c0ff$export$c83be1687c028fc9","$83c9113cc998c0ff$export$789c912f57fe164c","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","token","keywords","namespaceFollows","parenFollows","operators","symbols","escapes","tokenizer","root","cases","next","include","qualified","namespace","comment","string","litstring","litinterpstring","interpolatedstring","whitespace"],"version":3,"file":"csharp.da31b9ac.js.map"}