{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+EAK+E,EAI/E,IAAI,EAAO,CACT,SAAU,CACR,YAAa,GACf,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,MAAO,MAAO,MAAO,MAAO,CAAC,SAAU,UAAU,AAAC,EAC1D,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACvD,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,MAAO,MAAO,KAAM,EAC5B,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,CACD,QAAS,CACP,QAAS,CAAA,CACX,CACF,EACI,EAAW,CAEb,aAAc,UACd,aAAc,OACd,SAAU,CACR,OACA,OACA,QACA,QACA,WACA,eACA,SACA,SACA,YACA,SACA,OACA,YACA,QACA,OACA,QACA,aACA,WACA,KACD,CACD,aAAc,CAAC,MAAO,QAAS,SAAU,UAAW,KAAK,CACzD,mBAAoB,CAClB,SACA,SACA,SACA,mBACA,sBACA,YACA,QACA,OACA,aACA,eACA,yBACA,QACA,WACA,eACA,QACA,sBACA,kBACA,kBACA,sBACD,CACD,UAAW,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAI,CAEzC,QAAS,YAET,QAAS,qCAET,UAAW,CACT,KAAM,CAEJ,CACE,eACA,CACE,MAAO,CACL,YAAa,UACb,WAAY,gBACd,CACF,EACD,CAED,CACE,YACA,CACE,MAAO,CACL,YAAa,UACb,WAAY,qBACd,CACF,EACD,CAED,CACE,eACA,CACE,MAAO,CACL,gBAAiB,UACjB,WAAY,iBACd,CACF,EACD,CAED,CAAE,QAAS,aAAc,EAEzB,CAAC,aAAc,YAAY,CAC3B,CAAC,WAAY,CAAE,MAAO,CAAE,aAAc,WAAY,WAAY,EAAG,CAAE,EAAE,CAIrE,CAAC,yBAA0B,CAAE,MAAO,aAAc,IAAK,sBAAuB,EAAE,CAEhF,CAAC,2BAA4B,eAAe,CAC5C,CAAC,oBAAqB,aAAa,CACnC,CAAC,MAAO,SAAS,CAEjB,CAAC,QAAS,YAAY,CACtB,CAAC,MAAO,CAAE,MAAO,SAAU,KAAM,YAAa,aAAc,UAAW,EAAE,CAEzE,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,QAAS,KAAM,SAAU,EAAE,CACpE,CACD,SAAU,CACR,CAAC,QAAS,SAAS,CACnB,CAAC,MAAO,CAAE,MAAO,SAAU,KAAM,OAAQ,aAAc,MAAO,EAAE,CACjE,CACD,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,SAAU,KAAM,MAAO,EAAE,CAClE,CACD,WAAY,CACV,CAAC,aAAc,GAAG,CAClB,CAAC,OAAQ,UAAU,CACpB,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"cmcaH\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $8ff0fb278792bbef$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $8ff0fb278792bbef$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/graphql/graphql.ts\nvar $8ff0fb278792bbef$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"#\"\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"\"\"',\n            close: '\"\"\"',\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"\"\"',\n            close: '\"\"\"'\n        },\n        {\n            open: '\"',\n            close: '\"'\n        }\n    ],\n    folding: {\n        offSide: true\n    }\n};\nvar $8ff0fb278792bbef$export$789c912f57fe164c = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: \"invalid\",\n    tokenPostfix: \".gql\",\n    keywords: [\n        \"null\",\n        \"true\",\n        \"false\",\n        \"query\",\n        \"mutation\",\n        \"subscription\",\n        \"extend\",\n        \"schema\",\n        \"directive\",\n        \"scalar\",\n        \"type\",\n        \"interface\",\n        \"union\",\n        \"enum\",\n        \"input\",\n        \"implements\",\n        \"fragment\",\n        \"on\"\n    ],\n    typeKeywords: [\n        \"Int\",\n        \"Float\",\n        \"String\",\n        \"Boolean\",\n        \"ID\"\n    ],\n    directiveLocations: [\n        \"SCHEMA\",\n        \"SCALAR\",\n        \"OBJECT\",\n        \"FIELD_DEFINITION\",\n        \"ARGUMENT_DEFINITION\",\n        \"INTERFACE\",\n        \"UNION\",\n        \"ENUM\",\n        \"ENUM_VALUE\",\n        \"INPUT_OBJECT\",\n        \"INPUT_FIELD_DEFINITION\",\n        \"QUERY\",\n        \"MUTATION\",\n        \"SUBSCRIPTION\",\n        \"FIELD\",\n        \"FRAGMENT_DEFINITION\",\n        \"FRAGMENT_SPREAD\",\n        \"INLINE_FRAGMENT\",\n        \"VARIABLE_DEFINITION\"\n    ],\n    operators: [\n        \"=\",\n        \"!\",\n        \"?\",\n        \":\",\n        \"&\",\n        \"|\"\n    ],\n    // we include these common regular expressions\n    symbols: /[=!?:&|]+/,\n    // https://facebook.github.io/graphql/draft/#sec-String-Value\n    escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // fields and argument names\n            [\n                /[a-z_][\\w$]*/,\n                {\n                    cases: {\n                        \"@keywords\": \"keyword\",\n                        \"@default\": \"key.identifier\"\n                    }\n                }\n            ],\n            // identify typed input variables\n            [\n                /[$][\\w$]*/,\n                {\n                    cases: {\n                        \"@keywords\": \"keyword\",\n                        \"@default\": \"argument.identifier\"\n                    }\n                }\n            ],\n            // to show class names nicely\n            [\n                /[A-Z][\\w\\$]*/,\n                {\n                    cases: {\n                        \"@typeKeywords\": \"keyword\",\n                        \"@default\": \"type.identifier\"\n                    }\n                }\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // delimiters and operators\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"operator\",\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // @ annotations.\n            // As an example, we emit a debugging log message on these tokens.\n            // Note: message are supressed during the first load -- change some lines to see them.\n            [\n                /@\\s*[a-zA-Z_\\$][\\w\\$]*/,\n                {\n                    token: \"annotation\",\n                    log: \"annotation token: $0\"\n                }\n            ],\n            // numbers\n            [\n                /\\d*\\.\\d+([eE][\\-+]?\\d+)?/,\n                \"number.float\"\n            ],\n            [\n                /0[xX][0-9a-fA-F]+/,\n                \"number.hex\"\n            ],\n            [\n                /\\d+/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            [\n                /\"\"\"/,\n                {\n                    token: \"string\",\n                    next: \"@mlstring\",\n                    nextEmbedded: \"markdown\"\n                }\n            ],\n            // strings\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@open\",\n                    next: \"@string\"\n                }\n            ]\n        ],\n        mlstring: [\n            [\n                /[^\"]+/,\n                \"string\"\n            ],\n            [\n                '\"\"\"',\n                {\n                    token: \"string\",\n                    next: \"@pop\",\n                    nextEmbedded: \"@pop\"\n                }\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"\"\n            ],\n            [\n                /#.*$/,\n                \"comment\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=graphql.26dcf54e.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/graphql/graphql.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"\"\"', close: '\"\"\"', notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"\"\"', close: '\"\"\"' },\n    { open: '\"', close: '\"' }\n  ],\n  folding: {\n    offSide: true\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: \"invalid\",\n  tokenPostfix: \".gql\",\n  keywords: [\n    \"null\",\n    \"true\",\n    \"false\",\n    \"query\",\n    \"mutation\",\n    \"subscription\",\n    \"extend\",\n    \"schema\",\n    \"directive\",\n    \"scalar\",\n    \"type\",\n    \"interface\",\n    \"union\",\n    \"enum\",\n    \"input\",\n    \"implements\",\n    \"fragment\",\n    \"on\"\n  ],\n  typeKeywords: [\"Int\", \"Float\", \"String\", \"Boolean\", \"ID\"],\n  directiveLocations: [\n    \"SCHEMA\",\n    \"SCALAR\",\n    \"OBJECT\",\n    \"FIELD_DEFINITION\",\n    \"ARGUMENT_DEFINITION\",\n    \"INTERFACE\",\n    \"UNION\",\n    \"ENUM\",\n    \"ENUM_VALUE\",\n    \"INPUT_OBJECT\",\n    \"INPUT_FIELD_DEFINITION\",\n    \"QUERY\",\n    \"MUTATION\",\n    \"SUBSCRIPTION\",\n    \"FIELD\",\n    \"FRAGMENT_DEFINITION\",\n    \"FRAGMENT_SPREAD\",\n    \"INLINE_FRAGMENT\",\n    \"VARIABLE_DEFINITION\"\n  ],\n  operators: [\"=\", \"!\", \"?\", \":\", \"&\", \"|\"],\n  // we include these common regular expressions\n  symbols: /[=!?:&|]+/,\n  // https://facebook.github.io/graphql/draft/#sec-String-Value\n  escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // fields and argument names\n      [\n        /[a-z_][\\w$]*/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"key.identifier\"\n          }\n        }\n      ],\n      // identify typed input variables\n      [\n        /[$][\\w$]*/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"argument.identifier\"\n          }\n        }\n      ],\n      // to show class names nicely\n      [\n        /[A-Z][\\w\\$]*/,\n        {\n          cases: {\n            \"@typeKeywords\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/@symbols/, { cases: { \"@operators\": \"operator\", \"@default\": \"\" } }],\n      // @ annotations.\n      // As an example, we emit a debugging log message on these tokens.\n      // Note: message are supressed during the first load -- change some lines to see them.\n      [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, { token: \"annotation\", log: \"annotation token: $0\" }],\n      // numbers\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      [/\"\"\"/, { token: \"string\", next: \"@mlstring\", nextEmbedded: \"markdown\" }],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }]\n    ],\n    mlstring: [\n      [/[^\"]+/, \"string\"],\n      ['\"\"\"', { token: \"string\", next: \"@pop\", nextEmbedded: \"@pop\" }]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/#.*$/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$8ff0fb278792bbef$export$c83be1687c028fc9","$8ff0fb278792bbef$export$789c912f57fe164c","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","offSide","defaultToken","tokenPostfix","keywords","typeKeywords","directiveLocations","operators","symbols","escapes","tokenizer","root","cases","include","token","log","next","nextEmbedded","bracket","mlstring","string","whitespace"],"version":3,"file":"graphql.26dcf54e.js.map"}