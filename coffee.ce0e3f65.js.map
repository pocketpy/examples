{"mappings":"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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/coffee/coffee.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8UtSn\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $67caba738c948ffd$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $67caba738c948ffd$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/coffee/coffee.ts\nvar $67caba738c948ffd$export$c83be1687c028fc9 = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        blockComment: [\n            \"###\",\n            \"###\"\n        ],\n        lineComment: \"#\"\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nvar $67caba738c948ffd$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    ignoreCase: true,\n    tokenPostfix: \".coffee\",\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        }\n    ],\n    regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n    keywords: [\n        \"and\",\n        \"or\",\n        \"is\",\n        \"isnt\",\n        \"not\",\n        \"on\",\n        \"yes\",\n        \"@\",\n        \"no\",\n        \"off\",\n        \"true\",\n        \"false\",\n        \"null\",\n        \"this\",\n        \"new\",\n        \"delete\",\n        \"typeof\",\n        \"in\",\n        \"instanceof\",\n        \"return\",\n        \"throw\",\n        \"break\",\n        \"continue\",\n        \"debugger\",\n        \"if\",\n        \"else\",\n        \"switch\",\n        \"for\",\n        \"while\",\n        \"do\",\n        \"try\",\n        \"catch\",\n        \"finally\",\n        \"class\",\n        \"extends\",\n        \"super\",\n        \"undefined\",\n        \"then\",\n        \"unless\",\n        \"until\",\n        \"loop\",\n        \"of\",\n        \"by\",\n        \"when\"\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /\\@[a-zA-Z_]\\w*/,\n                \"variable.predefined\"\n            ],\n            [\n                /[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        this: \"variable.predefined\",\n                        \"@keywords\": {\n                            token: \"keyword.$0\"\n                        },\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // whitespace\n            [\n                /[ \\t\\r\\n]+/,\n                \"\"\n            ],\n            // Comments\n            [\n                /###/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /#.*$/,\n                \"comment\"\n            ],\n            // regular expressions\n            [\n                \"///\",\n                {\n                    token: \"regexp\",\n                    next: \"@hereregexp\"\n                }\n            ],\n            [\n                /^(\\s*)(@regEx)/,\n                [\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\()(\\s*)(@regEx)/,\n                [\n                    \"@brackets\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\,)(\\s*)(@regEx)/,\n                [\n                    \"delimiter\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\=)(\\s*)(@regEx)/,\n                [\n                    \"delimiter\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\:)(\\s*)(@regEx)/,\n                [\n                    \"delimiter\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\[)(\\s*)(@regEx)/,\n                [\n                    \"@brackets\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\!)(\\s*)(@regEx)/,\n                [\n                    \"delimiter\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\&)(\\s*)(@regEx)/,\n                [\n                    \"delimiter\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\|)(\\s*)(@regEx)/,\n                [\n                    \"delimiter\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\?)(\\s*)(@regEx)/,\n                [\n                    \"delimiter\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\{)(\\s*)(@regEx)/,\n                [\n                    \"@brackets\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            [\n                /(\\;)(\\s*)(@regEx)/,\n                [\n                    \"\",\n                    \"\",\n                    \"regexp\"\n                ]\n            ],\n            // delimiters\n            [\n                /}/,\n                {\n                    cases: {\n                        \"$S2==interpolatedstring\": {\n                            token: \"string\",\n                            next: \"@pop\"\n                        },\n                        \"@default\": \"@brackets\"\n                    }\n                }\n            ],\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                \"delimiter\"\n            ],\n            // numbers\n            [\n                /\\d+[eE]([\\-+]?\\d+)?/,\n                \"number.float\"\n            ],\n            [\n                /\\d+\\.\\d+([eE][\\-+]?\\d+)?/,\n                \"number.float\"\n            ],\n            [\n                /0[xX][0-9a-fA-F]+/,\n                \"number.hex\"\n            ],\n            [\n                /0[0-7]+(?!\\d)/,\n                \"number.octal\"\n            ],\n            [\n                /\\d+/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[,.]/,\n                \"delimiter\"\n            ],\n            // strings:\n            [\n                /\"\"\"/,\n                \"string\",\n                '@herestring.\"\"\"'\n            ],\n            [\n                /'''/,\n                \"string\",\n                \"@herestring.'''\"\n            ],\n            [\n                /\"/,\n                {\n                    cases: {\n                        \"@eos\": \"string\",\n                        \"@default\": {\n                            token: \"string\",\n                            next: '@string.\"'\n                        }\n                    }\n                }\n            ],\n            [\n                /'/,\n                {\n                    cases: {\n                        \"@eos\": \"string\",\n                        \"@default\": {\n                            token: \"string\",\n                            next: \"@string.'\"\n                        }\n                    }\n                }\n            ]\n        ],\n        string: [\n            [\n                /[^\"'\\#\\\\]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /#{/,\n                {\n                    cases: {\n                        '$S2==\"': {\n                            token: \"string\",\n                            next: \"root.interpolatedstring\"\n                        },\n                        \"@default\": \"string\"\n                    }\n                }\n            ],\n            [\n                /[\"']/,\n                {\n                    cases: {\n                        \"$#==$S2\": {\n                            token: \"string\",\n                            next: \"@pop\"\n                        },\n                        \"@default\": \"string\"\n                    }\n                }\n            ],\n            [\n                /#/,\n                \"string\"\n            ]\n        ],\n        herestring: [\n            [\n                /(\"\"\"|''')/,\n                {\n                    cases: {\n                        \"$1==$S2\": {\n                            token: \"string\",\n                            next: \"@pop\"\n                        },\n                        \"@default\": \"string\"\n                    }\n                }\n            ],\n            [\n                /[^#\\\\'\"]+/,\n                \"string\"\n            ],\n            [\n                /['\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /#{/,\n                {\n                    token: \"string.quote\",\n                    next: \"root.interpolatedstring\"\n                }\n            ],\n            [\n                /#/,\n                \"string\"\n            ]\n        ],\n        comment: [\n            [\n                /[^#]+/,\n                \"comment\"\n            ],\n            [\n                /###/,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /#/,\n                \"comment\"\n            ]\n        ],\n        hereregexp: [\n            [\n                /[^\\\\\\/#]+/,\n                \"regexp\"\n            ],\n            [\n                /\\\\./,\n                \"regexp\"\n            ],\n            [\n                /#.*$/,\n                \"comment\"\n            ],\n            [\n                \"///[igm]*\",\n                {\n                    token: \"regexp\",\n                    next: \"@pop\"\n                }\n            ],\n            [\n                /\\//,\n                \"regexp\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=coffee.ce0e3f65.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/coffee/coffee.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#%\\^\\&\\*\\(\\)\\=\\$\\-\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    blockComment: [\"###\", \"###\"],\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*#region\\\\b\"),\n      end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: true,\n  tokenPostfix: \".coffee\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  regEx: /\\/(?!\\/\\/)(?:[^\\/\\\\]|\\\\.)*\\/[igm]*/,\n  keywords: [\n    \"and\",\n    \"or\",\n    \"is\",\n    \"isnt\",\n    \"not\",\n    \"on\",\n    \"yes\",\n    \"@\",\n    \"no\",\n    \"off\",\n    \"true\",\n    \"false\",\n    \"null\",\n    \"this\",\n    \"new\",\n    \"delete\",\n    \"typeof\",\n    \"in\",\n    \"instanceof\",\n    \"return\",\n    \"throw\",\n    \"break\",\n    \"continue\",\n    \"debugger\",\n    \"if\",\n    \"else\",\n    \"switch\",\n    \"for\",\n    \"while\",\n    \"do\",\n    \"try\",\n    \"catch\",\n    \"finally\",\n    \"class\",\n    \"extends\",\n    \"super\",\n    \"undefined\",\n    \"then\",\n    \"unless\",\n    \"until\",\n    \"loop\",\n    \"of\",\n    \"by\",\n    \"when\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?&%|+\\-*\\/\\^\\.,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // identifiers and keywords\n      [/\\@[a-zA-Z_]\\w*/, \"variable.predefined\"],\n      [\n        /[a-zA-Z_]\\w*/,\n        {\n          cases: {\n            this: \"variable.predefined\",\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // whitespace\n      [/[ \\t\\r\\n]+/, \"\"],\n      // Comments\n      [/###/, \"comment\", \"@comment\"],\n      [/#.*$/, \"comment\"],\n      // regular expressions\n      [\"///\", { token: \"regexp\", next: \"@hereregexp\" }],\n      [/^(\\s*)(@regEx)/, [\"\", \"regexp\"]],\n      [/(\\()(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\n      [/(\\,)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\=)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\:)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\[)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\n      [/(\\!)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\&)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\|)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\?)(\\s*)(@regEx)/, [\"delimiter\", \"\", \"regexp\"]],\n      [/(\\{)(\\s*)(@regEx)/, [\"@brackets\", \"\", \"regexp\"]],\n      [/(\\;)(\\s*)(@regEx)/, [\"\", \"\", \"regexp\"]],\n      // delimiters\n      [\n        /}/,\n        {\n          cases: {\n            \"$S2==interpolatedstring\": {\n              token: \"string\",\n              next: \"@pop\"\n            },\n            \"@default\": \"@brackets\"\n          }\n        }\n      ],\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      // numbers\n      [/\\d+[eE]([\\-+]?\\d+)?/, \"number.float\"],\n      [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/0[0-7]+(?!\\d)/, \"number.octal\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[,.]/, \"delimiter\"],\n      // strings:\n      [/\"\"\"/, \"string\", '@herestring.\"\"\"'],\n      [/'''/, \"string\", \"@herestring.'''\"],\n      [\n        /\"/,\n        {\n          cases: {\n            \"@eos\": \"string\",\n            \"@default\": { token: \"string\", next: '@string.\"' }\n          }\n        }\n      ],\n      [\n        /'/,\n        {\n          cases: {\n            \"@eos\": \"string\",\n            \"@default\": { token: \"string\", next: \"@string.'\" }\n          }\n        }\n      ]\n    ],\n    string: [\n      [/[^\"'\\#\\\\]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\./, \"string.escape.invalid\"],\n      [/\\./, \"string.escape.invalid\"],\n      [\n        /#{/,\n        {\n          cases: {\n            '$S2==\"': {\n              token: \"string\",\n              next: \"root.interpolatedstring\"\n            },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [\n        /[\"']/,\n        {\n          cases: {\n            \"$#==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [/#/, \"string\"]\n    ],\n    herestring: [\n      [\n        /(\"\"\"|''')/,\n        {\n          cases: {\n            \"$1==$S2\": { token: \"string\", next: \"@pop\" },\n            \"@default\": \"string\"\n          }\n        }\n      ],\n      [/[^#\\\\'\"]+/, \"string\"],\n      [/['\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\./, \"string.escape.invalid\"],\n      [/#{/, { token: \"string.quote\", next: \"root.interpolatedstring\" }],\n      [/#/, \"string\"]\n    ],\n    comment: [\n      [/[^#]+/, \"comment\"],\n      [/###/, \"comment\", \"@pop\"],\n      [/#/, \"comment\"]\n    ],\n    hereregexp: [\n      [/[^\\\\\\/#]+/, \"regexp\"],\n      [/\\\\./, \"regexp\"],\n      [/#.*$/, \"comment\"],\n      [\"///[igm]*\", { token: \"regexp\", next: \"@pop\" }],\n      [/\\//, \"regexp\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$67caba738c948ffd$export$c83be1687c028fc9","$67caba738c948ffd$export$789c912f57fe164c","wordPattern","comments","blockComment","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","ignoreCase","tokenPostfix","token","regEx","keywords","symbols","escapes","tokenizer","root","cases","this","next","string","herestring","comment","hereregexp"],"version":3,"file":"coffee.ce0e3f65.js.map"}