{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+EAK+E,EAI/E,IAAI,EAAO,CACT,SAAU,CACR,YAAa,KACb,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACvD,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,AACH,EACI,EAAW,CACb,aAAc,GACd,aAAc,OACd,WAAY,CAAA,EACZ,SAAU,CACR,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EAClD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,kBAAmB,EACnD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,uBAAwB,EACxD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EACnD,CACD,OAAQ,mHAkBR,SAAU,CACR,iBACA,QACA,MACA,MACA,MACA,KACA,SACA,SACA,SACA,OACA,UACA,OACA,UACA,aACA,cACA,QACA,UACA,MACA,UACA,UACA,QACA,WACA,UACA,MACA,OACA,WACA,WACA,OACA,SACA,SACA,YACA,SACA,SACA,SACA,OACA,MACA,eACA,QACA,OACA,UACA,OACA,OACA,WACA,gBACA,QACA,UACA,UACA,OACA,UACA,SACA,KACA,QACA,YACA,WACA,SACA,OACA,QACA,OACA,OACA,QACA,cACA,UACA,gBACA,OACA,QACA,SACA,SACA,MACA,QACA,OACA,WACA,YACA,WACA,SACA,OACA,WACA,QACA,YACA,SACA,SACA,SACA,SACA,MACA,UACA,KACA,SACA,OACA,MACA,KACA,QACA,YACA,SACA,YACA,UACA,iBACA,OACA,WACA,QACA,SACA,SACA,QACA,SACA,QACA,SACA,SACA,OACA,SACA,OACA,QACA,OACA,YACA,UACA,SACA,OACA,OACA,QACA,aACA,MACA,SACA,QACA,aACA,OACA,YACA,YACA,UACA,QACA,YACA,OACA,OACA,eACA,YACA,WACA,WACA,SACA,MACA,WACA,UACA,QACA,QACA,OACA,SACA,UACA,MACA,QACD,CACD,UAAW,CACT,MACA,OACA,YACA,WACA,QACA,QACA,OACA,SACA,WACA,OACA,QACA,MACA,QACA,aACA,OACA,QACA,SACA,UACA,aACA,cACA,UACA,cACA,MACA,OACA,QACA,aACA,OACA,UACA,QACA,SACA,cACA,aACA,aACA,cACA,eACA,SACA,OACA,QACA,WACA,QACA,aACA,YACA,SACA,MACA,OACA,WACA,cACA,QACA,cACA,UACA,SACA,aACA,SACA,QACA,QACA,OACA,SACA,SACA,UACA,UACA,SACA,WACA,aACA,KACA,MACA,QACA,YACA,UACA,UACA,OACA,UACA,WACA,aACA,SACA,UACA,QACA,KACA,UACA,QACA,MACA,OACA,MACA,UACA,cACA,gBACA,YACA,eACA,MACA,QACA,YACA,MACA,SACA,UACA,WACA,YACA,SACA,SACA,SACA,WACA,QACA,OACA,QACA,UACA,UACA,UACA,OACA,SACA,QACA,OACA,SACA,aACA,WACA,YACA,eACA,UACA,WACA,SACA,QACA,UACA,MACA,UACA,SACA,aACA,MACA,MACA,OACA,SACA,WACA,OACA,SACA,OACA,UACA,SACA,MACA,QACA,MACA,OACA,WACA,OACA,YACA,QACA,WACA,YACA,OACA,WACA,SACA,UACA,eACA,WACA,OACA,QACA,WACA,YACA,YACA,UACA,aACD,CACD,SAAU,mBACV,SAAU,CAAC,OAAQ,UAAW,SAAU,UAAW,OAAQ,YAAa,aAAa,CACrF,SAAU,6LA0BV,UAAW,CAAC,IAAK,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,MAAO,KAAM,MAAO,KAAK,CACrF,QAAS,wBAET,QAAS,wEAET,UAAW,CACT,KAAM,CACJ,CAAC,iBAAkB,OAAO,CAC1B,CAAC,aAAc,OAAO,CACtB,CAAC,YAAa,OAAO,CACrB,CACE,oBACA,CACE,MAAO,CACL,aAAc,mBACd,YAAa,UACb,aAAc,UAChB,CACF,EACD,CAED,CAAE,QAAS,aAAc,EACzB,CAAC,aAAc,YAAY,CAC3B,CAAC,mBAAoB,YAAY,CACjC,CACE,WACA,CACE,MAAO,CACL,aAAc,YACd,WAAY,EACd,CACF,EACD,CAED,CAAC,mCAAoC,eAAe,CACpD,CAAC,qBAAsB,aAAa,CACpC,CAAC,aAAc,aAAa,CAE5B,CAAC,UAAW,SAAS,CAErB,CAAC,QAAS,YAAY,CAEtB,CAAC,kBAAmB,iBAAiB,CACrC,CAAC,IAAK,SAAU,UAAU,CAE1B,CAAC,WAAY,SAAS,CACtB,CAAC,mBAAoB,CAAC,SAAU,gBAAiB,SAAS,CAAC,CAC3D,CAAC,IAAK,iBAAiB,CACxB,CACD,WAAY,CACV,CAAC,iBAAkB,GAAG,CACtB,CAAC,OAAQ,UAAW,WAAW,CAC/B,CAAC,UAAW,UAAU,CACvB,CACD,QAAS,CACP,CAAC,UAAW,UAAU,CACtB,CAAC,OAAQ,UAAW,OAAO,CAC3B,CAAC,QAAS,UAAU,CACrB,CACD,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,SAAU,OAAO,CACxB,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/ecl/ecl.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"eFlQk\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $aad5d69a1fad540f$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $aad5d69a1fad540f$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/ecl/ecl.ts\nvar $aad5d69a1fad540f$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"<\",\n            close: \">\"\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        }\n    ]\n};\nvar $aad5d69a1fad540f$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".ecl\",\n    ignoreCase: true,\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        },\n        {\n            open: \"<\",\n            close: \">\",\n            token: \"delimiter.angle\"\n        }\n    ],\n    pounds: [\n        \"append\",\n        \"break\",\n        \"declare\",\n        \"demangle\",\n        \"end\",\n        \"for\",\n        \"getdatatype\",\n        \"if\",\n        \"inmodule\",\n        \"loop\",\n        \"mangle\",\n        \"onwarning\",\n        \"option\",\n        \"set\",\n        \"stored\",\n        \"uniquename\"\n    ].join(\"|\"),\n    keywords: [\n        \"__compressed__\",\n        \"after\",\n        \"all\",\n        \"and\",\n        \"any\",\n        \"as\",\n        \"atmost\",\n        \"before\",\n        \"beginc\",\n        \"best\",\n        \"between\",\n        \"case\",\n        \"cluster\",\n        \"compressed\",\n        \"compression\",\n        \"const\",\n        \"counter\",\n        \"csv\",\n        \"default\",\n        \"descend\",\n        \"embed\",\n        \"encoding\",\n        \"encrypt\",\n        \"end\",\n        \"endc\",\n        \"endembed\",\n        \"endmacro\",\n        \"enum\",\n        \"escape\",\n        \"except\",\n        \"exclusive\",\n        \"expire\",\n        \"export\",\n        \"extend\",\n        \"fail\",\n        \"few\",\n        \"fileposition\",\n        \"first\",\n        \"flat\",\n        \"forward\",\n        \"from\",\n        \"full\",\n        \"function\",\n        \"functionmacro\",\n        \"group\",\n        \"grouped\",\n        \"heading\",\n        \"hole\",\n        \"ifblock\",\n        \"import\",\n        \"in\",\n        \"inner\",\n        \"interface\",\n        \"internal\",\n        \"joined\",\n        \"keep\",\n        \"keyed\",\n        \"last\",\n        \"left\",\n        \"limit\",\n        \"linkcounted\",\n        \"literal\",\n        \"little_endian\",\n        \"load\",\n        \"local\",\n        \"locale\",\n        \"lookup\",\n        \"lzw\",\n        \"macro\",\n        \"many\",\n        \"maxcount\",\n        \"maxlength\",\n        \"min skew\",\n        \"module\",\n        \"mofn\",\n        \"multiple\",\n        \"named\",\n        \"namespace\",\n        \"nocase\",\n        \"noroot\",\n        \"noscan\",\n        \"nosort\",\n        \"not\",\n        \"noxpath\",\n        \"of\",\n        \"onfail\",\n        \"only\",\n        \"opt\",\n        \"or\",\n        \"outer\",\n        \"overwrite\",\n        \"packed\",\n        \"partition\",\n        \"penalty\",\n        \"physicallength\",\n        \"pipe\",\n        \"prefetch\",\n        \"quote\",\n        \"record\",\n        \"repeat\",\n        \"retry\",\n        \"return\",\n        \"right\",\n        \"right1\",\n        \"right2\",\n        \"rows\",\n        \"rowset\",\n        \"scan\",\n        \"scope\",\n        \"self\",\n        \"separator\",\n        \"service\",\n        \"shared\",\n        \"skew\",\n        \"skip\",\n        \"smart\",\n        \"soapaction\",\n        \"sql\",\n        \"stable\",\n        \"store\",\n        \"terminator\",\n        \"thor\",\n        \"threshold\",\n        \"timelimit\",\n        \"timeout\",\n        \"token\",\n        \"transform\",\n        \"trim\",\n        \"type\",\n        \"unicodeorder\",\n        \"unordered\",\n        \"unsorted\",\n        \"unstable\",\n        \"update\",\n        \"use\",\n        \"validate\",\n        \"virtual\",\n        \"whole\",\n        \"width\",\n        \"wild\",\n        \"within\",\n        \"wnotrim\",\n        \"xml\",\n        \"xpath\"\n    ],\n    functions: [\n        \"abs\",\n        \"acos\",\n        \"aggregate\",\n        \"allnodes\",\n        \"apply\",\n        \"ascii\",\n        \"asin\",\n        \"assert\",\n        \"asstring\",\n        \"atan\",\n        \"atan2\",\n        \"ave\",\n        \"build\",\n        \"buildindex\",\n        \"case\",\n        \"catch\",\n        \"choose\",\n        \"choosen\",\n        \"choosesets\",\n        \"clustersize\",\n        \"combine\",\n        \"correlation\",\n        \"cos\",\n        \"cosh\",\n        \"count\",\n        \"covariance\",\n        \"cron\",\n        \"dataset\",\n        \"dedup\",\n        \"define\",\n        \"denormalize\",\n        \"dictionary\",\n        \"distribute\",\n        \"distributed\",\n        \"distribution\",\n        \"ebcdic\",\n        \"enth\",\n        \"error\",\n        \"evaluate\",\n        \"event\",\n        \"eventextra\",\n        \"eventname\",\n        \"exists\",\n        \"exp\",\n        \"fail\",\n        \"failcode\",\n        \"failmessage\",\n        \"fetch\",\n        \"fromunicode\",\n        \"fromxml\",\n        \"getenv\",\n        \"getisvalid\",\n        \"global\",\n        \"graph\",\n        \"group\",\n        \"hash\",\n        \"hash32\",\n        \"hash64\",\n        \"hashcrc\",\n        \"hashmd5\",\n        \"having\",\n        \"httpcall\",\n        \"httpheader\",\n        \"if\",\n        \"iff\",\n        \"index\",\n        \"intformat\",\n        \"isvalid\",\n        \"iterate\",\n        \"join\",\n        \"keydiff\",\n        \"keypatch\",\n        \"keyunicode\",\n        \"length\",\n        \"library\",\n        \"limit\",\n        \"ln\",\n        \"loadxml\",\n        \"local\",\n        \"log\",\n        \"loop\",\n        \"map\",\n        \"matched\",\n        \"matchlength\",\n        \"matchposition\",\n        \"matchtext\",\n        \"matchunicode\",\n        \"max\",\n        \"merge\",\n        \"mergejoin\",\n        \"min\",\n        \"nofold\",\n        \"nolocal\",\n        \"nonempty\",\n        \"normalize\",\n        \"nothor\",\n        \"notify\",\n        \"output\",\n        \"parallel\",\n        \"parse\",\n        \"pipe\",\n        \"power\",\n        \"preload\",\n        \"process\",\n        \"project\",\n        \"pull\",\n        \"random\",\n        \"range\",\n        \"rank\",\n        \"ranked\",\n        \"realformat\",\n        \"recordof\",\n        \"regexfind\",\n        \"regexreplace\",\n        \"regroup\",\n        \"rejected\",\n        \"rollup\",\n        \"round\",\n        \"roundup\",\n        \"row\",\n        \"rowdiff\",\n        \"sample\",\n        \"sequential\",\n        \"set\",\n        \"sin\",\n        \"sinh\",\n        \"sizeof\",\n        \"soapcall\",\n        \"sort\",\n        \"sorted\",\n        \"sqrt\",\n        \"stepped\",\n        \"stored\",\n        \"sum\",\n        \"table\",\n        \"tan\",\n        \"tanh\",\n        \"thisnode\",\n        \"topn\",\n        \"tounicode\",\n        \"toxml\",\n        \"transfer\",\n        \"transform\",\n        \"trim\",\n        \"truncate\",\n        \"typeof\",\n        \"ungroup\",\n        \"unicodeorder\",\n        \"variance\",\n        \"wait\",\n        \"which\",\n        \"workunit\",\n        \"xmldecode\",\n        \"xmlencode\",\n        \"xmltext\",\n        \"xmlunicode\"\n    ],\n    typesint: [\n        \"integer\",\n        \"unsigned\"\n    ].join(\"|\"),\n    typesnum: [\n        \"data\",\n        \"qstring\",\n        \"string\",\n        \"unicode\",\n        \"utf8\",\n        \"varstring\",\n        \"varunicode\"\n    ],\n    typesone: [\n        \"ascii\",\n        \"big_endian\",\n        \"boolean\",\n        \"data\",\n        \"decimal\",\n        \"ebcdic\",\n        \"grouped\",\n        \"integer\",\n        \"linkcounted\",\n        \"pattern\",\n        \"qstring\",\n        \"real\",\n        \"record\",\n        \"rule\",\n        \"set of\",\n        \"streamed\",\n        \"string\",\n        \"token\",\n        \"udecimal\",\n        \"unicode\",\n        \"unsigned\",\n        \"utf8\",\n        \"varstring\",\n        \"varunicode\"\n    ].join(\"|\"),\n    operators: [\n        \"+\",\n        \"-\",\n        \"/\",\n        \":=\",\n        \"<\",\n        \"<>\",\n        \"=\",\n        \">\",\n        \"\\\\\",\n        \"and\",\n        \"in\",\n        \"not\",\n        \"or\"\n    ],\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // escape sequences\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [\n                /@typesint[4|8]/,\n                \"type\"\n            ],\n            [\n                /#(@pounds)/,\n                \"type\"\n            ],\n            [\n                /@typesone/,\n                \"type\"\n            ],\n            [\n                /[a-zA-Z_$][\\w-$]*/,\n                {\n                    cases: {\n                        \"@functions\": \"keyword.function\",\n                        \"@keywords\": \"keyword\",\n                        \"@operators\": \"operator\"\n                    }\n                }\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /[<>](?!@symbols)/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"delimiter\",\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?/,\n                \"number.float\"\n            ],\n            [\n                /0[xX][0-9a-fA-F_]+/,\n                \"number.hex\"\n            ],\n            [\n                /0[bB][01]+/,\n                \"number.hex\"\n            ],\n            // binary: use same theme style as hex\n            [\n                /[0-9_]+/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            // strings\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            [\n                /\"/,\n                \"string\",\n                \"@string\"\n            ],\n            // characters\n            [\n                /'[^\\\\']'/,\n                \"string\"\n            ],\n            [\n                /(')(@escapes)(')/,\n                [\n                    \"string\",\n                    \"string.escape\",\n                    \"string\"\n                ]\n            ],\n            [\n                /'/,\n                \"string.invalid\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\v\\f\\r\\n]+/,\n                \"\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ],\n        comment: [\n            [\n                /[^\\/*]+/,\n                \"comment\"\n            ],\n            [\n                /\\*\\//,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[\\/*]/,\n                \"comment\"\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\']+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /'/,\n                \"string\",\n                \"@pop\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=ecl.552bd1a4.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/ecl/ecl.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" },\n    { open: '\"', close: '\"' }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".ecl\",\n  ignoreCase: true,\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  pounds: [\n    \"append\",\n    \"break\",\n    \"declare\",\n    \"demangle\",\n    \"end\",\n    \"for\",\n    \"getdatatype\",\n    \"if\",\n    \"inmodule\",\n    \"loop\",\n    \"mangle\",\n    \"onwarning\",\n    \"option\",\n    \"set\",\n    \"stored\",\n    \"uniquename\"\n  ].join(\"|\"),\n  keywords: [\n    \"__compressed__\",\n    \"after\",\n    \"all\",\n    \"and\",\n    \"any\",\n    \"as\",\n    \"atmost\",\n    \"before\",\n    \"beginc\",\n    \"best\",\n    \"between\",\n    \"case\",\n    \"cluster\",\n    \"compressed\",\n    \"compression\",\n    \"const\",\n    \"counter\",\n    \"csv\",\n    \"default\",\n    \"descend\",\n    \"embed\",\n    \"encoding\",\n    \"encrypt\",\n    \"end\",\n    \"endc\",\n    \"endembed\",\n    \"endmacro\",\n    \"enum\",\n    \"escape\",\n    \"except\",\n    \"exclusive\",\n    \"expire\",\n    \"export\",\n    \"extend\",\n    \"fail\",\n    \"few\",\n    \"fileposition\",\n    \"first\",\n    \"flat\",\n    \"forward\",\n    \"from\",\n    \"full\",\n    \"function\",\n    \"functionmacro\",\n    \"group\",\n    \"grouped\",\n    \"heading\",\n    \"hole\",\n    \"ifblock\",\n    \"import\",\n    \"in\",\n    \"inner\",\n    \"interface\",\n    \"internal\",\n    \"joined\",\n    \"keep\",\n    \"keyed\",\n    \"last\",\n    \"left\",\n    \"limit\",\n    \"linkcounted\",\n    \"literal\",\n    \"little_endian\",\n    \"load\",\n    \"local\",\n    \"locale\",\n    \"lookup\",\n    \"lzw\",\n    \"macro\",\n    \"many\",\n    \"maxcount\",\n    \"maxlength\",\n    \"min skew\",\n    \"module\",\n    \"mofn\",\n    \"multiple\",\n    \"named\",\n    \"namespace\",\n    \"nocase\",\n    \"noroot\",\n    \"noscan\",\n    \"nosort\",\n    \"not\",\n    \"noxpath\",\n    \"of\",\n    \"onfail\",\n    \"only\",\n    \"opt\",\n    \"or\",\n    \"outer\",\n    \"overwrite\",\n    \"packed\",\n    \"partition\",\n    \"penalty\",\n    \"physicallength\",\n    \"pipe\",\n    \"prefetch\",\n    \"quote\",\n    \"record\",\n    \"repeat\",\n    \"retry\",\n    \"return\",\n    \"right\",\n    \"right1\",\n    \"right2\",\n    \"rows\",\n    \"rowset\",\n    \"scan\",\n    \"scope\",\n    \"self\",\n    \"separator\",\n    \"service\",\n    \"shared\",\n    \"skew\",\n    \"skip\",\n    \"smart\",\n    \"soapaction\",\n    \"sql\",\n    \"stable\",\n    \"store\",\n    \"terminator\",\n    \"thor\",\n    \"threshold\",\n    \"timelimit\",\n    \"timeout\",\n    \"token\",\n    \"transform\",\n    \"trim\",\n    \"type\",\n    \"unicodeorder\",\n    \"unordered\",\n    \"unsorted\",\n    \"unstable\",\n    \"update\",\n    \"use\",\n    \"validate\",\n    \"virtual\",\n    \"whole\",\n    \"width\",\n    \"wild\",\n    \"within\",\n    \"wnotrim\",\n    \"xml\",\n    \"xpath\"\n  ],\n  functions: [\n    \"abs\",\n    \"acos\",\n    \"aggregate\",\n    \"allnodes\",\n    \"apply\",\n    \"ascii\",\n    \"asin\",\n    \"assert\",\n    \"asstring\",\n    \"atan\",\n    \"atan2\",\n    \"ave\",\n    \"build\",\n    \"buildindex\",\n    \"case\",\n    \"catch\",\n    \"choose\",\n    \"choosen\",\n    \"choosesets\",\n    \"clustersize\",\n    \"combine\",\n    \"correlation\",\n    \"cos\",\n    \"cosh\",\n    \"count\",\n    \"covariance\",\n    \"cron\",\n    \"dataset\",\n    \"dedup\",\n    \"define\",\n    \"denormalize\",\n    \"dictionary\",\n    \"distribute\",\n    \"distributed\",\n    \"distribution\",\n    \"ebcdic\",\n    \"enth\",\n    \"error\",\n    \"evaluate\",\n    \"event\",\n    \"eventextra\",\n    \"eventname\",\n    \"exists\",\n    \"exp\",\n    \"fail\",\n    \"failcode\",\n    \"failmessage\",\n    \"fetch\",\n    \"fromunicode\",\n    \"fromxml\",\n    \"getenv\",\n    \"getisvalid\",\n    \"global\",\n    \"graph\",\n    \"group\",\n    \"hash\",\n    \"hash32\",\n    \"hash64\",\n    \"hashcrc\",\n    \"hashmd5\",\n    \"having\",\n    \"httpcall\",\n    \"httpheader\",\n    \"if\",\n    \"iff\",\n    \"index\",\n    \"intformat\",\n    \"isvalid\",\n    \"iterate\",\n    \"join\",\n    \"keydiff\",\n    \"keypatch\",\n    \"keyunicode\",\n    \"length\",\n    \"library\",\n    \"limit\",\n    \"ln\",\n    \"loadxml\",\n    \"local\",\n    \"log\",\n    \"loop\",\n    \"map\",\n    \"matched\",\n    \"matchlength\",\n    \"matchposition\",\n    \"matchtext\",\n    \"matchunicode\",\n    \"max\",\n    \"merge\",\n    \"mergejoin\",\n    \"min\",\n    \"nofold\",\n    \"nolocal\",\n    \"nonempty\",\n    \"normalize\",\n    \"nothor\",\n    \"notify\",\n    \"output\",\n    \"parallel\",\n    \"parse\",\n    \"pipe\",\n    \"power\",\n    \"preload\",\n    \"process\",\n    \"project\",\n    \"pull\",\n    \"random\",\n    \"range\",\n    \"rank\",\n    \"ranked\",\n    \"realformat\",\n    \"recordof\",\n    \"regexfind\",\n    \"regexreplace\",\n    \"regroup\",\n    \"rejected\",\n    \"rollup\",\n    \"round\",\n    \"roundup\",\n    \"row\",\n    \"rowdiff\",\n    \"sample\",\n    \"sequential\",\n    \"set\",\n    \"sin\",\n    \"sinh\",\n    \"sizeof\",\n    \"soapcall\",\n    \"sort\",\n    \"sorted\",\n    \"sqrt\",\n    \"stepped\",\n    \"stored\",\n    \"sum\",\n    \"table\",\n    \"tan\",\n    \"tanh\",\n    \"thisnode\",\n    \"topn\",\n    \"tounicode\",\n    \"toxml\",\n    \"transfer\",\n    \"transform\",\n    \"trim\",\n    \"truncate\",\n    \"typeof\",\n    \"ungroup\",\n    \"unicodeorder\",\n    \"variance\",\n    \"wait\",\n    \"which\",\n    \"workunit\",\n    \"xmldecode\",\n    \"xmlencode\",\n    \"xmltext\",\n    \"xmlunicode\"\n  ],\n  typesint: [\"integer\", \"unsigned\"].join(\"|\"),\n  typesnum: [\"data\", \"qstring\", \"string\", \"unicode\", \"utf8\", \"varstring\", \"varunicode\"],\n  typesone: [\n    \"ascii\",\n    \"big_endian\",\n    \"boolean\",\n    \"data\",\n    \"decimal\",\n    \"ebcdic\",\n    \"grouped\",\n    \"integer\",\n    \"linkcounted\",\n    \"pattern\",\n    \"qstring\",\n    \"real\",\n    \"record\",\n    \"rule\",\n    \"set of\",\n    \"streamed\",\n    \"string\",\n    \"token\",\n    \"udecimal\",\n    \"unicode\",\n    \"unsigned\",\n    \"utf8\",\n    \"varstring\",\n    \"varunicode\"\n  ].join(\"|\"),\n  operators: [\"+\", \"-\", \"/\", \":=\", \"<\", \"<>\", \"=\", \">\", \"\\\\\", \"and\", \"in\", \"not\", \"or\"],\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // escape sequences\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      [/@typesint[4|8]/, \"type\"],\n      [/#(@pounds)/, \"type\"],\n      [/@typesone/, \"type\"],\n      [\n        /[a-zA-Z_$][\\w-$]*/,\n        {\n          cases: {\n            \"@functions\": \"keyword.function\",\n            \"@keywords\": \"keyword\",\n            \"@operators\": \"operator\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F_]+/, \"number.hex\"],\n      [/0[bB][01]+/, \"number.hex\"],\n      // binary: use same theme style as hex\n      [/[0-9_]+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      [/\"/, \"string\", \"@string\"],\n      // characters\n      [/'[^\\\\']'/, \"string\"],\n      [/(')(@escapes)(')/, [\"string\", \"string.escape\", \"string\"]],\n      [/'/, \"string.invalid\"]\n    ],\n    whitespace: [\n      [/[ \\t\\v\\f\\r\\n]+/, \"\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, \"string\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$aad5d69a1fad540f$export$c83be1687c028fc9","$aad5d69a1fad540f$export$789c912f57fe164c","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","defaultToken","tokenPostfix","ignoreCase","token","pounds","keywords","functions","typesint","typesnum","typesone","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","string"],"version":3,"file":"ecl.552bd1a4.js.map"}