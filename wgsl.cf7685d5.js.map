{"mappings":"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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/wgsl/wgsl.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ay7Gz\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $7ae30a8f2d324fa3$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $7ae30a8f2d324fa3$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/wgsl/wgsl.ts\nvar $7ae30a8f2d324fa3$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        }\n    ]\n};\nfunction $7ae30a8f2d324fa3$var$qw(str) {\n    let result = [];\n    const words = str.split(/\\t+|\\r+|\\n+| +/);\n    for(let i = 0; i < words.length; ++i)if (words[i].length > 0) result.push(words[i]);\n    return result;\n}\nvar $7ae30a8f2d324fa3$var$atoms = $7ae30a8f2d324fa3$var$qw(\"true false\");\nvar $7ae30a8f2d324fa3$var$keywords = $7ae30a8f2d324fa3$var$qw(`\n\t\t\t  alias\n\t\t\t  break\n\t\t\t  case\n\t\t\t  const\n\t\t\t  const_assert\n\t\t\t  continue\n\t\t\t  continuing\n\t\t\t  default\n\t\t\t  diagnostic\n\t\t\t  discard\n\t\t\t  else\n\t\t\t  enable\n\t\t\t  fn\n\t\t\t  for\n\t\t\t  if\n\t\t\t  let\n\t\t\t  loop\n\t\t\t  override\n\t\t\t  requires\n\t\t\t  return\n\t\t\t  struct\n\t\t\t  switch\n\t\t\t  var\n\t\t\t  while\n\t\t\t  `);\nvar $7ae30a8f2d324fa3$var$reserved = $7ae30a8f2d324fa3$var$qw(`\n\t\t\t  NULL\n\t\t\t  Self\n\t\t\t  abstract\n\t\t\t  active\n\t\t\t  alignas\n\t\t\t  alignof\n\t\t\t  as\n\t\t\t  asm\n\t\t\t  asm_fragment\n\t\t\t  async\n\t\t\t  attribute\n\t\t\t  auto\n\t\t\t  await\n\t\t\t  become\n\t\t\t  binding_array\n\t\t\t  cast\n\t\t\t  catch\n\t\t\t  class\n\t\t\t  co_await\n\t\t\t  co_return\n\t\t\t  co_yield\n\t\t\t  coherent\n\t\t\t  column_major\n\t\t\t  common\n\t\t\t  compile\n\t\t\t  compile_fragment\n\t\t\t  concept\n\t\t\t  const_cast\n\t\t\t  consteval\n\t\t\t  constexpr\n\t\t\t  constinit\n\t\t\t  crate\n\t\t\t  debugger\n\t\t\t  decltype\n\t\t\t  delete\n\t\t\t  demote\n\t\t\t  demote_to_helper\n\t\t\t  do\n\t\t\t  dynamic_cast\n\t\t\t  enum\n\t\t\t  explicit\n\t\t\t  export\n\t\t\t  extends\n\t\t\t  extern\n\t\t\t  external\n\t\t\t  fallthrough\n\t\t\t  filter\n\t\t\t  final\n\t\t\t  finally\n\t\t\t  friend\n\t\t\t  from\n\t\t\t  fxgroup\n\t\t\t  get\n\t\t\t  goto\n\t\t\t  groupshared\n\t\t\t  highp\n\t\t\t  impl\n\t\t\t  implements\n\t\t\t  import\n\t\t\t  inline\n\t\t\t  instanceof\n\t\t\t  interface\n\t\t\t  layout\n\t\t\t  lowp\n\t\t\t  macro\n\t\t\t  macro_rules\n\t\t\t  match\n\t\t\t  mediump\n\t\t\t  meta\n\t\t\t  mod\n\t\t\t  module\n\t\t\t  move\n\t\t\t  mut\n\t\t\t  mutable\n\t\t\t  namespace\n\t\t\t  new\n\t\t\t  nil\n\t\t\t  noexcept\n\t\t\t  noinline\n\t\t\t  nointerpolation\n\t\t\t  noperspective\n\t\t\t  null\n\t\t\t  nullptr\n\t\t\t  of\n\t\t\t  operator\n\t\t\t  package\n\t\t\t  packoffset\n\t\t\t  partition\n\t\t\t  pass\n\t\t\t  patch\n\t\t\t  pixelfragment\n\t\t\t  precise\n\t\t\t  precision\n\t\t\t  premerge\n\t\t\t  priv\n\t\t\t  protected\n\t\t\t  pub\n\t\t\t  public\n\t\t\t  readonly\n\t\t\t  ref\n\t\t\t  regardless\n\t\t\t  register\n\t\t\t  reinterpret_cast\n\t\t\t  require\n\t\t\t  resource\n\t\t\t  restrict\n\t\t\t  self\n\t\t\t  set\n\t\t\t  shared\n\t\t\t  sizeof\n\t\t\t  smooth\n\t\t\t  snorm\n\t\t\t  static\n\t\t\t  static_assert\n\t\t\t  static_cast\n\t\t\t  std\n\t\t\t  subroutine\n\t\t\t  super\n\t\t\t  target\n\t\t\t  template\n\t\t\t  this\n\t\t\t  thread_local\n\t\t\t  throw\n\t\t\t  trait\n\t\t\t  try\n\t\t\t  type\n\t\t\t  typedef\n\t\t\t  typeid\n\t\t\t  typename\n\t\t\t  typeof\n\t\t\t  union\n\t\t\t  unless\n\t\t\t  unorm\n\t\t\t  unsafe\n\t\t\t  unsized\n\t\t\t  use\n\t\t\t  using\n\t\t\t  varying\n\t\t\t  virtual\n\t\t\t  volatile\n\t\t\t  wgsl\n\t\t\t  where\n\t\t\t  with\n\t\t\t  writeonly\n\t\t\t  yield\n\t\t\t  `);\nvar $7ae30a8f2d324fa3$var$predeclared_enums = $7ae30a8f2d324fa3$var$qw(`\n\t\tread write read_write\n\t\tfunction private workgroup uniform storage\n\t\tperspective linear flat\n\t\tcenter centroid sample\n\t\tvertex_index instance_index position front_facing frag_depth\n\t\t\tlocal_invocation_id local_invocation_index\n\t\t\tglobal_invocation_id workgroup_id num_workgroups\n\t\t\tsample_index sample_mask\n\t\trgba8unorm\n\t\trgba8snorm\n\t\trgba8uint\n\t\trgba8sint\n\t\trgba16uint\n\t\trgba16sint\n\t\trgba16float\n\t\tr32uint\n\t\tr32sint\n\t\tr32float\n\t\trg32uint\n\t\trg32sint\n\t\trg32float\n\t\trgba32uint\n\t\trgba32sint\n\t\trgba32float\n\t\tbgra8unorm\n`);\nvar $7ae30a8f2d324fa3$var$predeclared_types = $7ae30a8f2d324fa3$var$qw(`\n\t\tbool\n\t\tf16\n\t\tf32\n\t\ti32\n\t\tsampler sampler_comparison\n\t\ttexture_depth_2d\n\t\ttexture_depth_2d_array\n\t\ttexture_depth_cube\n\t\ttexture_depth_cube_array\n\t\ttexture_depth_multisampled_2d\n\t\ttexture_external\n\t\ttexture_external\n\t\tu32\n\t\t`);\nvar $7ae30a8f2d324fa3$var$predeclared_type_generators = $7ae30a8f2d324fa3$var$qw(`\n\t\tarray\n\t\tatomic\n\t\tmat2x2\n\t\tmat2x3\n\t\tmat2x4\n\t\tmat3x2\n\t\tmat3x3\n\t\tmat3x4\n\t\tmat4x2\n\t\tmat4x3\n\t\tmat4x4\n\t\tptr\n\t\ttexture_1d\n\t\ttexture_2d\n\t\ttexture_2d_array\n\t\ttexture_3d\n\t\ttexture_cube\n\t\ttexture_cube_array\n\t\ttexture_multisampled_2d\n\t\ttexture_storage_1d\n\t\ttexture_storage_2d\n\t\ttexture_storage_2d_array\n\t\ttexture_storage_3d\n\t\tvec2\n\t\tvec3\n\t\tvec4\n\t\t`);\nvar $7ae30a8f2d324fa3$var$predeclared_type_aliases = $7ae30a8f2d324fa3$var$qw(`\n\t\tvec2i vec3i vec4i\n\t\tvec2u vec3u vec4u\n\t\tvec2f vec3f vec4f\n\t\tvec2h vec3h vec4h\n\t\tmat2x2f mat2x3f mat2x4f\n\t\tmat3x2f mat3x3f mat3x4f\n\t\tmat4x2f mat4x3f mat4x4f\n\t\tmat2x2h mat2x3h mat2x4h\n\t\tmat3x2h mat3x3h mat3x4h\n\t\tmat4x2h mat4x3h mat4x4h\n\t\t`);\nvar $7ae30a8f2d324fa3$var$predeclared_intrinsics = $7ae30a8f2d324fa3$var$qw(`\n  bitcast all any select arrayLength abs acos acosh asin asinh atan atanh atan2\n  ceil clamp cos cosh countLeadingZeros countOneBits countTrailingZeros cross\n  degrees determinant distance dot exp exp2 extractBits faceForward firstLeadingBit\n  firstTrailingBit floor fma fract frexp inverseBits inverseSqrt ldexp length\n  log log2 max min mix modf normalize pow quantizeToF16 radians reflect refract\n  reverseBits round saturate sign sin sinh smoothstep sqrt step tan tanh transpose\n  trunc dpdx dpdxCoarse dpdxFine dpdy dpdyCoarse dpdyFine fwidth fwidthCoarse fwidthFine\n  textureDimensions textureGather textureGatherCompare textureLoad textureNumLayers\n  textureNumLevels textureNumSamples textureSample textureSampleBias textureSampleCompare\n  textureSampleCompareLevel textureSampleGrad textureSampleLevel textureSampleBaseClampToEdge\n  textureStore atomicLoad atomicStore atomicAdd atomicSub atomicMax atomicMin\n  atomicAnd atomicOr atomicXor atomicExchange atomicCompareExchangeWeak pack4x8snorm\n  pack4x8unorm pack2x16snorm pack2x16unorm pack2x16float unpack4x8snorm unpack4x8unorm\n  unpack2x16snorm unpack2x16unorm unpack2x16float storageBarrier workgroupBarrier\n  workgroupUniformLoad\n`);\nvar $7ae30a8f2d324fa3$var$operators = $7ae30a8f2d324fa3$var$qw(`\n\t\t\t\t\t &\n\t\t\t\t\t &&\n\t\t\t\t\t ->\n\t\t\t\t\t /\n\t\t\t\t\t =\n\t\t\t\t\t ==\n\t\t\t\t\t !=\n\t\t\t\t\t >\n\t\t\t\t\t >=\n\t\t\t\t\t <\n\t\t\t\t\t <=\n\t\t\t\t\t %\n\t\t\t\t\t -\n\t\t\t\t\t --\n\t\t\t\t\t +\n\t\t\t\t\t ++\n\t\t\t\t\t |\n\t\t\t\t\t ||\n\t\t\t\t\t *\n\t\t\t\t\t <<\n\t\t\t\t\t >>\n\t\t\t\t\t +=\n\t\t\t\t\t -=\n\t\t\t\t\t *=\n\t\t\t\t\t /=\n\t\t\t\t\t %=\n\t\t\t\t\t &=\n\t\t\t\t\t |=\n\t\t\t\t\t ^=\n\t\t\t\t\t >>=\n\t\t\t\t\t <<=\n\t\t\t\t\t `);\nvar $7ae30a8f2d324fa3$var$directive_re = /enable|requires|diagnostic/;\nvar $7ae30a8f2d324fa3$var$ident_re = /[_\\p{XID_Start}]\\p{XID_Continue}*/u;\nvar $7ae30a8f2d324fa3$var$predefined_token = \"variable.predefined\";\nvar $7ae30a8f2d324fa3$export$789c912f57fe164c = {\n    tokenPostfix: \".wgsl\",\n    defaultToken: \"invalid\",\n    unicode: true,\n    atoms: $7ae30a8f2d324fa3$var$atoms,\n    keywords: $7ae30a8f2d324fa3$var$keywords,\n    reserved: $7ae30a8f2d324fa3$var$reserved,\n    predeclared_enums: $7ae30a8f2d324fa3$var$predeclared_enums,\n    predeclared_types: $7ae30a8f2d324fa3$var$predeclared_types,\n    predeclared_type_generators: $7ae30a8f2d324fa3$var$predeclared_type_generators,\n    predeclared_type_aliases: $7ae30a8f2d324fa3$var$predeclared_type_aliases,\n    predeclared_intrinsics: $7ae30a8f2d324fa3$var$predeclared_intrinsics,\n    operators: $7ae30a8f2d324fa3$var$operators,\n    symbols: /[!%&*+\\-\\.\\/:;<=>^|_~,]+/,\n    tokenizer: {\n        root: [\n            [\n                $7ae30a8f2d324fa3$var$directive_re,\n                \"keyword\",\n                \"@directive\"\n            ],\n            [\n                // Identifier-like things, but also include '_'\n                $7ae30a8f2d324fa3$var$ident_re,\n                {\n                    cases: {\n                        \"@atoms\": $7ae30a8f2d324fa3$var$predefined_token,\n                        \"@keywords\": \"keyword\",\n                        \"@reserved\": \"invalid\",\n                        \"@predeclared_enums\": $7ae30a8f2d324fa3$var$predefined_token,\n                        \"@predeclared_types\": $7ae30a8f2d324fa3$var$predefined_token,\n                        \"@predeclared_type_generators\": $7ae30a8f2d324fa3$var$predefined_token,\n                        \"@predeclared_type_aliases\": $7ae30a8f2d324fa3$var$predefined_token,\n                        \"@predeclared_intrinsics\": $7ae30a8f2d324fa3$var$predefined_token,\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            {\n                include: \"@commentOrSpace\"\n            },\n            {\n                include: \"@numbers\"\n            },\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                \"@\",\n                \"annotation\",\n                \"@attribute\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"operator\",\n                        \"@default\": \"delimiter\"\n                    }\n                }\n            ],\n            [\n                /./,\n                \"invalid\"\n            ]\n        ],\n        commentOrSpace: [\n            [\n                /\\s+/,\n                \"white\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@blockComment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ],\n        blockComment: [\n            // Soak up uninteresting text: anything except * or /\n            [\n                /[^\\/*]+/,\n                \"comment\"\n            ],\n            // Recognize the start of a nested block comment.\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@push\"\n            ],\n            // Recognize the end of a nested block comment.\n            [\n                /\\*\\//,\n                \"comment\",\n                \"@pop\"\n            ],\n            // Recognize insignificant * and /\n            [\n                /[\\/*]/,\n                \"comment\"\n            ]\n        ],\n        attribute: [\n            // For things like '@fragment' both '@' and 'fragment'\n            // are marked as annotations.  This should work even if\n            // there are spaces or comments between the two tokens.\n            {\n                include: \"@commentOrSpace\"\n            },\n            [\n                /\\w+/,\n                \"annotation\",\n                \"@pop\"\n            ]\n        ],\n        directive: [\n            // For things like 'enable f16;', 'enable' maps to 'meta'\n            // and 'f16' maps to 'meta.tag'.\n            {\n                include: \"@commentOrSpace\"\n            },\n            [\n                /[()]/,\n                \"@brackets\"\n            ],\n            [\n                /,/,\n                \"delimiter\"\n            ],\n            [\n                $7ae30a8f2d324fa3$var$ident_re,\n                \"meta.content\"\n            ],\n            [\n                /;/,\n                \"delimiter\",\n                \"@pop\"\n            ]\n        ],\n        numbers: [\n            // Decimal float literals\n            // https://www.w3.org/TR/WGSL/#syntax-decimal_float_literal\n            // 0, with type-specifying suffix.\n            [\n                /0[fh]/,\n                \"number.float\"\n            ],\n            // Other decimal integer, with type-specifying suffix.\n            [\n                /[1-9][0-9]*[fh]/,\n                \"number.float\"\n            ],\n            // Has decimal point, at least one digit after decimal.\n            [\n                /[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/,\n                \"number.float\"\n            ],\n            // Has decimal point, at least one digit before decimal.\n            [\n                /[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/,\n                \"number.float\"\n            ],\n            // Has at least one digit, and has an exponent.\n            [\n                /[0-9]+[eE][+-]?[0-9]+[fh]?/,\n                \"number.float\"\n            ],\n            // Hex float literals\n            // https://www.w3.org/TR/WGSL/#syntax-hex_float_literal\n            [\n                /0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+(?:[pP][+-]?[0-9]+[fh]?)?/,\n                \"number.hex\"\n            ],\n            [\n                /0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*(?:[pP][+-]?[0-9]+[fh]?)?/,\n                \"number.hex\"\n            ],\n            [\n                /0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/,\n                \"number.hex\"\n            ],\n            // Hexadecimal integer literals\n            // https://www.w3.org/TR/WGSL/#syntax-hex_int_literal\n            [\n                /0[xX][0-9a-fA-F]+[iu]?/,\n                \"number.hex\"\n            ],\n            // Decimal integer literals\n            // https://www.w3.org/TR/WGSL/#syntax-decimal_int_literal\n            // We need two rules here because 01 is not valid.\n            [\n                /[1-9][0-9]*[iu]?/,\n                \"number\"\n            ],\n            [\n                /0[iu]?/,\n                \"number\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=wgsl.cf7685d5.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/wgsl/wgsl.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"[\", close: \"]\" },\n    { open: \"{\", close: \"}\" },\n    { open: \"(\", close: \")\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" }\n  ]\n};\nfunction qw(str) {\n  let result = [];\n  const words = str.split(/\\t+|\\r+|\\n+| +/);\n  for (let i = 0; i < words.length; ++i) {\n    if (words[i].length > 0) {\n      result.push(words[i]);\n    }\n  }\n  return result;\n}\nvar atoms = qw(\"true false\");\nvar keywords = qw(`\n\t\t\t  alias\n\t\t\t  break\n\t\t\t  case\n\t\t\t  const\n\t\t\t  const_assert\n\t\t\t  continue\n\t\t\t  continuing\n\t\t\t  default\n\t\t\t  diagnostic\n\t\t\t  discard\n\t\t\t  else\n\t\t\t  enable\n\t\t\t  fn\n\t\t\t  for\n\t\t\t  if\n\t\t\t  let\n\t\t\t  loop\n\t\t\t  override\n\t\t\t  requires\n\t\t\t  return\n\t\t\t  struct\n\t\t\t  switch\n\t\t\t  var\n\t\t\t  while\n\t\t\t  `);\nvar reserved = qw(`\n\t\t\t  NULL\n\t\t\t  Self\n\t\t\t  abstract\n\t\t\t  active\n\t\t\t  alignas\n\t\t\t  alignof\n\t\t\t  as\n\t\t\t  asm\n\t\t\t  asm_fragment\n\t\t\t  async\n\t\t\t  attribute\n\t\t\t  auto\n\t\t\t  await\n\t\t\t  become\n\t\t\t  binding_array\n\t\t\t  cast\n\t\t\t  catch\n\t\t\t  class\n\t\t\t  co_await\n\t\t\t  co_return\n\t\t\t  co_yield\n\t\t\t  coherent\n\t\t\t  column_major\n\t\t\t  common\n\t\t\t  compile\n\t\t\t  compile_fragment\n\t\t\t  concept\n\t\t\t  const_cast\n\t\t\t  consteval\n\t\t\t  constexpr\n\t\t\t  constinit\n\t\t\t  crate\n\t\t\t  debugger\n\t\t\t  decltype\n\t\t\t  delete\n\t\t\t  demote\n\t\t\t  demote_to_helper\n\t\t\t  do\n\t\t\t  dynamic_cast\n\t\t\t  enum\n\t\t\t  explicit\n\t\t\t  export\n\t\t\t  extends\n\t\t\t  extern\n\t\t\t  external\n\t\t\t  fallthrough\n\t\t\t  filter\n\t\t\t  final\n\t\t\t  finally\n\t\t\t  friend\n\t\t\t  from\n\t\t\t  fxgroup\n\t\t\t  get\n\t\t\t  goto\n\t\t\t  groupshared\n\t\t\t  highp\n\t\t\t  impl\n\t\t\t  implements\n\t\t\t  import\n\t\t\t  inline\n\t\t\t  instanceof\n\t\t\t  interface\n\t\t\t  layout\n\t\t\t  lowp\n\t\t\t  macro\n\t\t\t  macro_rules\n\t\t\t  match\n\t\t\t  mediump\n\t\t\t  meta\n\t\t\t  mod\n\t\t\t  module\n\t\t\t  move\n\t\t\t  mut\n\t\t\t  mutable\n\t\t\t  namespace\n\t\t\t  new\n\t\t\t  nil\n\t\t\t  noexcept\n\t\t\t  noinline\n\t\t\t  nointerpolation\n\t\t\t  noperspective\n\t\t\t  null\n\t\t\t  nullptr\n\t\t\t  of\n\t\t\t  operator\n\t\t\t  package\n\t\t\t  packoffset\n\t\t\t  partition\n\t\t\t  pass\n\t\t\t  patch\n\t\t\t  pixelfragment\n\t\t\t  precise\n\t\t\t  precision\n\t\t\t  premerge\n\t\t\t  priv\n\t\t\t  protected\n\t\t\t  pub\n\t\t\t  public\n\t\t\t  readonly\n\t\t\t  ref\n\t\t\t  regardless\n\t\t\t  register\n\t\t\t  reinterpret_cast\n\t\t\t  require\n\t\t\t  resource\n\t\t\t  restrict\n\t\t\t  self\n\t\t\t  set\n\t\t\t  shared\n\t\t\t  sizeof\n\t\t\t  smooth\n\t\t\t  snorm\n\t\t\t  static\n\t\t\t  static_assert\n\t\t\t  static_cast\n\t\t\t  std\n\t\t\t  subroutine\n\t\t\t  super\n\t\t\t  target\n\t\t\t  template\n\t\t\t  this\n\t\t\t  thread_local\n\t\t\t  throw\n\t\t\t  trait\n\t\t\t  try\n\t\t\t  type\n\t\t\t  typedef\n\t\t\t  typeid\n\t\t\t  typename\n\t\t\t  typeof\n\t\t\t  union\n\t\t\t  unless\n\t\t\t  unorm\n\t\t\t  unsafe\n\t\t\t  unsized\n\t\t\t  use\n\t\t\t  using\n\t\t\t  varying\n\t\t\t  virtual\n\t\t\t  volatile\n\t\t\t  wgsl\n\t\t\t  where\n\t\t\t  with\n\t\t\t  writeonly\n\t\t\t  yield\n\t\t\t  `);\nvar predeclared_enums = qw(`\n\t\tread write read_write\n\t\tfunction private workgroup uniform storage\n\t\tperspective linear flat\n\t\tcenter centroid sample\n\t\tvertex_index instance_index position front_facing frag_depth\n\t\t\tlocal_invocation_id local_invocation_index\n\t\t\tglobal_invocation_id workgroup_id num_workgroups\n\t\t\tsample_index sample_mask\n\t\trgba8unorm\n\t\trgba8snorm\n\t\trgba8uint\n\t\trgba8sint\n\t\trgba16uint\n\t\trgba16sint\n\t\trgba16float\n\t\tr32uint\n\t\tr32sint\n\t\tr32float\n\t\trg32uint\n\t\trg32sint\n\t\trg32float\n\t\trgba32uint\n\t\trgba32sint\n\t\trgba32float\n\t\tbgra8unorm\n`);\nvar predeclared_types = qw(`\n\t\tbool\n\t\tf16\n\t\tf32\n\t\ti32\n\t\tsampler sampler_comparison\n\t\ttexture_depth_2d\n\t\ttexture_depth_2d_array\n\t\ttexture_depth_cube\n\t\ttexture_depth_cube_array\n\t\ttexture_depth_multisampled_2d\n\t\ttexture_external\n\t\ttexture_external\n\t\tu32\n\t\t`);\nvar predeclared_type_generators = qw(`\n\t\tarray\n\t\tatomic\n\t\tmat2x2\n\t\tmat2x3\n\t\tmat2x4\n\t\tmat3x2\n\t\tmat3x3\n\t\tmat3x4\n\t\tmat4x2\n\t\tmat4x3\n\t\tmat4x4\n\t\tptr\n\t\ttexture_1d\n\t\ttexture_2d\n\t\ttexture_2d_array\n\t\ttexture_3d\n\t\ttexture_cube\n\t\ttexture_cube_array\n\t\ttexture_multisampled_2d\n\t\ttexture_storage_1d\n\t\ttexture_storage_2d\n\t\ttexture_storage_2d_array\n\t\ttexture_storage_3d\n\t\tvec2\n\t\tvec3\n\t\tvec4\n\t\t`);\nvar predeclared_type_aliases = qw(`\n\t\tvec2i vec3i vec4i\n\t\tvec2u vec3u vec4u\n\t\tvec2f vec3f vec4f\n\t\tvec2h vec3h vec4h\n\t\tmat2x2f mat2x3f mat2x4f\n\t\tmat3x2f mat3x3f mat3x4f\n\t\tmat4x2f mat4x3f mat4x4f\n\t\tmat2x2h mat2x3h mat2x4h\n\t\tmat3x2h mat3x3h mat3x4h\n\t\tmat4x2h mat4x3h mat4x4h\n\t\t`);\nvar predeclared_intrinsics = qw(`\n  bitcast all any select arrayLength abs acos acosh asin asinh atan atanh atan2\n  ceil clamp cos cosh countLeadingZeros countOneBits countTrailingZeros cross\n  degrees determinant distance dot exp exp2 extractBits faceForward firstLeadingBit\n  firstTrailingBit floor fma fract frexp inverseBits inverseSqrt ldexp length\n  log log2 max min mix modf normalize pow quantizeToF16 radians reflect refract\n  reverseBits round saturate sign sin sinh smoothstep sqrt step tan tanh transpose\n  trunc dpdx dpdxCoarse dpdxFine dpdy dpdyCoarse dpdyFine fwidth fwidthCoarse fwidthFine\n  textureDimensions textureGather textureGatherCompare textureLoad textureNumLayers\n  textureNumLevels textureNumSamples textureSample textureSampleBias textureSampleCompare\n  textureSampleCompareLevel textureSampleGrad textureSampleLevel textureSampleBaseClampToEdge\n  textureStore atomicLoad atomicStore atomicAdd atomicSub atomicMax atomicMin\n  atomicAnd atomicOr atomicXor atomicExchange atomicCompareExchangeWeak pack4x8snorm\n  pack4x8unorm pack2x16snorm pack2x16unorm pack2x16float unpack4x8snorm unpack4x8unorm\n  unpack2x16snorm unpack2x16unorm unpack2x16float storageBarrier workgroupBarrier\n  workgroupUniformLoad\n`);\nvar operators = qw(`\n\t\t\t\t\t &\n\t\t\t\t\t &&\n\t\t\t\t\t ->\n\t\t\t\t\t /\n\t\t\t\t\t =\n\t\t\t\t\t ==\n\t\t\t\t\t !=\n\t\t\t\t\t >\n\t\t\t\t\t >=\n\t\t\t\t\t <\n\t\t\t\t\t <=\n\t\t\t\t\t %\n\t\t\t\t\t -\n\t\t\t\t\t --\n\t\t\t\t\t +\n\t\t\t\t\t ++\n\t\t\t\t\t |\n\t\t\t\t\t ||\n\t\t\t\t\t *\n\t\t\t\t\t <<\n\t\t\t\t\t >>\n\t\t\t\t\t +=\n\t\t\t\t\t -=\n\t\t\t\t\t *=\n\t\t\t\t\t /=\n\t\t\t\t\t %=\n\t\t\t\t\t &=\n\t\t\t\t\t |=\n\t\t\t\t\t ^=\n\t\t\t\t\t >>=\n\t\t\t\t\t <<=\n\t\t\t\t\t `);\nvar directive_re = /enable|requires|diagnostic/;\nvar ident_re = /[_\\p{XID_Start}]\\p{XID_Continue}*/u;\nvar predefined_token = \"variable.predefined\";\nvar language = {\n  tokenPostfix: \".wgsl\",\n  defaultToken: \"invalid\",\n  unicode: true,\n  atoms,\n  keywords,\n  reserved,\n  predeclared_enums,\n  predeclared_types,\n  predeclared_type_generators,\n  predeclared_type_aliases,\n  predeclared_intrinsics,\n  operators,\n  symbols: /[!%&*+\\-\\.\\/:;<=>^|_~,]+/,\n  tokenizer: {\n    root: [\n      [directive_re, \"keyword\", \"@directive\"],\n      [\n        // Identifier-like things, but also include '_'\n        ident_re,\n        {\n          cases: {\n            \"@atoms\": predefined_token,\n            \"@keywords\": \"keyword\",\n            \"@reserved\": \"invalid\",\n            \"@predeclared_enums\": predefined_token,\n            \"@predeclared_types\": predefined_token,\n            \"@predeclared_type_generators\": predefined_token,\n            \"@predeclared_type_aliases\": predefined_token,\n            \"@predeclared_intrinsics\": predefined_token,\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      { include: \"@commentOrSpace\" },\n      { include: \"@numbers\" },\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [\"@\", \"annotation\", \"@attribute\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@default\": \"delimiter\"\n          }\n        }\n      ],\n      [/./, \"invalid\"]\n    ],\n    commentOrSpace: [\n      [/\\s+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@blockComment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    blockComment: [\n      // Soak up uninteresting text: anything except * or /\n      [/[^\\/*]+/, \"comment\"],\n      // Recognize the start of a nested block comment.\n      [/\\/\\*/, \"comment\", \"@push\"],\n      // Recognize the end of a nested block comment.\n      [/\\*\\//, \"comment\", \"@pop\"],\n      // Recognize insignificant * and /\n      [/[\\/*]/, \"comment\"]\n    ],\n    attribute: [\n      // For things like '@fragment' both '@' and 'fragment'\n      // are marked as annotations.  This should work even if\n      // there are spaces or comments between the two tokens.\n      { include: \"@commentOrSpace\" },\n      [/\\w+/, \"annotation\", \"@pop\"]\n    ],\n    directive: [\n      // For things like 'enable f16;', 'enable' maps to 'meta'\n      // and 'f16' maps to 'meta.tag'.\n      { include: \"@commentOrSpace\" },\n      [/[()]/, \"@brackets\"],\n      [/,/, \"delimiter\"],\n      [ident_re, \"meta.content\"],\n      [/;/, \"delimiter\", \"@pop\"]\n    ],\n    numbers: [\n      // Decimal float literals\n      // https://www.w3.org/TR/WGSL/#syntax-decimal_float_literal\n      // 0, with type-specifying suffix.\n      [/0[fh]/, \"number.float\"],\n      // Other decimal integer, with type-specifying suffix.\n      [/[1-9][0-9]*[fh]/, \"number.float\"],\n      // Has decimal point, at least one digit after decimal.\n      [/[0-9]*\\.[0-9]+([eE][+-]?[0-9]+)?[fh]?/, \"number.float\"],\n      // Has decimal point, at least one digit before decimal.\n      [/[0-9]+\\.[0-9]*([eE][+-]?[0-9]+)?[fh]?/, \"number.float\"],\n      // Has at least one digit, and has an exponent.\n      [/[0-9]+[eE][+-]?[0-9]+[fh]?/, \"number.float\"],\n      // Hex float literals\n      // https://www.w3.org/TR/WGSL/#syntax-hex_float_literal\n      [/0[xX][0-9a-fA-F]*\\.[0-9a-fA-F]+(?:[pP][+-]?[0-9]+[fh]?)?/, \"number.hex\"],\n      [/0[xX][0-9a-fA-F]+\\.[0-9a-fA-F]*(?:[pP][+-]?[0-9]+[fh]?)?/, \"number.hex\"],\n      [/0[xX][0-9a-fA-F]+[pP][+-]?[0-9]+[fh]?/, \"number.hex\"],\n      // Hexadecimal integer literals\n      // https://www.w3.org/TR/WGSL/#syntax-hex_int_literal\n      [/0[xX][0-9a-fA-F]+[iu]?/, \"number.hex\"],\n      // Decimal integer literals\n      // https://www.w3.org/TR/WGSL/#syntax-decimal_int_literal\n      // We need two rules here because 01 is not valid.\n      [/[1-9][0-9]*[iu]?/, \"number\"],\n      [/0[iu]?/, \"number\"]\n      // Must match last\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$7ae30a8f2d324fa3$export$c83be1687c028fc9","$7ae30a8f2d324fa3$export$789c912f57fe164c","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","$7ae30a8f2d324fa3$var$qw","str","result","words","split","i","length","push","$7ae30a8f2d324fa3$var$atoms","$7ae30a8f2d324fa3$var$keywords","$7ae30a8f2d324fa3$var$reserved","$7ae30a8f2d324fa3$var$predeclared_enums","$7ae30a8f2d324fa3$var$predeclared_types","$7ae30a8f2d324fa3$var$predeclared_type_generators","$7ae30a8f2d324fa3$var$predeclared_type_aliases","$7ae30a8f2d324fa3$var$predeclared_intrinsics","$7ae30a8f2d324fa3$var$operators","$7ae30a8f2d324fa3$var$ident_re","$7ae30a8f2d324fa3$var$predefined_token","tokenPostfix","defaultToken","unicode","atoms","keywords","reserved","predeclared_enums","predeclared_types","predeclared_type_generators","predeclared_type_aliases","predeclared_intrinsics","operators","symbols","tokenizer","root","cases","include","commentOrSpace","attribute","directive","numbers"],"version":3,"file":"wgsl.cf7685d5.js.map"}