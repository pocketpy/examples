{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+EAK+E,EAI/E,IAAI,EAAO,CACT,SAAU,CACR,YAAa,GACf,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,KAAM,QAAQ,CACf,CAAC,QAAS,WAAW,CACrB,CAAC,MAAO,SAAS,CACjB,CAAC,MAAO,SAAS,CAClB,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACvD,AACH,EACI,EAAW,CACb,aAAc,GACd,aAAc,MACd,WAAY,CAAA,EACZ,SAAU,CACR,CAAE,MAAO,kBAAmB,KAAM,IAAK,MAAO,GAAI,EAClD,CAAE,MAAO,wBAAyB,KAAM,IAAK,MAAO,GAAI,EAExD,CAAE,MAAO,iBAAkB,KAAM,KAAM,MAAO,OAAQ,EACtD,CAAE,MAAO,oBAAqB,KAAM,QAAS,MAAO,UAAW,EAC/D,CAAE,MAAO,kBAAmB,KAAM,MAAO,MAAO,QAAS,EACzD,CAAE,MAAO,kBAAmB,KAAM,MAAO,MAAO,QAAS,EAC1D,CACD,SAAU,CACR,OACA,SACA,SACA,QACA,SACA,WACA,MACA,OACA,KACA,OACA,MACA,OACA,KACA,QACD,CACD,SAAU,CAAC,KAAM,MAAO,QAAS,MAAM,CACvC,UAAW,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,MAAO,KAAM,IAAK,IAAK,IAAK,IAAK,IAAI,CAE7E,WAAY,iBACZ,QAAS,oBACT,QAAS,wEAET,UAAW,CACT,KAAM,CAEJ,CAAE,QAAS,aAAc,EAEzB,CAAC,uBAAwB,OAAO,CAEhC,CACE,cACA,CACE,MAAO,CACL,YAAa,CAAE,MAAO,YAAa,EACnC,aAAc,WACd,WAAY,eACd,CACF,EACD,CAED,CACE,qBACA,CACE,MAAO,CACL,GAAI,CAAC,YAAa,cAAc,CAChC,WAAY,EACd,CACF,EACD,CAED,CAAC,WAAY,eAAe,CAC5B,CAAC,MAAO,SAAS,CAEjB,CAAC,WAAY,YAAY,CACzB,CACE,WACA,CACE,MAAO,CACL,aAAc,WACd,WAAY,WACd,CACF,EACD,CAED,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,IAAK,SAAU,UAAU,CAC3B,CACD,WAAY,CACV,CAAC,aAAc,GAAG,CAClB,CAAC,UAAW,UAAU,CACvB,CACD,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,MAAO,SAAU,OAAO,CAC1B,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"jiV6r\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $e0dbfe326c45b00a$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $e0dbfe326c45b00a$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/sb/sb.ts\nvar $e0dbfe326c45b00a$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"'\"\n    },\n    brackets: [\n        [\n            \"(\",\n            \")\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"If\",\n            \"EndIf\"\n        ],\n        [\n            \"While\",\n            \"EndWhile\"\n        ],\n        [\n            \"For\",\n            \"EndFor\"\n        ],\n        [\n            \"Sub\",\n            \"EndSub\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        }\n    ]\n};\nvar $e0dbfe326c45b00a$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".sb\",\n    ignoreCase: true,\n    brackets: [\n        {\n            token: \"delimiter.array\",\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            token: \"delimiter.parenthesis\",\n            open: \"(\",\n            close: \")\"\n        },\n        // Special bracket statement pairs\n        {\n            token: \"keyword.tag-if\",\n            open: \"If\",\n            close: \"EndIf\"\n        },\n        {\n            token: \"keyword.tag-while\",\n            open: \"While\",\n            close: \"EndWhile\"\n        },\n        {\n            token: \"keyword.tag-for\",\n            open: \"For\",\n            close: \"EndFor\"\n        },\n        {\n            token: \"keyword.tag-sub\",\n            open: \"Sub\",\n            close: \"EndSub\"\n        }\n    ],\n    keywords: [\n        \"Else\",\n        \"ElseIf\",\n        \"EndFor\",\n        \"EndIf\",\n        \"EndSub\",\n        \"EndWhile\",\n        \"For\",\n        \"Goto\",\n        \"If\",\n        \"Step\",\n        \"Sub\",\n        \"Then\",\n        \"To\",\n        \"While\"\n    ],\n    tagwords: [\n        \"If\",\n        \"Sub\",\n        \"While\",\n        \"For\"\n    ],\n    operators: [\n        \">\",\n        \"<\",\n        \"<>\",\n        \"<=\",\n        \">=\",\n        \"And\",\n        \"Or\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"=\"\n    ],\n    // we include these common regular expressions\n    identifier: /[a-zA-Z_][\\w]*/,\n    symbols: /[=><:+\\-*\\/%\\.,]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // classes\n            [\n                /(@identifier)(?=[.])/,\n                \"type\"\n            ],\n            // identifiers, tagwords, and keywords\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        \"@keywords\": {\n                            token: \"keyword.$0\"\n                        },\n                        \"@operators\": \"operator\",\n                        \"@default\": \"variable.name\"\n                    }\n                }\n            ],\n            // methods, properties, and events\n            [\n                /([.])(@identifier)/,\n                {\n                    cases: {\n                        $2: [\n                            \"delimiter\",\n                            \"type.member\"\n                        ],\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /\\d*\\.\\d+/,\n                \"number.float\"\n            ],\n            [\n                /\\d+/,\n                \"number\"\n            ],\n            // delimiters and operators\n            [\n                /[()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"operator\",\n                        \"@default\": \"delimiter\"\n                    }\n                }\n            ],\n            // strings\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /\"/,\n                \"string\",\n                \"@string\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"\"\n            ],\n            [\n                /(\\').*$/,\n                \"comment\"\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"C?/,\n                \"string\",\n                \"@pop\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=sb.207deca1.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/sb/sb.ts\nvar conf = {\n  comments: {\n    lineComment: \"'\"\n  },\n  brackets: [\n    [\"(\", \")\"],\n    [\"[\", \"]\"],\n    [\"If\", \"EndIf\"],\n    [\"While\", \"EndWhile\"],\n    [\"For\", \"EndFor\"],\n    [\"Sub\", \"EndSub\"]\n  ],\n  autoClosingPairs: [\n    { open: '\"', close: '\"', notIn: [\"string\", \"comment\"] },\n    { open: \"(\", close: \")\", notIn: [\"string\", \"comment\"] },\n    { open: \"[\", close: \"]\", notIn: [\"string\", \"comment\"] }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".sb\",\n  ignoreCase: true,\n  brackets: [\n    { token: \"delimiter.array\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    // Special bracket statement pairs\n    { token: \"keyword.tag-if\", open: \"If\", close: \"EndIf\" },\n    { token: \"keyword.tag-while\", open: \"While\", close: \"EndWhile\" },\n    { token: \"keyword.tag-for\", open: \"For\", close: \"EndFor\" },\n    { token: \"keyword.tag-sub\", open: \"Sub\", close: \"EndSub\" }\n  ],\n  keywords: [\n    \"Else\",\n    \"ElseIf\",\n    \"EndFor\",\n    \"EndIf\",\n    \"EndSub\",\n    \"EndWhile\",\n    \"For\",\n    \"Goto\",\n    \"If\",\n    \"Step\",\n    \"Sub\",\n    \"Then\",\n    \"To\",\n    \"While\"\n  ],\n  tagwords: [\"If\", \"Sub\", \"While\", \"For\"],\n  operators: [\">\", \"<\", \"<>\", \"<=\", \">=\", \"And\", \"Or\", \"+\", \"-\", \"*\", \"/\", \"=\"],\n  // we include these common regular expressions\n  identifier: /[a-zA-Z_][\\w]*/,\n  symbols: /[=><:+\\-*\\/%\\.,]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // whitespace\n      { include: \"@whitespace\" },\n      // classes\n      [/(@identifier)(?=[.])/, \"type\"],\n      // identifiers, tagwords, and keywords\n      [\n        /@identifier/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@operators\": \"operator\",\n            \"@default\": \"variable.name\"\n          }\n        }\n      ],\n      // methods, properties, and events\n      [\n        /([.])(@identifier)/,\n        {\n          cases: {\n            $2: [\"delimiter\", \"type.member\"],\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/\\d*\\.\\d+/, \"number.float\"],\n      [/\\d+/, \"number\"],\n      // delimiters and operators\n      [/[()\\[\\]]/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@default\": \"delimiter\"\n          }\n        }\n      ],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/\"/, \"string\", \"@string\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/(\\').*$/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"C?/, \"string\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$e0dbfe326c45b00a$export$c83be1687c028fc9","$e0dbfe326c45b00a$export$789c912f57fe164c","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","defaultToken","tokenPostfix","ignoreCase","token","keywords","tagwords","operators","identifier","symbols","escapes","tokenizer","root","include","cases","$2","whitespace","string"],"version":3,"file":"sb.207deca1.js.map"}