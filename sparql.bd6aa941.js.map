{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+EAK+E,EAI/E,IAAI,EAAO,CACT,SAAU,CACR,YAAa,GACf,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAS,AAAC,EAC3C,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAS,AAAC,EAC3C,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,AACH,EACI,EAAW,CACb,aAAc,GACd,aAAc,MACd,SAAU,CACR,CAAE,MAAO,kBAAmB,KAAM,IAAK,MAAO,GAAI,EAClD,CAAE,MAAO,wBAAyB,KAAM,IAAK,MAAO,GAAI,EACxD,CAAE,MAAO,mBAAoB,KAAM,IAAK,MAAO,GAAI,EACnD,CAAE,MAAO,kBAAmB,KAAM,IAAK,MAAO,GAAI,EACnD,CACD,SAAU,CACR,MACA,KACA,MACA,MACA,OACA,KACA,QACA,YACA,OACA,SACA,OACA,SACA,OACA,WACA,WACA,OACA,QACA,SACA,OACA,QACA,QACA,SACA,KACA,SACA,QACA,OACA,QACA,OACA,QACA,MACA,SACA,WACA,QACA,SACA,UACA,SACA,UACA,SACA,KACA,OACA,QACA,QACA,QACA,SACA,QACA,OACD,CACD,iBAAkB,CAChB,IACA,MACA,MACA,OACA,QACA,QACA,OACA,WACA,SACA,WACA,QACA,WACA,MACA,iBACA,SACA,QACA,eACA,QACA,KACA,MACA,UACA,QACA,YACA,YACA,QACA,OACA,cACA,QACA,MACA,MACA,MACA,UACA,QACA,MACA,OACA,QACA,UACA,QACA,WACA,SACA,UACA,OACA,SACA,SACA,SACA,MACA,WACA,YACA,QACA,UACA,UACA,SACA,YACA,UACA,SACA,MACA,WACA,KACA,QACA,MACA,OACA,OACD,CAED,WAAY,CAAA,EACZ,UAAW,CACT,KAAM,CAEJ,CAAC,mBAAoB,MAAM,CAE3B,CAAE,QAAS,UAAW,EAEtB,CAAC,MAAO,UAAU,CAElB,CAAC,aAAc,YAAY,CAC3B,CAAC,QAAS,YAAY,CAEtB,CAAC,kFAAmF,MAAM,CAC1F,CAAC,0EAA2E,MAAM,CAElF,CACE,gBACA,CACE,MAAO,CACL,YAAa,CAAE,MAAO,SAAU,EAChC,oBAAqB,CAAE,MAAO,gBAAiB,EAC/C,WAAY,YACd,CACF,EACD,CAED,CAAC,OAAQ,eAAe,CACxB,CAAC,sBAAuB,eAAe,CACvC,CAAC,kBAAmB,eAAe,CAEnC,CAAC,cAAe,eAAe,CAE/B,CAAC,MAAO,QAAQ,CACjB,CACD,QAAS,CACP,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,KAAM,aAAc,OAAO,CAC5B,CAAC,IAAK,aAAc,cAAc,CAClC,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,KAAM,aAAc,OAAO,CAC5B,CAAC,IAAK,aAAc,iBAAiB,CACtC,CAED,WAAY,CACV,CAAC,UAAW,aAAa,CACzB,CAAC,MAAO,gBAAgB,CACxB,CAAC,IAAK,aAAc,OAAO,CAC5B,CAED,cAAe,CACb,CAAC,UAAW,aAAa,CACzB,CAAC,MAAO,gBAAgB,CACxB,CAAC,IAAK,aAAc,OAAO,CAC5B,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/sparql/sparql.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"8ejub\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $5fdebf031d0ff154$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $5fdebf031d0ff154$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/sparql/sparql.ts\nvar $5fdebf031d0ff154$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"#\"\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\"\n            ]\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\"\n            ]\n        },\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        }\n    ]\n};\nvar $5fdebf031d0ff154$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".rq\",\n    brackets: [\n        {\n            token: \"delimiter.curly\",\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            token: \"delimiter.parenthesis\",\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            token: \"delimiter.square\",\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            token: \"delimiter.angle\",\n            open: \"<\",\n            close: \">\"\n        }\n    ],\n    keywords: [\n        \"add\",\n        \"as\",\n        \"asc\",\n        \"ask\",\n        \"base\",\n        \"by\",\n        \"clear\",\n        \"construct\",\n        \"copy\",\n        \"create\",\n        \"data\",\n        \"delete\",\n        \"desc\",\n        \"describe\",\n        \"distinct\",\n        \"drop\",\n        \"false\",\n        \"filter\",\n        \"from\",\n        \"graph\",\n        \"group\",\n        \"having\",\n        \"in\",\n        \"insert\",\n        \"limit\",\n        \"load\",\n        \"minus\",\n        \"move\",\n        \"named\",\n        \"not\",\n        \"offset\",\n        \"optional\",\n        \"order\",\n        \"prefix\",\n        \"reduced\",\n        \"select\",\n        \"service\",\n        \"silent\",\n        \"to\",\n        \"true\",\n        \"undef\",\n        \"union\",\n        \"using\",\n        \"values\",\n        \"where\",\n        \"with\"\n    ],\n    builtinFunctions: [\n        \"a\",\n        \"abs\",\n        \"avg\",\n        \"bind\",\n        \"bnode\",\n        \"bound\",\n        \"ceil\",\n        \"coalesce\",\n        \"concat\",\n        \"contains\",\n        \"count\",\n        \"datatype\",\n        \"day\",\n        \"encode_for_uri\",\n        \"exists\",\n        \"floor\",\n        \"group_concat\",\n        \"hours\",\n        \"if\",\n        \"iri\",\n        \"isblank\",\n        \"isiri\",\n        \"isliteral\",\n        \"isnumeric\",\n        \"isuri\",\n        \"lang\",\n        \"langmatches\",\n        \"lcase\",\n        \"max\",\n        \"md5\",\n        \"min\",\n        \"minutes\",\n        \"month\",\n        \"now\",\n        \"rand\",\n        \"regex\",\n        \"replace\",\n        \"round\",\n        \"sameterm\",\n        \"sample\",\n        \"seconds\",\n        \"sha1\",\n        \"sha256\",\n        \"sha384\",\n        \"sha512\",\n        \"str\",\n        \"strafter\",\n        \"strbefore\",\n        \"strdt\",\n        \"strends\",\n        \"strlang\",\n        \"strlen\",\n        \"strstarts\",\n        \"struuid\",\n        \"substr\",\n        \"sum\",\n        \"timezone\",\n        \"tz\",\n        \"ucase\",\n        \"uri\",\n        \"uuid\",\n        \"year\"\n    ],\n    // describe tokens\n    ignoreCase: true,\n    tokenizer: {\n        root: [\n            // resource indicators\n            [\n                /<[^\\s\\u00a0>]*>?/,\n                \"tag\"\n            ],\n            // strings\n            {\n                include: \"@strings\"\n            },\n            // line comment\n            [\n                /#.*/,\n                \"comment\"\n            ],\n            // special chars with special meaning\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            // (prefixed) name\n            [\n                /[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/,\n                \"tag\"\n            ],\n            [\n                /:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/,\n                \"tag\"\n            ],\n            // identifiers, builtinFunctions and keywords\n            [\n                /[$?]?[_\\w\\d]+/,\n                {\n                    cases: {\n                        \"@keywords\": {\n                            token: \"keyword\"\n                        },\n                        \"@builtinFunctions\": {\n                            token: \"predefined.sql\"\n                        },\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            // operators\n            [\n                /\\^\\^/,\n                \"operator.sql\"\n            ],\n            [\n                /\\^[*+\\-<>=&|^\\/!?]*/,\n                \"operator.sql\"\n            ],\n            [\n                /[*+\\-<>=&|\\/!?]/,\n                \"operator.sql\"\n            ],\n            // symbol\n            [\n                /@[a-z\\d\\-]*/,\n                \"metatag.html\"\n            ],\n            // whitespaces\n            [\n                /\\s+/,\n                \"white\"\n            ]\n        ],\n        strings: [\n            [\n                /'([^'\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-terminated single-quoted string\n            [\n                /'$/,\n                \"string.sql\",\n                \"@pop\"\n            ],\n            [\n                /'/,\n                \"string.sql\",\n                \"@stringBody\"\n            ],\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-terminated single-quoted string\n            [\n                /\"$/,\n                \"string.sql\",\n                \"@pop\"\n            ],\n            [\n                /\"/,\n                \"string.sql\",\n                \"@dblStringBody\"\n            ]\n        ],\n        // single-quoted strings\n        stringBody: [\n            [\n                /[^\\\\']+/,\n                \"string.sql\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape\"\n            ],\n            [\n                /'/,\n                \"string.sql\",\n                \"@pop\"\n            ]\n        ],\n        // double-quoted strings\n        dblStringBody: [\n            [\n                /[^\\\\\"]+/,\n                \"string.sql\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape\"\n            ],\n            [\n                /\"/,\n                \"string.sql\",\n                \"@pop\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=sparql.bd6aa941.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/sparql/sparql.ts\nvar conf = {\n  comments: {\n    lineComment: \"#\"\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"'\", close: \"'\", notIn: [\"string\"] },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".rq\",\n  brackets: [\n    { token: \"delimiter.curly\", open: \"{\", close: \"}\" },\n    { token: \"delimiter.parenthesis\", open: \"(\", close: \")\" },\n    { token: \"delimiter.square\", open: \"[\", close: \"]\" },\n    { token: \"delimiter.angle\", open: \"<\", close: \">\" }\n  ],\n  keywords: [\n    \"add\",\n    \"as\",\n    \"asc\",\n    \"ask\",\n    \"base\",\n    \"by\",\n    \"clear\",\n    \"construct\",\n    \"copy\",\n    \"create\",\n    \"data\",\n    \"delete\",\n    \"desc\",\n    \"describe\",\n    \"distinct\",\n    \"drop\",\n    \"false\",\n    \"filter\",\n    \"from\",\n    \"graph\",\n    \"group\",\n    \"having\",\n    \"in\",\n    \"insert\",\n    \"limit\",\n    \"load\",\n    \"minus\",\n    \"move\",\n    \"named\",\n    \"not\",\n    \"offset\",\n    \"optional\",\n    \"order\",\n    \"prefix\",\n    \"reduced\",\n    \"select\",\n    \"service\",\n    \"silent\",\n    \"to\",\n    \"true\",\n    \"undef\",\n    \"union\",\n    \"using\",\n    \"values\",\n    \"where\",\n    \"with\"\n  ],\n  builtinFunctions: [\n    \"a\",\n    \"abs\",\n    \"avg\",\n    \"bind\",\n    \"bnode\",\n    \"bound\",\n    \"ceil\",\n    \"coalesce\",\n    \"concat\",\n    \"contains\",\n    \"count\",\n    \"datatype\",\n    \"day\",\n    \"encode_for_uri\",\n    \"exists\",\n    \"floor\",\n    \"group_concat\",\n    \"hours\",\n    \"if\",\n    \"iri\",\n    \"isblank\",\n    \"isiri\",\n    \"isliteral\",\n    \"isnumeric\",\n    \"isuri\",\n    \"lang\",\n    \"langmatches\",\n    \"lcase\",\n    \"max\",\n    \"md5\",\n    \"min\",\n    \"minutes\",\n    \"month\",\n    \"now\",\n    \"rand\",\n    \"regex\",\n    \"replace\",\n    \"round\",\n    \"sameterm\",\n    \"sample\",\n    \"seconds\",\n    \"sha1\",\n    \"sha256\",\n    \"sha384\",\n    \"sha512\",\n    \"str\",\n    \"strafter\",\n    \"strbefore\",\n    \"strdt\",\n    \"strends\",\n    \"strlang\",\n    \"strlen\",\n    \"strstarts\",\n    \"struuid\",\n    \"substr\",\n    \"sum\",\n    \"timezone\",\n    \"tz\",\n    \"ucase\",\n    \"uri\",\n    \"uuid\",\n    \"year\"\n  ],\n  // describe tokens\n  ignoreCase: true,\n  tokenizer: {\n    root: [\n      // resource indicators\n      [/<[^\\s\\u00a0>]*>?/, \"tag\"],\n      // strings\n      { include: \"@strings\" },\n      // line comment\n      [/#.*/, \"comment\"],\n      // special chars with special meaning\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[;,.]/, \"delimiter\"],\n      // (prefixed) name\n      [/[_\\w\\d]+:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])*/, \"tag\"],\n      [/:(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/, \"tag\"],\n      // identifiers, builtinFunctions and keywords\n      [\n        /[$?]?[_\\w\\d]+/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@builtinFunctions\": { token: \"predefined.sql\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // operators\n      [/\\^\\^/, \"operator.sql\"],\n      [/\\^[*+\\-<>=&|^\\/!?]*/, \"operator.sql\"],\n      [/[*+\\-<>=&|\\/!?]/, \"operator.sql\"],\n      // symbol\n      [/@[a-z\\d\\-]*/, \"metatag.html\"],\n      // whitespaces\n      [/\\s+/, \"white\"]\n    ],\n    strings: [\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-terminated single-quoted string\n      [/'$/, \"string.sql\", \"@pop\"],\n      [/'/, \"string.sql\", \"@stringBody\"],\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-terminated single-quoted string\n      [/\"$/, \"string.sql\", \"@pop\"],\n      [/\"/, \"string.sql\", \"@dblStringBody\"]\n    ],\n    // single-quoted strings\n    stringBody: [\n      [/[^\\\\']+/, \"string.sql\"],\n      [/\\\\./, \"string.escape\"],\n      [/'/, \"string.sql\", \"@pop\"]\n    ],\n    // double-quoted strings\n    dblStringBody: [\n      [/[^\\\\\"]+/, \"string.sql\"],\n      [/\\\\./, \"string.escape\"],\n      [/\"/, \"string.sql\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$5fdebf031d0ff154$export$c83be1687c028fc9","$5fdebf031d0ff154$export$789c912f57fe164c","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","defaultToken","tokenPostfix","token","keywords","builtinFunctions","ignoreCase","tokenizer","root","include","cases","strings","stringBody","dblStringBody"],"version":3,"file":"sparql.bd6aa941.js.map"}