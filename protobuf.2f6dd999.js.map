{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,GCUA,IAAI,EAAO,CACT,SAAU,CACR,YAAa,KACb,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAS,AAAC,EAC3C,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAS,AAAC,EAC5C,CACD,gBAAiB,eACjB,iBAAkB,CAChB,sBAAuB,AAAI,OAAO,8DAClC,sBAAuB,AAAI,OAAO,yCACpC,CACF,EACI,EAAW,CACb,aAAc,GACd,aAAc,SACd,SAAU,CACR,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EAClD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,kBAAmB,EACnD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,uBAAwB,EACxD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EACnD,CACD,QAAS,sBACT,SAAU,CACR,SACA,SACA,OACA,SACA,UACA,SACA,WACA,QACA,MACA,WACA,KACA,MACA,OACA,UACA,UACA,MACA,SACA,UACA,UACA,WACA,OACA,QACD,CACD,aAAc,CACZ,SACA,QACA,QACA,QACA,SACA,SACA,SACA,SACA,UACA,UACA,WACA,WACA,OACA,SACA,QACD,CACD,UAAW,CAAC,IAAK,IAAK,IAAI,CAC1B,cAtFkB,CAAC,OAAQ,QAAQ,CAuFnC,QAAS,0CACT,WAAY,cACZ,eAAgB,sCAChB,WAAY,oEACZ,YAAa,cACb,SAAU,cACV,YAAa,6CACb,SAAU,0CACV,SAAU,4EACV,SAAU,wBACV,QAAS,iBACT,WAAY,cACZ,SAAU,UACV,OAAQ,oBACR,KAAM,kIACN,QAAS,wFACT,UAAW,CACT,KAAM,CACJ,CAAE,QAAS,aAAc,EACzB,CAAC,SAAU,UAAU,CACrB,CAAC,IAAK,YAAY,CAClB,CAAC,IAAK,YAAY,CAClB,CACE,iBACA,CAAC,eAAgB,SAAU,CAAE,MAAO,eAAgB,SAAU,kBAAmB,EAAE,CACpF,CACD,CACE,iBACA,CAAC,eAAgB,SAAU,CAAE,MAAO,eAAgB,SAAU,kBAAmB,EAAE,CACpF,CACD,CAEE,MACA,CAAE,MAAO,GAAI,SAAU,kBAAmB,EAC3C,CACF,CACD,SAAU,CAER,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,OAAQ,YAAY,CACrB,CACE,kBACA,CACE,MAAO,CACL,OAAQ,CAAE,MAAO,UAAW,KAAM,aAAc,EAChD,KAAM,CAAE,MAAO,UAAW,KAAM,eAAgB,EAChD,QAAS,CAAE,MAAO,UAAW,KAAM,kBAAmB,EACtD,QAAS,CAAE,MAAO,UAAW,KAAM,kBAAmB,EACtD,OAAQ,CACN,MAAO,CACL,cAAe,CAAE,MAAO,UAAW,KAAM,iBAAkB,CAC7D,CACF,EACA,YAAa,UACb,WAAY,YACd,CACF,EACD,CACF,CACD,SAAU,CACR,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,kBAAkB,CAClC,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,eAAgB,EAAE,CAC3E,CACD,SAAU,CACR,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,IAAK,YAAY,CAClB,CAAC,WAAY,UAAW,cAAc,CACtC,CAAC,cAAe,aAAa,CAC7B,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,cAAe,EAAE,CACtE,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAC/D,CACD,YAAa,CACX,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,kBAAkB,CAClC,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,kBAAmB,EAAE,CAC9E,CACD,YAAa,CACX,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,IAAK,YAAY,CAClB,CACE,eACA,CAAC,UAAW,QAAS,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,UAAW,EAAE,CACjF,CACD,CACE,cACA,CACE,MAAO,CACL,OAAQ,CAAE,MAAO,UAAW,KAAM,aAAc,EAChD,KAAM,CAAE,MAAO,UAAW,KAAM,eAAgB,EAChD,QAAS,CAAE,MAAO,UAAW,KAAM,kBAAmB,EACtD,MAAO,CAAE,MAAO,UAAW,KAAM,gBAAiB,EAClD,WAAY,CACV,MAAO,CACL,cAAe,CAAE,MAAO,UAAW,KAAM,eAAgB,CAC3D,CACF,EACA,SAAU,CAAE,MAAO,UAAW,KAAM,eAAgB,EACpD,wBAAyB,CAAE,MAAO,UAAW,KAAM,YAAa,EAChE,SAAU,CACR,MAAO,CACL,cAAe,CAAE,MAAO,UAAW,KAAM,YAAa,CACxD,CACF,EACA,cAAe,CAAE,MAAO,WAAY,KAAM,YAAa,CACzD,CACF,EACD,CACD,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,cAAe,EAAE,CACtE,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAC/D,CACD,WAAY,CACV,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,kBAAkB,CAClC,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,iBAAkB,EAAE,CAC7E,CACD,WAAY,CACV,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,iCAAkC,UAAW,aAAa,CAC3D,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,cAAe,EAAE,CACtE,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAC/D,CACD,QAAS,CACP,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,cAAe,aAAa,CAC7B,CAAC,OAAQ,sBAAsB,CAC/B,CAAC,IAAK,WAAW,CACjB,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAChE,CACD,OAAQ,CACN,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,aAAa,CAC7B,CAAC,OAAQ,sBAAsB,CAC/B,CAAC,IAAK,WAAY,OAAO,CAC1B,CACD,UAAW,CACT,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,aAAa,CAC7B,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,gBAAiB,EAAE,CAC5E,CACD,UAAW,CACT,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,wBAAyB,CAAC,aAAc,QAAS,YAAY,CAAC,CAC/D,CACE,qBACA,CACE,MAAO,CACL,gBAAiB,UACjB,WAAY,iBACd,CACF,EACD,CACD,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,cAAe,EAAE,CACtE,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAC/D,CACD,SAAU,CACR,CAAE,QAAS,aAAc,EACzB,CAAC,IAAK,YAAY,CAClB,CAAC,IAAK,YAAa,OAAO,CAC1B,CAAE,QAAS,WAAY,EACvB,CAAC,aAAc,UAAU,CAC1B,CACD,IAAK,CACH,CAAE,QAAS,aAAc,EACzB,CACE,qBACA,CACE,MAAO,CACL,gBAAiB,UACjB,WAAY,iBACd,CACF,EACD,CACD,CAAC,IAAK,YAAY,CAClB,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,SAAU,YAAa,EAAE,CACzE,CACD,MAAO,CACL,CAAE,QAAS,aAAc,EACzB,CACE,QACA,CACE,MAAO,CACL,cAAe,CAAE,MAAO,UAAW,SAAU,gBAAiB,CAChE,CACF,EACD,CACD,CAAC,wBAAyB,CAAC,aAAc,QAAS,CAAE,MAAO,YAAa,KAAM,MAAO,EAAE,CAAC,CACxF,CACE,qBACA,CACE,MAAO,CACL,gBAAiB,UACjB,WAAY,iBACd,CACF,EACD,CACF,CACD,UAAW,CACT,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,aAAa,CAC7B,CAAC,IAAK,WAAW,CACjB,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,kBAAmB,EAAE,CAC7E,CAAE,QAAS,WAAY,EACxB,CACD,KAAM,CACJ,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,kBAAmB,OAAO,CAC1C,CAAC,IAAK,YAAY,CACnB,CACD,WAAY,CAAC,CAAE,QAAS,aAAc,EAAG,CAAC,cAAe,aAAc,OAAO,CAAC,CAC/E,YAAa,CACX,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,aAAa,CAC7B,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,kBAAmB,EAAE,CAC9E,CACD,YAAa,CACX,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,WAAY,UAAW,cAAc,CACtC,CAAC,QAAS,UAAW,WAAW,CAChC,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,cAAe,EAAE,CACtE,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAC/D,CACD,IAAK,CACH,CAAE,QAAS,aAAc,EACzB,CAAC,cAAe,aAAa,CAC7B,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,cAAe,EAAE,CAC1E,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,oBAAqB,EAAE,CAC3E,CAAC,IAAK,YAAa,OAAO,CAC3B,CACD,QAAS,CACP,CAAE,QAAS,aAAc,EACzB,CACE,eACA,CACE,MAAO,CACL,OAAQ,CAAE,MAAO,UAAW,KAAM,WAAY,EAC9C,WAAY,iBACd,CACF,EACD,CACD,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,SAAU,SAAU,cAAe,EAAE,CAC5E,CACD,QAAS,CACP,CAAE,QAAS,aAAc,EACzB,CAAC,YAAa,UAAU,CACxB,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,QAAS,SAAU,eAAgB,EAAE,CAC5E,CACD,SAAU,CACR,CAAE,QAAS,aAAc,EACzB,CACE,eACA,CACE,MAAO,CACL,OAAQ,CAAE,MAAO,UAAW,KAAM,WAAY,EAC9C,WAAY,iBACd,CACF,EACD,CACD,CAAC,KAAM,CAAE,MAAO,YAAa,QAAS,SAAU,SAAU,UAAW,EAAE,CACxE,CACD,cAAe,CACb,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,IAAK,YAAY,CAClB,CAAC,SAAU,UAAU,CACrB,CAAC,cAAe,aAAa,CAC7B,CAAC,OAAQ,sBAAsB,CAC/B,CAAC,IAAK,WAAW,CACjB,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAC/D,CACD,QAAS,CACP,CAAC,UAAW,UAAU,CACtB,CAAC,OAAQ,UAAW,QAAQ,CAE5B,CAAC,OAAQ,UAAW,OAAO,CAC3B,CAAC,QAAS,UAAU,CACrB,CACD,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,SAAU,KAAM,MAAO,EAAE,CAClE,CACD,aAAc,CACZ,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,SAAU,KAAM,MAAO,EAAE,CAClE,CACD,SAAU,CACR,CAAC,WAAY,mBAAmB,CAChC,CAAC,UAAW,aAAa,CACzB,CAAC,YAAa,eAAe,CAC7B,CAAC,cAAe,SAAS,CACzB,CAAC,YAAa,eAAe,CAC7B,CAAC,mCAAoC,iBAAiB,CAEtD,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,QAAS,KAAM,SAAU,EAAE,CACnE,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,QAAS,KAAM,eAAgB,EAAE,CACzE,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,QAAS,KAAM,YAAa,EAAE,CACnE,CAAC,aAAc,aAAa,CAC7B,CACD,WAAY,CACV,CAAC,aAAc,QAAQ,CACvB,CAAC,OAAQ,UAAW,WAAW,CAC/B,CAAC,UAAW,UAAU,CACvB,CACD,UAAW,CACT,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,WAAY,EACvB,CAAC,cAAe,aAAa,CAC7B,CAAC,OAAQ,YAAY,CACrB,CAAC,IAAK,CAAE,MAAO,YAAa,QAAS,SAAU,KAAM,MAAO,EAAE,CAC/D,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/protobuf/protobuf.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fxOD3\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $b51135eefc60f827$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $b51135eefc60f827$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/protobuf/protobuf.ts\nvar $b51135eefc60f827$var$namedLiterals = [\n    \"true\",\n    \"false\"\n];\nvar $b51135eefc60f827$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ],\n        [\n            \"<\",\n            \">\"\n        ]\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"<\",\n            close: \">\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"<\",\n            close: \">\"\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\"\n            ]\n        },\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\"\n            ]\n        }\n    ],\n    autoCloseBefore: \".,=}])>' \\n\t\",\n    indentationRules: {\n        increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n        decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n    }\n};\nvar $b51135eefc60f827$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".proto\",\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        },\n        {\n            open: \"<\",\n            close: \">\",\n            token: \"delimiter.angle\"\n        }\n    ],\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\n    keywords: [\n        \"syntax\",\n        \"import\",\n        \"weak\",\n        \"public\",\n        \"package\",\n        \"option\",\n        \"repeated\",\n        \"oneof\",\n        \"map\",\n        \"reserved\",\n        \"to\",\n        \"max\",\n        \"enum\",\n        \"message\",\n        \"service\",\n        \"rpc\",\n        \"stream\",\n        \"returns\",\n        \"package\",\n        \"optional\",\n        \"true\",\n        \"false\"\n    ],\n    builtinTypes: [\n        \"double\",\n        \"float\",\n        \"int32\",\n        \"int64\",\n        \"uint32\",\n        \"uint64\",\n        \"sint32\",\n        \"sint64\",\n        \"fixed32\",\n        \"fixed64\",\n        \"sfixed32\",\n        \"sfixed64\",\n        \"bool\",\n        \"string\",\n        \"bytes\"\n    ],\n    operators: [\n        \"=\",\n        \"+\",\n        \"-\"\n    ],\n    namedLiterals: $b51135eefc60f827$var$namedLiterals,\n    escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n    identifier: /[a-zA-Z]\\w*/,\n    fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n    optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n    messageName: /@identifier/,\n    enumName: /@identifier/,\n    messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n    enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n    floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n    exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n    boolLit: /true\\b|false\\b/,\n    decimalLit: /[1-9][0-9]*/,\n    octalLit: /0[0-7]*/,\n    hexLit: /0[xX][0-9a-fA-F]+/,\n    type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n    keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n    tokenizer: {\n        root: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /syntax/,\n                \"keyword\"\n            ],\n            [\n                /=/,\n                \"operators\"\n            ],\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                /(\")(proto3)(\")/,\n                [\n                    \"string.quote\",\n                    \"string\",\n                    {\n                        token: \"string.quote\",\n                        switchTo: \"@topLevel.proto3\"\n                    }\n                ]\n            ],\n            [\n                /(\")(proto2)(\")/,\n                [\n                    \"string.quote\",\n                    \"string\",\n                    {\n                        token: \"string.quote\",\n                        switchTo: \"@topLevel.proto2\"\n                    }\n                ]\n            ],\n            [\n                // If no `syntax` provided, regarded as proto2\n                /.*?/,\n                {\n                    token: \"\",\n                    switchTo: \"@topLevel.proto2\"\n                }\n            ]\n        ],\n        topLevel: [\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /=/,\n                \"operators\"\n            ],\n            [\n                /[;.]/,\n                \"delimiter\"\n            ],\n            [\n                /@fullIdentifier/,\n                {\n                    cases: {\n                        option: {\n                            token: \"keyword\",\n                            next: \"@option.$S2\"\n                        },\n                        enum: {\n                            token: \"keyword\",\n                            next: \"@enumDecl.$S2\"\n                        },\n                        message: {\n                            token: \"keyword\",\n                            next: \"@messageDecl.$S2\"\n                        },\n                        service: {\n                            token: \"keyword\",\n                            next: \"@serviceDecl.$S2\"\n                        },\n                        extend: {\n                            cases: {\n                                \"$S2==proto2\": {\n                                    token: \"keyword\",\n                                    next: \"@extendDecl.$S2\"\n                                }\n                            }\n                        },\n                        \"@keywords\": \"keyword\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ]\n        ],\n        enumDecl: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"type.identifier\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@enumBody.$S2\"\n                }\n            ]\n        ],\n        enumBody: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /=/,\n                \"operators\"\n            ],\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                /option\\b/,\n                \"keyword\",\n                \"@option.$S2\"\n            ],\n            [\n                /@identifier/,\n                \"identifier\"\n            ],\n            [\n                /\\[/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    next: \"@options.$S2\"\n                }\n            ],\n            [\n                /}/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        messageDecl: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"type.identifier\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@messageBody.$S2\"\n                }\n            ]\n        ],\n        messageBody: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /=/,\n                \"operators\"\n            ],\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                \"(map)(s*)(<)\",\n                [\n                    \"keyword\",\n                    \"white\",\n                    {\n                        token: \"@brackets\",\n                        bracket: \"@open\",\n                        next: \"@map.$S2\"\n                    }\n                ]\n            ],\n            [\n                /@identifier/,\n                {\n                    cases: {\n                        option: {\n                            token: \"keyword\",\n                            next: \"@option.$S2\"\n                        },\n                        enum: {\n                            token: \"keyword\",\n                            next: \"@enumDecl.$S2\"\n                        },\n                        message: {\n                            token: \"keyword\",\n                            next: \"@messageDecl.$S2\"\n                        },\n                        oneof: {\n                            token: \"keyword\",\n                            next: \"@oneofDecl.$S2\"\n                        },\n                        extensions: {\n                            cases: {\n                                \"$S2==proto2\": {\n                                    token: \"keyword\",\n                                    next: \"@reserved.$S2\"\n                                }\n                            }\n                        },\n                        reserved: {\n                            token: \"keyword\",\n                            next: \"@reserved.$S2\"\n                        },\n                        \"(?:repeated|optional)\": {\n                            token: \"keyword\",\n                            next: \"@field.$S2\"\n                        },\n                        required: {\n                            cases: {\n                                \"$S2==proto2\": {\n                                    token: \"keyword\",\n                                    next: \"@field.$S2\"\n                                }\n                            }\n                        },\n                        \"$S2==proto3\": {\n                            token: \"@rematch\",\n                            next: \"@field.$S2\"\n                        }\n                    }\n                }\n            ],\n            [\n                /\\[/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    next: \"@options.$S2\"\n                }\n            ],\n            [\n                /}/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        extendDecl: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"type.identifier\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@extendBody.$S2\"\n                }\n            ]\n        ],\n        extendBody: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                /(?:repeated|optional|required)/,\n                \"keyword\",\n                \"@field.$S2\"\n            ],\n            [\n                /\\[/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    next: \"@options.$S2\"\n                }\n            ],\n            [\n                /}/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        options: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                /@optionName/,\n                \"annotation\"\n            ],\n            [\n                /[()]/,\n                \"annotation.brackets\"\n            ],\n            [\n                /=/,\n                \"operator\"\n            ],\n            [\n                /\\]/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        option: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@optionName/,\n                \"annotation\"\n            ],\n            [\n                /[()]/,\n                \"annotation.brackets\"\n            ],\n            [\n                /=/,\n                \"operator\",\n                \"@pop\"\n            ]\n        ],\n        oneofDecl: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"identifier\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@oneofBody.$S2\"\n                }\n            ]\n        ],\n        oneofBody: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                /(@identifier)(\\s*)(=)/,\n                [\n                    \"identifier\",\n                    \"white\",\n                    \"delimiter\"\n                ]\n            ],\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        \"@builtinTypes\": \"keyword\",\n                        \"@default\": \"type.identifier\"\n                    }\n                }\n            ],\n            [\n                /\\[/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    next: \"@options.$S2\"\n                }\n            ],\n            [\n                /}/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        reserved: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /,/,\n                \"delimiter\"\n            ],\n            [\n                /;/,\n                \"delimiter\",\n                \"@pop\"\n            ],\n            {\n                include: \"@constant\"\n            },\n            [\n                /to\\b|max\\b/,\n                \"keyword\"\n            ]\n        ],\n        map: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        \"@builtinTypes\": \"keyword\",\n                        \"@default\": \"type.identifier\"\n                    }\n                }\n            ],\n            [\n                /,/,\n                \"delimiter\"\n            ],\n            [\n                />/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    switchTo: \"identifier\"\n                }\n            ]\n        ],\n        field: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                \"group\",\n                {\n                    cases: {\n                        \"$S2==proto2\": {\n                            token: \"keyword\",\n                            switchTo: \"@groupDecl.$S2\"\n                        }\n                    }\n                }\n            ],\n            [\n                /(@identifier)(\\s*)(=)/,\n                [\n                    \"identifier\",\n                    \"white\",\n                    {\n                        token: \"delimiter\",\n                        next: \"@pop\"\n                    }\n                ]\n            ],\n            [\n                /@fullIdentifier|\\./,\n                {\n                    cases: {\n                        \"@builtinTypes\": \"keyword\",\n                        \"@default\": \"type.identifier\"\n                    }\n                }\n            ]\n        ],\n        groupDecl: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"identifier\"\n            ],\n            [\n                \"=\",\n                \"operator\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@messageBody.$S2\"\n                }\n            ],\n            {\n                include: \"@constant\"\n            }\n        ],\n        type: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"type.identifier\",\n                \"@pop\"\n            ],\n            [\n                /./,\n                \"delimiter\"\n            ]\n        ],\n        identifier: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"identifier\",\n                \"@pop\"\n            ]\n        ],\n        serviceDecl: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"identifier\"\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@serviceBody.$S2\"\n                }\n            ]\n        ],\n        serviceBody: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                /option\\b/,\n                \"keyword\",\n                \"@option.$S2\"\n            ],\n            [\n                /rpc\\b/,\n                \"keyword\",\n                \"@rpc.$S2\"\n            ],\n            [\n                /\\[/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    next: \"@options.$S2\"\n                }\n            ],\n            [\n                /}/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        rpc: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@identifier/,\n                \"identifier\"\n            ],\n            [\n                /\\(/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@request.$S2\"\n                }\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    next: \"@methodOptions.$S2\"\n                }\n            ],\n            [\n                /;/,\n                \"delimiter\",\n                \"@pop\"\n            ]\n        ],\n        request: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@messageType/,\n                {\n                    cases: {\n                        stream: {\n                            token: \"keyword\",\n                            next: \"@type.$S2\"\n                        },\n                        \"@default\": \"type.identifier\"\n                    }\n                }\n            ],\n            [\n                /\\)/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    switchTo: \"@returns.$S2\"\n                }\n            ]\n        ],\n        returns: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /returns\\b/,\n                \"keyword\"\n            ],\n            [\n                /\\(/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    switchTo: \"@response.$S2\"\n                }\n            ]\n        ],\n        response: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                /@messageType/,\n                {\n                    cases: {\n                        stream: {\n                            token: \"keyword\",\n                            next: \"@type.$S2\"\n                        },\n                        \"@default\": \"type.identifier\"\n                    }\n                }\n            ],\n            [\n                /\\)/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    switchTo: \"@rpc.$S2\"\n                }\n            ]\n        ],\n        methodOptions: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /;/,\n                \"delimiter\"\n            ],\n            [\n                \"option\",\n                \"keyword\"\n            ],\n            [\n                /@optionName/,\n                \"annotation\"\n            ],\n            [\n                /[()]/,\n                \"annotation.brackets\"\n            ],\n            [\n                /=/,\n                \"operator\"\n            ],\n            [\n                /}/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        comment: [\n            [\n                /[^\\/*]+/,\n                \"comment\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@push\"\n            ],\n            // nested comment\n            [\n                \"\\\\*/\",\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[\\/*]/,\n                \"comment\"\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        stringSingle: [\n            [\n                /[^\\\\']+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /'/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        constant: [\n            [\n                \"@boolLit\",\n                \"keyword.constant\"\n            ],\n            [\n                \"@hexLit\",\n                \"number.hex\"\n            ],\n            [\n                \"@octalLit\",\n                \"number.octal\"\n            ],\n            [\n                \"@decimalLit\",\n                \"number\"\n            ],\n            [\n                \"@floatLit\",\n                \"number.float\"\n            ],\n            [\n                /(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/,\n                \"string.invalid\"\n            ],\n            // non-terminated string\n            [\n                /\"/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@open\",\n                    next: \"@string\"\n                }\n            ],\n            [\n                /'/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@open\",\n                    next: \"@stringSingle\"\n                }\n            ],\n            [\n                /{/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@open\",\n                    next: \"@prototext\"\n                }\n            ],\n            [\n                /identifier/,\n                \"identifier\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"white\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ],\n        prototext: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@constant\"\n            },\n            [\n                /@identifier/,\n                \"identifier\"\n            ],\n            [\n                /[:;]/,\n                \"delimiter\"\n            ],\n            [\n                /}/,\n                {\n                    token: \"@brackets\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=protobuf.2f6dd999.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/protobuf/protobuf.ts\nvar namedLiterals = [\"true\", \"false\"];\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\"] }\n  ],\n  autoCloseBefore: \".,=}])>' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".proto\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords: [\n    \"syntax\",\n    \"import\",\n    \"weak\",\n    \"public\",\n    \"package\",\n    \"option\",\n    \"repeated\",\n    \"oneof\",\n    \"map\",\n    \"reserved\",\n    \"to\",\n    \"max\",\n    \"enum\",\n    \"message\",\n    \"service\",\n    \"rpc\",\n    \"stream\",\n    \"returns\",\n    \"package\",\n    \"optional\",\n    \"true\",\n    \"false\"\n  ],\n  builtinTypes: [\n    \"double\",\n    \"float\",\n    \"int32\",\n    \"int64\",\n    \"uint32\",\n    \"uint64\",\n    \"sint32\",\n    \"sint64\",\n    \"fixed32\",\n    \"fixed64\",\n    \"sfixed32\",\n    \"sfixed64\",\n    \"bool\",\n    \"string\",\n    \"bytes\"\n  ],\n  operators: [\"=\", \"+\", \"-\"],\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  identifier: /[a-zA-Z]\\w*/,\n  fullIdentifier: /@identifier(?:\\s*\\.\\s*@identifier)*/,\n  optionName: /(?:@identifier|\\(\\s*@fullIdentifier\\s*\\))(?:\\s*\\.\\s*@identifier)*/,\n  messageName: /@identifier/,\n  enumName: /@identifier/,\n  messageType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@messageName/,\n  enumType: /\\.?\\s*(?:@identifier\\s*\\.\\s*)*@enumName/,\n  floatLit: /[0-9]+\\s*\\.\\s*[0-9]*(?:@exponent)?|[0-9]+@exponent|\\.[0-9]+(?:@exponent)?/,\n  exponent: /[eE]\\s*[+-]?\\s*[0-9]+/,\n  boolLit: /true\\b|false\\b/,\n  decimalLit: /[1-9][0-9]*/,\n  octalLit: /0[0-7]*/,\n  hexLit: /0[xX][0-9a-fA-F]+/,\n  type: /double|float|int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string|bytes|@messageType|@enumType/,\n  keyType: /int32|int64|uint32|uint64|sint32|sint64|fixed32|fixed64|sfixed32|sfixed64|bool|string/,\n  tokenizer: {\n    root: [\n      { include: \"@whitespace\" },\n      [/syntax/, \"keyword\"],\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        /(\")(proto3)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto3\" }]\n      ],\n      [\n        /(\")(proto2)(\")/,\n        [\"string.quote\", \"string\", { token: \"string.quote\", switchTo: \"@topLevel.proto2\" }]\n      ],\n      [\n        // If no `syntax` provided, regarded as proto2\n        /.*?/,\n        { token: \"\", switchTo: \"@topLevel.proto2\" }\n      ]\n    ],\n    topLevel: [\n      // whitespace\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/[;.]/, \"delimiter\"],\n      [\n        /@fullIdentifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            service: { token: \"keyword\", next: \"@serviceDecl.$S2\" },\n            extend: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@extendDecl.$S2\" }\n              }\n            },\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ]\n    ],\n    enumDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@enumBody.$S2\" }]\n    ],\n    enumBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/@identifier/, \"identifier\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    messageDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }]\n    ],\n    messageBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/=/, \"operators\"],\n      [/;/, \"delimiter\"],\n      [\n        \"(map)(s*)(<)\",\n        [\"keyword\", \"white\", { token: \"@brackets\", bracket: \"@open\", next: \"@map.$S2\" }]\n      ],\n      [\n        /@identifier/,\n        {\n          cases: {\n            option: { token: \"keyword\", next: \"@option.$S2\" },\n            enum: { token: \"keyword\", next: \"@enumDecl.$S2\" },\n            message: { token: \"keyword\", next: \"@messageDecl.$S2\" },\n            oneof: { token: \"keyword\", next: \"@oneofDecl.$S2\" },\n            extensions: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@reserved.$S2\" }\n              }\n            },\n            reserved: { token: \"keyword\", next: \"@reserved.$S2\" },\n            \"(?:repeated|optional)\": { token: \"keyword\", next: \"@field.$S2\" },\n            required: {\n              cases: {\n                \"$S2==proto2\": { token: \"keyword\", next: \"@field.$S2\" }\n              }\n            },\n            \"$S2==proto3\": { token: \"@rematch\", next: \"@field.$S2\" }\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    extendDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@extendBody.$S2\" }]\n    ],\n    extendBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(?:repeated|optional|required)/, \"keyword\", \"@field.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    options: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/\\]/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    option: [\n      { include: \"@whitespace\" },\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\", \"@pop\"]\n    ],\n    oneofDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@oneofBody.$S2\" }]\n    ],\n    oneofBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", \"delimiter\"]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    reserved: [\n      { include: \"@whitespace\" },\n      [/,/, \"delimiter\"],\n      [/;/, \"delimiter\", \"@pop\"],\n      { include: \"@constant\" },\n      [/to\\b|max\\b/, \"keyword\"]\n    ],\n    map: [\n      { include: \"@whitespace\" },\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/,/, \"delimiter\"],\n      [/>/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"identifier\" }]\n    ],\n    field: [\n      { include: \"@whitespace\" },\n      [\n        \"group\",\n        {\n          cases: {\n            \"$S2==proto2\": { token: \"keyword\", switchTo: \"@groupDecl.$S2\" }\n          }\n        }\n      ],\n      [/(@identifier)(\\s*)(=)/, [\"identifier\", \"white\", { token: \"delimiter\", next: \"@pop\" }]],\n      [\n        /@fullIdentifier|\\./,\n        {\n          cases: {\n            \"@builtinTypes\": \"keyword\",\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ]\n    ],\n    groupDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [\"=\", \"operator\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@messageBody.$S2\" }],\n      { include: \"@constant\" }\n    ],\n    type: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"type.identifier\", \"@pop\"],\n      [/./, \"delimiter\"]\n    ],\n    identifier: [{ include: \"@whitespace\" }, [/@identifier/, \"identifier\", \"@pop\"]],\n    serviceDecl: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@serviceBody.$S2\" }]\n    ],\n    serviceBody: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [/option\\b/, \"keyword\", \"@option.$S2\"],\n      [/rpc\\b/, \"keyword\", \"@rpc.$S2\"],\n      [/\\[/, { token: \"@brackets\", bracket: \"@open\", next: \"@options.$S2\" }],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    rpc: [\n      { include: \"@whitespace\" },\n      [/@identifier/, \"identifier\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@request.$S2\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@methodOptions.$S2\" }],\n      [/;/, \"delimiter\", \"@pop\"]\n    ],\n    request: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@returns.$S2\" }]\n    ],\n    returns: [\n      { include: \"@whitespace\" },\n      [/returns\\b/, \"keyword\"],\n      [/\\(/, { token: \"@brackets\", bracket: \"@open\", switchTo: \"@response.$S2\" }]\n    ],\n    response: [\n      { include: \"@whitespace\" },\n      [\n        /@messageType/,\n        {\n          cases: {\n            stream: { token: \"keyword\", next: \"@type.$S2\" },\n            \"@default\": \"type.identifier\"\n          }\n        }\n      ],\n      [/\\)/, { token: \"@brackets\", bracket: \"@close\", switchTo: \"@rpc.$S2\" }]\n    ],\n    methodOptions: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/;/, \"delimiter\"],\n      [\"option\", \"keyword\"],\n      [/@optionName/, \"annotation\"],\n      [/[()]/, \"annotation.brackets\"],\n      [/=/, \"operator\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\/\\*/, \"comment\", \"@push\"],\n      // nested comment\n      [\"\\\\*/\", \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    stringSingle: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    constant: [\n      [\"@boolLit\", \"keyword.constant\"],\n      [\"@hexLit\", \"number.hex\"],\n      [\"@octalLit\", \"number.octal\"],\n      [\"@decimalLit\", \"number\"],\n      [\"@floatLit\", \"number.float\"],\n      [/(\"([^\"\\\\]|\\\\.)*|'([^'\\\\]|\\\\.)*)$/, \"string.invalid\"],\n      // non-terminated string\n      [/\"/, { token: \"string.quote\", bracket: \"@open\", next: \"@string\" }],\n      [/'/, { token: \"string.quote\", bracket: \"@open\", next: \"@stringSingle\" }],\n      [/{/, { token: \"@brackets\", bracket: \"@open\", next: \"@prototext\" }],\n      [/identifier/, \"identifier\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    prototext: [\n      { include: \"@whitespace\" },\n      { include: \"@constant\" },\n      [/@identifier/, \"identifier\"],\n      [/[:;]/, \"delimiter\"],\n      [/}/, { token: \"@brackets\", bracket: \"@close\", next: \"@pop\" }]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$b51135eefc60f827$export$c83be1687c028fc9","$b51135eefc60f827$export$789c912f57fe164c","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","defaultToken","tokenPostfix","token","symbols","keywords","builtinTypes","operators","namedLiterals","escapes","identifier","fullIdentifier","optionName","messageName","enumName","messageType","enumType","floatLit","exponent","boolLit","decimalLit","octalLit","hexLit","type","keyType","tokenizer","root","include","switchTo","topLevel","cases","option","next","enum","message","service","extend","enumDecl","bracket","enumBody","messageDecl","messageBody","oneof","extensions","reserved","required","extendDecl","extendBody","options","oneofDecl","oneofBody","map","field","groupDecl","serviceDecl","serviceBody","rpc","request","stream","returns","response","methodOptions","comment","string","stringSingle","constant","whitespace","prototext"],"version":3,"file":"protobuf.2f6dd999.js.map"}