{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+EAK+E,EAI/E,IAAI,EAAO,CACT,SAAU,CACR,YAAa,KACb,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,AACH,EACI,EAAW,CACb,aAAc,GACd,aAAc,aACd,WAAY,CAAA,EACZ,SAAU,CACR,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EAClD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,kBAAmB,EACnD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,uBAAwB,EACxD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EACnD,CACD,SAAU,CACR,QACA,QACA,OACA,QACA,OACA,MACA,OACA,MACA,OACA,WACA,KACA,KACA,MACA,KACA,SACA,SACA,OACA,OACA,OACA,MACA,QACA,OACA,SACA,OACA,cACD,CACD,aAAc,CACZ,OACA,MACA,OACA,MACA,MACA,SACA,SACA,OACA,UACA,MACA,MACA,MACD,CACD,UAAW,CACT,IACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,MACA,MACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACD,CAED,QAAS,wBAET,UAAW,CACT,KAAM,CAEJ,CACE,iBACA,CACE,MAAO,CACL,YAAa,CAAE,MAAO,YAAa,EACnC,WAAY,YACd,CACF,EACD,CAED,CAAE,QAAS,aAAc,EAEzB,CAAC,aAAc,YAAY,CAC3B,CAAC,mBAAoB,YAAY,CACjC,CACE,WACA,CACE,MAAO,CACL,aAAc,YACd,WAAY,EACd,CACF,EACD,CAED,CAAC,2BAA4B,eAAe,CAC5C,CAAC,sBAAuB,aAAa,CACrC,CAAC,MAAO,SAAS,CAEjB,CAAC,QAAS,YAAY,CAEtB,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,IAAK,SAAU,UAAU,CAE1B,CAAC,WAAY,SAAS,CACtB,CAAC,IAAK,iBAAiB,CACvB,CAAC,QAAS,SAAS,CACpB,CAED,QAAS,CACP,CAAC,WAAY,UAAU,CAEvB,CAAC,OAAQ,UAAW,OAAO,CAC3B,CAAC,OAAQ,UAAU,CACpB,CACD,OAAQ,CACN,CAAC,UAAW,SAAS,CACrB,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,SAAU,KAAM,MAAO,EAAE,CAClE,CACD,WAAY,CACV,CAAC,aAAc,QAAQ,CACvB,CAAC,OAAQ,UAAW,WAAW,CAC/B,CAAC,UAAW,UAAU,CACvB,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/pascaligo/pascaligo.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lCuKl\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $fbd4ff2f43f41e6a$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $fbd4ff2f43f41e6a$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/pascaligo/pascaligo.ts\nvar $fbd4ff2f43f41e6a$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"(*\",\n            \"*)\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ],\n        [\n            \"<\",\n            \">\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"<\",\n            close: \">\"\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"<\",\n            close: \">\"\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ]\n};\nvar $fbd4ff2f43f41e6a$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".pascaligo\",\n    ignoreCase: true,\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        },\n        {\n            open: \"<\",\n            close: \">\",\n            token: \"delimiter.angle\"\n        }\n    ],\n    keywords: [\n        \"begin\",\n        \"block\",\n        \"case\",\n        \"const\",\n        \"else\",\n        \"end\",\n        \"fail\",\n        \"for\",\n        \"from\",\n        \"function\",\n        \"if\",\n        \"is\",\n        \"nil\",\n        \"of\",\n        \"remove\",\n        \"return\",\n        \"skip\",\n        \"then\",\n        \"type\",\n        \"var\",\n        \"while\",\n        \"with\",\n        \"option\",\n        \"None\",\n        \"transaction\"\n    ],\n    typeKeywords: [\n        \"bool\",\n        \"int\",\n        \"list\",\n        \"map\",\n        \"nat\",\n        \"record\",\n        \"string\",\n        \"unit\",\n        \"address\",\n        \"map\",\n        \"mtz\",\n        \"xtz\"\n    ],\n    operators: [\n        \"=\",\n        \">\",\n        \"<\",\n        \"<=\",\n        \">=\",\n        \"<>\",\n        \":\",\n        \":=\",\n        \"and\",\n        \"mod\",\n        \"or\",\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"@\",\n        \"&\",\n        \"^\",\n        \"%\"\n    ],\n    // we include these common regular expressions\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /[a-zA-Z_][\\w]*/,\n                {\n                    cases: {\n                        \"@keywords\": {\n                            token: \"keyword.$0\"\n                        },\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // delimiters and operators\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /[<>](?!@symbols)/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"delimiter\",\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /\\d*\\.\\d+([eE][\\-+]?\\d+)?/,\n                \"number.float\"\n            ],\n            [\n                /\\$[0-9a-fA-F]{1,16}/,\n                \"number.hex\"\n            ],\n            [\n                /\\d+/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            // strings\n            [\n                /'([^'\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /'/,\n                \"string\",\n                \"@string\"\n            ],\n            // characters\n            [\n                /'[^\\\\']'/,\n                \"string\"\n            ],\n            [\n                /'/,\n                \"string.invalid\"\n            ],\n            [\n                /\\#\\d+/,\n                \"string\"\n            ]\n        ],\n        /* */ comment: [\n            [\n                /[^\\(\\*]+/,\n                \"comment\"\n            ],\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n            [\n                /\\*\\)/,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /\\(\\*/,\n                \"comment\"\n            ]\n        ],\n        string: [\n            [\n                /[^\\\\']+/,\n                \"string\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /'/,\n                {\n                    token: \"string.quote\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"white\"\n            ],\n            [\n                /\\(\\*/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=pascaligo.1166c6e5.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/pascaligo/pascaligo.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"(*\", \"*)\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"],\n    [\"<\", \">\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"<\", close: \">\" },\n    { open: \"'\", close: \"'\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".pascaligo\",\n  ignoreCase: true,\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"<\", close: \">\", token: \"delimiter.angle\" }\n  ],\n  keywords: [\n    \"begin\",\n    \"block\",\n    \"case\",\n    \"const\",\n    \"else\",\n    \"end\",\n    \"fail\",\n    \"for\",\n    \"from\",\n    \"function\",\n    \"if\",\n    \"is\",\n    \"nil\",\n    \"of\",\n    \"remove\",\n    \"return\",\n    \"skip\",\n    \"then\",\n    \"type\",\n    \"var\",\n    \"while\",\n    \"with\",\n    \"option\",\n    \"None\",\n    \"transaction\"\n  ],\n  typeKeywords: [\n    \"bool\",\n    \"int\",\n    \"list\",\n    \"map\",\n    \"nat\",\n    \"record\",\n    \"string\",\n    \"unit\",\n    \"address\",\n    \"map\",\n    \"mtz\",\n    \"xtz\"\n  ],\n  operators: [\n    \"=\",\n    \">\",\n    \"<\",\n    \"<=\",\n    \">=\",\n    \"<>\",\n    \":\",\n    \":=\",\n    \"and\",\n    \"mod\",\n    \"or\",\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"@\",\n    \"&\",\n    \"^\",\n    \"%\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // identifiers and keywords\n      [\n        /[a-zA-Z_][\\w]*/,\n        {\n          cases: {\n            \"@keywords\": { token: \"keyword.$0\" },\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/\\$[0-9a-fA-F]{1,16}/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      // strings\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/'/, \"string\", \"@string\"],\n      // characters\n      [/'[^\\\\']'/, \"string\"],\n      [/'/, \"string.invalid\"],\n      [/\\#\\d+/, \"string\"]\n    ],\n    /* */\n    comment: [\n      [/[^\\(\\*]+/, \"comment\"],\n      //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\n      [/\\*\\)/, \"comment\", \"@pop\"],\n      [/\\(\\*/, \"comment\"]\n    ],\n    string: [\n      [/[^\\\\']+/, \"string\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, { token: \"string.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\(\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$fbd4ff2f43f41e6a$export$c83be1687c028fc9","$fbd4ff2f43f41e6a$export$789c912f57fe164c","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","ignoreCase","token","keywords","typeKeywords","operators","symbols","tokenizer","root","cases","include","comment","string","bracket","next","whitespace"],"version":3,"file":"pascaligo.1166c6e5.js.map"}