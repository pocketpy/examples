{"mappings":"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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/lexon/lexon.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"ixbmZ\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $d7e420e1aa38cf82$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $d7e420e1aa38cf82$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/lexon/lexon.ts\nvar $d7e420e1aa38cf82$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"COMMENT\"\n    },\n    brackets: [\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \":\",\n            close: \".\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"`\",\n            close: \"`\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        },\n        {\n            open: \":\",\n            close: \".\"\n        }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n            end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n        }\n    }\n};\nvar $d7e420e1aa38cf82$export$789c912f57fe164c = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    // defaultToken: 'invalid',\n    tokenPostfix: \".lexon\",\n    ignoreCase: true,\n    keywords: [\n        \"lexon\",\n        \"lex\",\n        \"clause\",\n        \"terms\",\n        \"contracts\",\n        \"may\",\n        \"pay\",\n        \"pays\",\n        \"appoints\",\n        \"into\",\n        \"to\"\n    ],\n    typeKeywords: [\n        \"amount\",\n        \"person\",\n        \"key\",\n        \"time\",\n        \"date\",\n        \"asset\",\n        \"text\"\n    ],\n    operators: [\n        \"less\",\n        \"greater\",\n        \"equal\",\n        \"le\",\n        \"gt\",\n        \"or\",\n        \"and\",\n        \"add\",\n        \"added\",\n        \"subtract\",\n        \"subtracted\",\n        \"multiply\",\n        \"multiplied\",\n        \"times\",\n        \"divide\",\n        \"divided\",\n        \"is\",\n        \"be\",\n        \"certified\"\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // comment\n            [\n                /^(\\s*)(comment:?(?:\\s.*|))$/,\n                [\n                    \"\",\n                    \"comment\"\n                ]\n            ],\n            // special identifier cases\n            [\n                /\"/,\n                {\n                    token: \"identifier.quote\",\n                    bracket: \"@open\",\n                    next: \"@quoted_identifier\"\n                }\n            ],\n            [\n                \"LEX$\",\n                {\n                    token: \"keyword\",\n                    bracket: \"@open\",\n                    next: \"@identifier_until_period\"\n                }\n            ],\n            [\n                \"LEXON\",\n                {\n                    token: \"keyword\",\n                    bracket: \"@open\",\n                    next: \"@semver\"\n                }\n            ],\n            [\n                \":\",\n                {\n                    token: \"delimiter\",\n                    bracket: \"@open\",\n                    next: \"@identifier_until_period\"\n                }\n            ],\n            // identifiers and keywords\n            [\n                /[a-z_$][\\w$]*/,\n                {\n                    cases: {\n                        \"@operators\": \"operator\",\n                        \"@typeKeywords\": \"keyword.type\",\n                        \"@keywords\": \"keyword\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // delimiters and operators\n            [\n                /[{}()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /[<>](?!@symbols)/,\n                \"@brackets\"\n            ],\n            [\n                /@symbols/,\n                \"delimiter\"\n            ],\n            // numbers\n            [\n                /\\d*\\.\\d*\\.\\d*/,\n                \"number.semver\"\n            ],\n            [\n                /\\d*\\.\\d+([eE][\\-+]?\\d+)?/,\n                \"number.float\"\n            ],\n            [\n                /0[xX][0-9a-fA-F]+/,\n                \"number.hex\"\n            ],\n            [\n                /\\d+/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ]\n        ],\n        quoted_identifier: [\n            [\n                /[^\\\\\"]+/,\n                \"identifier\"\n            ],\n            [\n                /\"/,\n                {\n                    token: \"identifier.quote\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        space_identifier_until_period: [\n            [\n                \":\",\n                \"delimiter\"\n            ],\n            [\n                \" \",\n                {\n                    token: \"white\",\n                    next: \"@identifier_rest\"\n                }\n            ]\n        ],\n        identifier_until_period: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                \":\",\n                {\n                    token: \"delimiter\",\n                    next: \"@identifier_rest\"\n                }\n            ],\n            [\n                /[^\\\\.]+/,\n                \"identifier\"\n            ],\n            [\n                /\\./,\n                {\n                    token: \"delimiter\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        identifier_rest: [\n            [\n                /[^\\\\.]+/,\n                \"identifier\"\n            ],\n            [\n                /\\./,\n                {\n                    token: \"delimiter\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        semver: [\n            {\n                include: \"@whitespace\"\n            },\n            [\n                \":\",\n                \"delimiter\"\n            ],\n            [\n                /\\d*\\.\\d*\\.\\d*/,\n                {\n                    token: \"number.semver\",\n                    bracket: \"@close\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"white\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=lexon.bef10f7b.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/lexon/lexon.ts\nvar conf = {\n  comments: {\n    lineComment: \"COMMENT\"\n    // blockComment: ['COMMENT', '.'],\n  },\n  brackets: [[\"(\", \")\"]],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \":\", close: \".\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"`\", close: \"`\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \":\", close: \".\" }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#region\"),\n      end: new RegExp(\"^\\\\s*(::\\\\s*|COMMENT\\\\s+)#endregion\")\n    }\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  // defaultToken: 'invalid',\n  tokenPostfix: \".lexon\",\n  ignoreCase: true,\n  keywords: [\n    \"lexon\",\n    \"lex\",\n    \"clause\",\n    \"terms\",\n    \"contracts\",\n    \"may\",\n    \"pay\",\n    \"pays\",\n    \"appoints\",\n    \"into\",\n    \"to\"\n  ],\n  typeKeywords: [\"amount\", \"person\", \"key\", \"time\", \"date\", \"asset\", \"text\"],\n  operators: [\n    \"less\",\n    \"greater\",\n    \"equal\",\n    \"le\",\n    \"gt\",\n    \"or\",\n    \"and\",\n    \"add\",\n    \"added\",\n    \"subtract\",\n    \"subtracted\",\n    \"multiply\",\n    \"multiplied\",\n    \"times\",\n    \"divide\",\n    \"divided\",\n    \"is\",\n    \"be\",\n    \"certified\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      // comment\n      [/^(\\s*)(comment:?(?:\\s.*|))$/, [\"\", \"comment\"]],\n      // special identifier cases\n      [\n        /\"/,\n        {\n          token: \"identifier.quote\",\n          bracket: \"@open\",\n          next: \"@quoted_identifier\"\n        }\n      ],\n      [\n        \"LEX$\",\n        {\n          token: \"keyword\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      [\"LEXON\", { token: \"keyword\", bracket: \"@open\", next: \"@semver\" }],\n      [\n        \":\",\n        {\n          token: \"delimiter\",\n          bracket: \"@open\",\n          next: \"@identifier_until_period\"\n        }\n      ],\n      // identifiers and keywords\n      [\n        /[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@operators\": \"operator\",\n            \"@typeKeywords\": \"keyword.type\",\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      // whitespace\n      { include: \"@whitespace\" },\n      // delimiters and operators\n      [/[{}()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/@symbols/, \"delimiter\"],\n      // numbers\n      [/\\d*\\.\\d*\\.\\d*/, \"number.semver\"],\n      [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, \"number.float\"],\n      [/0[xX][0-9a-fA-F]+/, \"number.hex\"],\n      [/\\d+/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"]\n    ],\n    quoted_identifier: [\n      [/[^\\\\\"]+/, \"identifier\"],\n      [/\"/, { token: \"identifier.quote\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    space_identifier_until_period: [\n      [\":\", \"delimiter\"],\n      [\" \", { token: \"white\", next: \"@identifier_rest\" }]\n    ],\n    identifier_until_period: [\n      { include: \"@whitespace\" },\n      [\":\", { token: \"delimiter\", next: \"@identifier_rest\" }],\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    identifier_rest: [\n      [/[^\\\\.]+/, \"identifier\"],\n      [/\\./, { token: \"delimiter\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    semver: [\n      { include: \"@whitespace\" },\n      [\":\", \"delimiter\"],\n      [/\\d*\\.\\d*\\.\\d*/, { token: \"number.semver\", bracket: \"@close\", next: \"@pop\" }]\n    ],\n    whitespace: [[/[ \\t\\r\\n]+/, \"white\"]]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$d7e420e1aa38cf82$export$c83be1687c028fc9","$d7e420e1aa38cf82$export$789c912f57fe164c","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","tokenPostfix","ignoreCase","keywords","typeKeywords","operators","symbols","tokenizer","root","token","bracket","next","cases","include","quoted_identifier","space_identifier_until_period","identifier_until_period","identifier_rest","semver","whitespace"],"version":3,"file":"lexon.bef10f7b.js.map"}