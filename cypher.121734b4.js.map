{"mappings":"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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/cypher/cypher.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fgxdp\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $b1d21d80945f76eb$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $b1d21d80945f76eb$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/cypher/cypher.ts\nvar $b1d21d80945f76eb$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        },\n        {\n            open: \"`\",\n            close: \"`\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        },\n        {\n            open: \"`\",\n            close: \"`\"\n        }\n    ]\n};\nvar $b1d21d80945f76eb$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: `.cypher`,\n    ignoreCase: true,\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.bracket\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        }\n    ],\n    keywords: [\n        \"ALL\",\n        \"AND\",\n        \"AS\",\n        \"ASC\",\n        \"ASCENDING\",\n        \"BY\",\n        \"CALL\",\n        \"CASE\",\n        \"CONTAINS\",\n        \"CREATE\",\n        \"DELETE\",\n        \"DESC\",\n        \"DESCENDING\",\n        \"DETACH\",\n        \"DISTINCT\",\n        \"ELSE\",\n        \"END\",\n        \"ENDS\",\n        \"EXISTS\",\n        \"IN\",\n        \"IS\",\n        \"LIMIT\",\n        \"MANDATORY\",\n        \"MATCH\",\n        \"MERGE\",\n        \"NOT\",\n        \"ON\",\n        \"ON\",\n        \"OPTIONAL\",\n        \"OR\",\n        \"ORDER\",\n        \"REMOVE\",\n        \"RETURN\",\n        \"SET\",\n        \"SKIP\",\n        \"STARTS\",\n        \"THEN\",\n        \"UNION\",\n        \"UNWIND\",\n        \"WHEN\",\n        \"WHERE\",\n        \"WITH\",\n        \"XOR\",\n        \"YIELD\"\n    ],\n    builtinLiterals: [\n        \"true\",\n        \"TRUE\",\n        \"false\",\n        \"FALSE\",\n        \"null\",\n        \"NULL\"\n    ],\n    builtinFunctions: [\n        \"abs\",\n        \"acos\",\n        \"asin\",\n        \"atan\",\n        \"atan2\",\n        \"avg\",\n        \"ceil\",\n        \"coalesce\",\n        \"collect\",\n        \"cos\",\n        \"cot\",\n        \"count\",\n        \"degrees\",\n        \"e\",\n        \"endNode\",\n        \"exists\",\n        \"exp\",\n        \"floor\",\n        \"head\",\n        \"id\",\n        \"keys\",\n        \"labels\",\n        \"last\",\n        \"left\",\n        \"length\",\n        \"log\",\n        \"log10\",\n        \"lTrim\",\n        \"max\",\n        \"min\",\n        \"nodes\",\n        \"percentileCont\",\n        \"percentileDisc\",\n        \"pi\",\n        \"properties\",\n        \"radians\",\n        \"rand\",\n        \"range\",\n        \"relationships\",\n        \"replace\",\n        \"reverse\",\n        \"right\",\n        \"round\",\n        \"rTrim\",\n        \"sign\",\n        \"sin\",\n        \"size\",\n        \"split\",\n        \"sqrt\",\n        \"startNode\",\n        \"stDev\",\n        \"stDevP\",\n        \"substring\",\n        \"sum\",\n        \"tail\",\n        \"tan\",\n        \"timestamp\",\n        \"toBoolean\",\n        \"toFloat\",\n        \"toInteger\",\n        \"toLower\",\n        \"toString\",\n        \"toUpper\",\n        \"trim\",\n        \"type\"\n    ],\n    operators: [\n        // Math operators\n        \"+\",\n        \"-\",\n        \"*\",\n        \"/\",\n        \"%\",\n        \"^\",\n        // Comparison operators\n        \"=\",\n        \"<>\",\n        \"<\",\n        \">\",\n        \"<=\",\n        \">=\",\n        // Pattern operators\n        \"->\",\n        \"<-\",\n        \"-->\",\n        \"<--\"\n    ],\n    escapes: /\\\\(?:[tbnrf\\\\\"'`]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    digits: /\\d+/,\n    octaldigits: /[0-7]+/,\n    hexdigits: /[0-9a-fA-F]+/,\n    tokenizer: {\n        root: [\n            [\n                /[{}[\\]()]/,\n                \"@brackets\"\n            ],\n            {\n                include: \"common\"\n            }\n        ],\n        common: [\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@numbers\"\n            },\n            {\n                include: \"@strings\"\n            },\n            // Cypher labels on nodes/relationships, e.g. (n:NodeLabel)-[e:RelationshipLabel]\n            [\n                /:[a-zA-Z_][\\w]*/,\n                \"type.identifier\"\n            ],\n            [\n                /[a-zA-Z_][\\w]*(?=\\()/,\n                {\n                    cases: {\n                        \"@builtinFunctions\": \"predefined.function\"\n                    }\n                }\n            ],\n            [\n                /[a-zA-Z_$][\\w$]*/,\n                {\n                    cases: {\n                        \"@keywords\": \"keyword\",\n                        \"@builtinLiterals\": \"predefined.literal\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            [\n                /`/,\n                \"identifier.escape\",\n                \"@identifierBacktick\"\n            ],\n            // delimiter and operator after number because of `.\\d` floats and `:` in labels\n            [\n                /[;,.:|]/,\n                \"delimiter\"\n            ],\n            [\n                /[<>=%+\\-*/^]+/,\n                {\n                    cases: {\n                        \"@operators\": \"delimiter\",\n                        \"@default\": \"\"\n                    }\n                }\n            ]\n        ],\n        numbers: [\n            [\n                /-?(@digits)[eE](-?(@digits))?/,\n                \"number.float\"\n            ],\n            [\n                /-?(@digits)?\\.(@digits)([eE]-?(@digits))?/,\n                \"number.float\"\n            ],\n            [\n                /-?0x(@hexdigits)/,\n                \"number.hex\"\n            ],\n            [\n                /-?0(@octaldigits)/,\n                \"number.octal\"\n            ],\n            [\n                /-?(@digits)/,\n                \"number\"\n            ]\n        ],\n        strings: [\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /'([^'\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /\"/,\n                \"string\",\n                \"@stringDouble\"\n            ],\n            [\n                /'/,\n                \"string\",\n                \"@stringSingle\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"white\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ],\n        comment: [\n            [\n                /\\/\\/.*/,\n                \"comment\"\n            ],\n            [\n                /[^/*]+/,\n                \"comment\"\n            ],\n            [\n                /\\*\\//,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[/*]/,\n                \"comment\"\n            ]\n        ],\n        stringDouble: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string\"\n            ],\n            [\n                /\\\\./,\n                \"string.invalid\"\n            ],\n            [\n                /\"/,\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        stringSingle: [\n            [\n                /[^\\\\']+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string\"\n            ],\n            [\n                /\\\\./,\n                \"string.invalid\"\n            ],\n            [\n                /'/,\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        identifierBacktick: [\n            [\n                /[^\\\\`]+/,\n                \"identifier.escape\"\n            ],\n            [\n                /@escapes/,\n                \"identifier.escape\"\n            ],\n            [\n                /\\\\./,\n                \"identifier.escape.invalid\"\n            ],\n            [\n                /`/,\n                \"identifier.escape\",\n                \"@pop\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=cypher.121734b4.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/cypher/cypher.ts\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \"`\", close: \"`\" }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" },\n    { open: \"`\", close: \"`\" }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: `.cypher`,\n  ignoreCase: true,\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.bracket\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  keywords: [\n    \"ALL\",\n    \"AND\",\n    \"AS\",\n    \"ASC\",\n    \"ASCENDING\",\n    \"BY\",\n    \"CALL\",\n    \"CASE\",\n    \"CONTAINS\",\n    \"CREATE\",\n    \"DELETE\",\n    \"DESC\",\n    \"DESCENDING\",\n    \"DETACH\",\n    \"DISTINCT\",\n    \"ELSE\",\n    \"END\",\n    \"ENDS\",\n    \"EXISTS\",\n    \"IN\",\n    \"IS\",\n    \"LIMIT\",\n    \"MANDATORY\",\n    \"MATCH\",\n    \"MERGE\",\n    \"NOT\",\n    \"ON\",\n    \"ON\",\n    \"OPTIONAL\",\n    \"OR\",\n    \"ORDER\",\n    \"REMOVE\",\n    \"RETURN\",\n    \"SET\",\n    \"SKIP\",\n    \"STARTS\",\n    \"THEN\",\n    \"UNION\",\n    \"UNWIND\",\n    \"WHEN\",\n    \"WHERE\",\n    \"WITH\",\n    \"XOR\",\n    \"YIELD\"\n  ],\n  builtinLiterals: [\"true\", \"TRUE\", \"false\", \"FALSE\", \"null\", \"NULL\"],\n  builtinFunctions: [\n    \"abs\",\n    \"acos\",\n    \"asin\",\n    \"atan\",\n    \"atan2\",\n    \"avg\",\n    \"ceil\",\n    \"coalesce\",\n    \"collect\",\n    \"cos\",\n    \"cot\",\n    \"count\",\n    \"degrees\",\n    \"e\",\n    \"endNode\",\n    \"exists\",\n    \"exp\",\n    \"floor\",\n    \"head\",\n    \"id\",\n    \"keys\",\n    \"labels\",\n    \"last\",\n    \"left\",\n    \"length\",\n    \"log\",\n    \"log10\",\n    \"lTrim\",\n    \"max\",\n    \"min\",\n    \"nodes\",\n    \"percentileCont\",\n    \"percentileDisc\",\n    \"pi\",\n    \"properties\",\n    \"radians\",\n    \"rand\",\n    \"range\",\n    \"relationships\",\n    \"replace\",\n    \"reverse\",\n    \"right\",\n    \"round\",\n    \"rTrim\",\n    \"sign\",\n    \"sin\",\n    \"size\",\n    \"split\",\n    \"sqrt\",\n    \"startNode\",\n    \"stDev\",\n    \"stDevP\",\n    \"substring\",\n    \"sum\",\n    \"tail\",\n    \"tan\",\n    \"timestamp\",\n    \"toBoolean\",\n    \"toFloat\",\n    \"toInteger\",\n    \"toLower\",\n    \"toString\",\n    \"toUpper\",\n    \"trim\",\n    \"type\"\n  ],\n  operators: [\n    // Math operators\n    \"+\",\n    \"-\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"^\",\n    // Comparison operators\n    \"=\",\n    \"<>\",\n    \"<\",\n    \">\",\n    \"<=\",\n    \">=\",\n    // Pattern operators\n    \"->\",\n    \"<-\",\n    \"-->\",\n    \"<--\"\n  ],\n  escapes: /\\\\(?:[tbnrf\\\\\"'`]|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+/,\n  octaldigits: /[0-7]+/,\n  hexdigits: /[0-9a-fA-F]+/,\n  tokenizer: {\n    root: [[/[{}[\\]()]/, \"@brackets\"], { include: \"common\" }],\n    common: [\n      { include: \"@whitespace\" },\n      { include: \"@numbers\" },\n      { include: \"@strings\" },\n      // Cypher labels on nodes/relationships, e.g. (n:NodeLabel)-[e:RelationshipLabel]\n      [/:[a-zA-Z_][\\w]*/, \"type.identifier\"],\n      [\n        /[a-zA-Z_][\\w]*(?=\\()/,\n        {\n          cases: {\n            \"@builtinFunctions\": \"predefined.function\"\n          }\n        }\n      ],\n      [\n        /[a-zA-Z_$][\\w$]*/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@builtinLiterals\": \"predefined.literal\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/`/, \"identifier.escape\", \"@identifierBacktick\"],\n      // delimiter and operator after number because of `.\\d` floats and `:` in labels\n      [/[;,.:|]/, \"delimiter\"],\n      [\n        /[<>=%+\\-*/^]+/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ]\n    ],\n    numbers: [\n      [/-?(@digits)[eE](-?(@digits))?/, \"number.float\"],\n      [/-?(@digits)?\\.(@digits)([eE]-?(@digits))?/, \"number.float\"],\n      [/-?0x(@hexdigits)/, \"number.hex\"],\n      [/-?0(@octaldigits)/, \"number.octal\"],\n      [/-?(@digits)/, \"number\"]\n    ],\n    strings: [\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/\"/, \"string\", \"@stringDouble\"],\n      [/'/, \"string\", \"@stringSingle\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/\\/\\/.*/, \"comment\"],\n      [/[^/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[/*]/, \"comment\"]\n    ],\n    stringDouble: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string\"],\n      [/\\\\./, \"string.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    stringSingle: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string\"],\n      [/\\\\./, \"string.invalid\"],\n      [/'/, \"string\", \"@pop\"]\n    ],\n    identifierBacktick: [\n      [/[^\\\\`]+/, \"identifier.escape\"],\n      [/@escapes/, \"identifier.escape\"],\n      [/\\\\./, \"identifier.escape.invalid\"],\n      [/`/, \"identifier.escape\", \"@pop\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$b1d21d80945f76eb$export$c83be1687c028fc9","$b1d21d80945f76eb$export$789c912f57fe164c","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","tokenPostfix","ignoreCase","token","keywords","builtinLiterals","builtinFunctions","operators","escapes","digits","octaldigits","hexdigits","tokenizer","root","include","common","cases","numbers","strings","whitespace","comment","stringDouble","stringSingle","identifierBacktick"],"version":3,"file":"cypher.121734b4.js.map"}