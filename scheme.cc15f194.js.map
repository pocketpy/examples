{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,A,C,E,A,A,W,iB,C,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+EAK+E,EAI/E,IAAI,EAAO,CACT,SAAU,CACR,YAAa,IACb,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACzB,AACH,EACI,EAAW,CACb,aAAc,GACd,WAAY,CAAA,EACZ,aAAc,UACd,SAAU,CACR,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,uBAAwB,EACxD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,iBAAkB,EAClD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,kBAAmB,EACpD,CACD,SAAU,CACR,OACA,KACA,MACA,OACA,KACA,OACA,OACA,OACA,MACA,MACA,OACA,SACA,UACA,eACA,SACA,OACA,QACA,OACA,SACA,OACA,QACA,UACA,OACD,CACD,UAAW,CAAC,KAAM,KAAK,CACvB,UAAW,CAAC,MAAO,OAAQ,SAAU,MAAO,KAAM,MAAO,QAAQ,CACjE,UAAW,CACT,KAAM,CACJ,CAAC,wBAAyB,aAAa,CACvC,CAAC,2CAA4C,eAAe,CAC5D,CACE,yEACA,CAAC,UAAW,QAAS,WAAW,CACjC,CACD,CAAE,QAAS,aAAc,EACzB,CAAE,QAAS,UAAW,EACtB,CACE,kCACA,CACE,MAAO,CACL,YAAa,UACb,aAAc,WACd,aAAc,YACd,WAAY,YACd,CACF,EACD,CACF,CACD,QAAS,CACP,CAAC,UAAW,UAAU,CACtB,CAAC,MAAO,UAAW,QAAQ,CAC3B,CAAC,MAAO,UAAW,OAAO,CAC1B,CAAC,QAAS,UAAU,CACrB,CACD,WAAY,CACV,CAAC,aAAc,QAAQ,CACvB,CAAC,MAAO,UAAW,WAAW,CAC9B,CAAC,OAAQ,UAAU,CACpB,CACD,QAAS,CACP,CAAC,KAAM,SAAU,UAAU,CAC3B,CAAC,SAAU,SAAU,mBAAmB,CACzC,CACD,gBAAiB,CACf,CAAC,WAAY,SAAU,UAAU,CACjC,CAAC,UAAW,SAAS,CACrB,CAAC,MAAO,gBAAgB,CACxB,CAAC,IAAK,SAAU,UAAU,CAC1B,CAAC,MAAO,SAAS,CAClB,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/scheme/scheme.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"4sPus\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $3401b7dd2aa0abca$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $3401b7dd2aa0abca$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/scheme/scheme.ts\nvar $3401b7dd2aa0abca$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \";\",\n        blockComment: [\n            \"#|\",\n            \"|#\"\n        ]\n    },\n    brackets: [\n        [\n            \"(\",\n            \")\"\n        ],\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        }\n    ]\n};\nvar $3401b7dd2aa0abca$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    ignoreCase: true,\n    tokenPostfix: \".scheme\",\n    brackets: [\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        },\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        }\n    ],\n    keywords: [\n        \"case\",\n        \"do\",\n        \"let\",\n        \"loop\",\n        \"if\",\n        \"else\",\n        \"when\",\n        \"cons\",\n        \"car\",\n        \"cdr\",\n        \"cond\",\n        \"lambda\",\n        \"lambda*\",\n        \"syntax-rules\",\n        \"format\",\n        \"set!\",\n        \"quote\",\n        \"eval\",\n        \"append\",\n        \"list\",\n        \"list?\",\n        \"member?\",\n        \"load\"\n    ],\n    constants: [\n        \"#t\",\n        \"#f\"\n    ],\n    operators: [\n        \"eq?\",\n        \"eqv?\",\n        \"equal?\",\n        \"and\",\n        \"or\",\n        \"not\",\n        \"null?\"\n    ],\n    tokenizer: {\n        root: [\n            [\n                /#[xXoObB][0-9a-fA-F]+/,\n                \"number.hex\"\n            ],\n            [\n                /[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/,\n                \"number.float\"\n            ],\n            [\n                /(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n                [\n                    \"keyword\",\n                    \"white\",\n                    \"variable\"\n                ]\n            ],\n            {\n                include: \"@whitespace\"\n            },\n            {\n                include: \"@strings\"\n            },\n            [\n                /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n                {\n                    cases: {\n                        \"@keywords\": \"keyword\",\n                        \"@constants\": \"constant\",\n                        \"@operators\": \"operators\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ]\n        ],\n        comment: [\n            [\n                /[^\\|#]+/,\n                \"comment\"\n            ],\n            [\n                /#\\|/,\n                \"comment\",\n                \"@push\"\n            ],\n            [\n                /\\|#/,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[\\|#]/,\n                \"comment\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"white\"\n            ],\n            [\n                /#\\|/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /;.*$/,\n                \"comment\"\n            ]\n        ],\n        strings: [\n            [\n                /\"$/,\n                \"string\",\n                \"@popall\"\n            ],\n            [\n                /\"(?=.)/,\n                \"string\",\n                \"@multiLineString\"\n            ]\n        ],\n        multiLineString: [\n            [\n                /[^\\\\\"]+$/,\n                \"string\",\n                \"@popall\"\n            ],\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape\"\n            ],\n            [\n                /\"/,\n                \"string\",\n                \"@popall\"\n            ],\n            [\n                /\\\\$/,\n                \"string\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=scheme.cc15f194.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/scheme/scheme.ts\nvar conf = {\n  comments: {\n    lineComment: \";\",\n    blockComment: [\"#|\", \"|#\"]\n  },\n  brackets: [\n    [\"(\", \")\"],\n    [\"{\", \"}\"],\n    [\"[\", \"]\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  ignoreCase: true,\n  tokenPostfix: \".scheme\",\n  brackets: [\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" },\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" }\n  ],\n  keywords: [\n    \"case\",\n    \"do\",\n    \"let\",\n    \"loop\",\n    \"if\",\n    \"else\",\n    \"when\",\n    \"cons\",\n    \"car\",\n    \"cdr\",\n    \"cond\",\n    \"lambda\",\n    \"lambda*\",\n    \"syntax-rules\",\n    \"format\",\n    \"set!\",\n    \"quote\",\n    \"eval\",\n    \"append\",\n    \"list\",\n    \"list?\",\n    \"member?\",\n    \"load\"\n  ],\n  constants: [\"#t\", \"#f\"],\n  operators: [\"eq?\", \"eqv?\", \"equal?\", \"and\", \"or\", \"not\", \"null?\"],\n  tokenizer: {\n    root: [\n      [/#[xXoObB][0-9a-fA-F]+/, \"number.hex\"],\n      [/[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?/, \"number.float\"],\n      [\n        /(?:\\b(?:(define|define-syntax|define-macro))\\b)(\\s+)((?:\\w|\\-|\\!|\\?)*)/,\n        [\"keyword\", \"white\", \"variable\"]\n      ],\n      { include: \"@whitespace\" },\n      { include: \"@strings\" },\n      [\n        /[a-zA-Z_#][a-zA-Z0-9_\\-\\?\\!\\*]*/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@constants\": \"constant\",\n            \"@operators\": \"operators\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ]\n    ],\n    comment: [\n      [/[^\\|#]+/, \"comment\"],\n      [/#\\|/, \"comment\", \"@push\"],\n      [/\\|#/, \"comment\", \"@pop\"],\n      [/[\\|#]/, \"comment\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"white\"],\n      [/#\\|/, \"comment\", \"@comment\"],\n      [/;.*$/, \"comment\"]\n    ],\n    strings: [\n      [/\"$/, \"string\", \"@popall\"],\n      [/\"(?=.)/, \"string\", \"@multiLineString\"]\n    ],\n    multiLineString: [\n      [/[^\\\\\"]+$/, \"string\", \"@popall\"],\n      [/[^\\\\\"]+/, \"string\"],\n      [/\\\\./, \"string.escape\"],\n      [/\"/, \"string\", \"@popall\"],\n      [/\\\\$/, \"string\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","$3401b7dd2aa0abca$export$c83be1687c028fc9","$3401b7dd2aa0abca$export$789c912f57fe164c","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","defaultToken","ignoreCase","tokenPostfix","token","keywords","constants","operators","tokenizer","root","include","cases","comment","whitespace","strings","multiLineString"],"version":3,"file":"scheme.cc15f194.js.map"}