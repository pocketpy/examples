{"mappings":"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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bfCnt\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $830edd6bcaff03ee$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $830edd6bcaff03ee$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ // src/basic-languages/bicep/bicep.ts\nvar $830edd6bcaff03ee$var$bounded = (text)=>`\\\\b${text}\\\\b`;\nvar $830edd6bcaff03ee$var$identifierStart = \"[_a-zA-Z]\";\nvar $830edd6bcaff03ee$var$identifierContinue = \"[_a-zA-Z0-9]\";\nvar $830edd6bcaff03ee$var$identifier = $830edd6bcaff03ee$var$bounded(`${$830edd6bcaff03ee$var$identifierStart}${$830edd6bcaff03ee$var$identifierContinue}*`);\nvar $830edd6bcaff03ee$var$keywords = [\n    \"targetScope\",\n    \"resource\",\n    \"module\",\n    \"param\",\n    \"var\",\n    \"output\",\n    \"for\",\n    \"in\",\n    \"if\",\n    \"existing\"\n];\nvar $830edd6bcaff03ee$var$namedLiterals = [\n    \"true\",\n    \"false\",\n    \"null\"\n];\nvar $830edd6bcaff03ee$var$nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar $830edd6bcaff03ee$var$numericLiteral = `[0-9]+`;\nvar $830edd6bcaff03ee$export$c83be1687c028fc9 = {\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    surroundingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        },\n        {\n            open: \"'''\",\n            close: \"'''\"\n        }\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"'''\",\n            close: \"'''\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        }\n    ],\n    autoCloseBefore: \":.,=}])' \\n\t\",\n    indentationRules: {\n        increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n        decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n    }\n};\nvar $830edd6bcaff03ee$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \".bicep\",\n    brackets: [\n        {\n            open: \"{\",\n            close: \"}\",\n            token: \"delimiter.curly\"\n        },\n        {\n            open: \"[\",\n            close: \"]\",\n            token: \"delimiter.square\"\n        },\n        {\n            open: \"(\",\n            close: \")\",\n            token: \"delimiter.parenthesis\"\n        }\n    ],\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\n    keywords: $830edd6bcaff03ee$var$keywords,\n    namedLiterals: $830edd6bcaff03ee$var$namedLiterals,\n    escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n    tokenizer: {\n        root: [\n            {\n                include: \"@expression\"\n            },\n            {\n                include: \"@whitespace\"\n            }\n        ],\n        stringVerbatim: [\n            {\n                regex: `(|'|'')[^']`,\n                action: {\n                    token: \"string\"\n                }\n            },\n            {\n                regex: `'''`,\n                action: {\n                    token: \"string.quote\",\n                    next: \"@pop\"\n                }\n            }\n        ],\n        stringLiteral: [\n            {\n                regex: `\\\\\\${`,\n                action: {\n                    token: \"delimiter.bracket\",\n                    next: \"@bracketCounting\"\n                }\n            },\n            {\n                regex: `[^\\\\\\\\'$]+`,\n                action: {\n                    token: \"string\"\n                }\n            },\n            {\n                regex: \"@escapes\",\n                action: {\n                    token: \"string.escape\"\n                }\n            },\n            {\n                regex: `\\\\\\\\.`,\n                action: {\n                    token: \"string.escape.invalid\"\n                }\n            },\n            {\n                regex: `'`,\n                action: {\n                    token: \"string\",\n                    next: \"@pop\"\n                }\n            }\n        ],\n        bracketCounting: [\n            {\n                regex: `{`,\n                action: {\n                    token: \"delimiter.bracket\",\n                    next: \"@bracketCounting\"\n                }\n            },\n            {\n                regex: `}`,\n                action: {\n                    token: \"delimiter.bracket\",\n                    next: \"@pop\"\n                }\n            },\n            {\n                include: \"expression\"\n            }\n        ],\n        comment: [\n            {\n                regex: `[^\\\\*]+`,\n                action: {\n                    token: \"comment\"\n                }\n            },\n            {\n                regex: `\\\\*\\\\/`,\n                action: {\n                    token: \"comment\",\n                    next: \"@pop\"\n                }\n            },\n            {\n                regex: `[\\\\/*]`,\n                action: {\n                    token: \"comment\"\n                }\n            }\n        ],\n        whitespace: [\n            {\n                regex: $830edd6bcaff03ee$var$nonCommentWs\n            },\n            {\n                regex: `\\\\/\\\\*`,\n                action: {\n                    token: \"comment\",\n                    next: \"@comment\"\n                }\n            },\n            {\n                regex: `\\\\/\\\\/.*$`,\n                action: {\n                    token: \"comment\"\n                }\n            }\n        ],\n        expression: [\n            {\n                regex: `'''`,\n                action: {\n                    token: \"string.quote\",\n                    next: \"@stringVerbatim\"\n                }\n            },\n            {\n                regex: `'`,\n                action: {\n                    token: \"string.quote\",\n                    next: \"@stringLiteral\"\n                }\n            },\n            {\n                regex: $830edd6bcaff03ee$var$numericLiteral,\n                action: {\n                    token: \"number\"\n                }\n            },\n            {\n                regex: $830edd6bcaff03ee$var$identifier,\n                action: {\n                    cases: {\n                        \"@keywords\": {\n                            token: \"keyword\"\n                        },\n                        \"@namedLiterals\": {\n                            token: \"keyword\"\n                        },\n                        \"@default\": {\n                            token: \"identifier\"\n                        }\n                    }\n                }\n            }\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=bicep.255aa51b.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\n\n// src/basic-languages/bicep/bicep.ts\nvar bounded = (text) => `\\\\b${text}\\\\b`;\nvar identifierStart = \"[_a-zA-Z]\";\nvar identifierContinue = \"[_a-zA-Z0-9]\";\nvar identifier = bounded(`${identifierStart}${identifierContinue}*`);\nvar keywords = [\n  \"targetScope\",\n  \"resource\",\n  \"module\",\n  \"param\",\n  \"var\",\n  \"output\",\n  \"for\",\n  \"in\",\n  \"if\",\n  \"existing\"\n];\nvar namedLiterals = [\"true\", \"false\", \"null\"];\nvar nonCommentWs = `[ \\\\t\\\\r\\\\n]`;\nvar numericLiteral = `[0-9]+`;\nvar conf = {\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  surroundingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\" },\n    { open: \"'''\", close: \"'''\" }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"'''\", close: \"'''\", notIn: [\"string\", \"comment\"] }\n  ],\n  autoCloseBefore: \":.,=}])' \\n\t\",\n  indentationRules: {\n    increaseIndentPattern: new RegExp(\"^((?!\\\\/\\\\/).)*(\\\\{[^}\\\"'`]*|\\\\([^)\\\"'`]*|\\\\[[^\\\\]\\\"'`]*)$\"),\n    decreaseIndentPattern: new RegExp(\"^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$\")\n  }\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \".bicep\",\n  brackets: [\n    { open: \"{\", close: \"}\", token: \"delimiter.curly\" },\n    { open: \"[\", close: \"]\", token: \"delimiter.square\" },\n    { open: \"(\", close: \")\", token: \"delimiter.parenthesis\" }\n  ],\n  symbols: /[=><!~?:&|+\\-*/^%]+/,\n  keywords,\n  namedLiterals,\n  escapes: `\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\\\${)`,\n  tokenizer: {\n    root: [{ include: \"@expression\" }, { include: \"@whitespace\" }],\n    stringVerbatim: [\n      { regex: `(|'|'')[^']`, action: { token: \"string\" } },\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@pop\" } }\n    ],\n    stringLiteral: [\n      { regex: `\\\\\\${`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `[^\\\\\\\\'$]+`, action: { token: \"string\" } },\n      { regex: \"@escapes\", action: { token: \"string.escape\" } },\n      { regex: `\\\\\\\\.`, action: { token: \"string.escape.invalid\" } },\n      { regex: `'`, action: { token: \"string\", next: \"@pop\" } }\n    ],\n    bracketCounting: [\n      { regex: `{`, action: { token: \"delimiter.bracket\", next: \"@bracketCounting\" } },\n      { regex: `}`, action: { token: \"delimiter.bracket\", next: \"@pop\" } },\n      { include: \"expression\" }\n    ],\n    comment: [\n      { regex: `[^\\\\*]+`, action: { token: \"comment\" } },\n      { regex: `\\\\*\\\\/`, action: { token: \"comment\", next: \"@pop\" } },\n      { regex: `[\\\\/*]`, action: { token: \"comment\" } }\n    ],\n    whitespace: [\n      { regex: nonCommentWs },\n      { regex: `\\\\/\\\\*`, action: { token: \"comment\", next: \"@comment\" } },\n      { regex: `\\\\/\\\\/.*$`, action: { token: \"comment\" } }\n    ],\n    expression: [\n      { regex: `'''`, action: { token: \"string.quote\", next: \"@stringVerbatim\" } },\n      { regex: `'`, action: { token: \"string.quote\", next: \"@stringLiteral\" } },\n      { regex: numericLiteral, action: { token: \"number\" } },\n      {\n        regex: identifier,\n        action: {\n          cases: {\n            \"@keywords\": { token: \"keyword\" },\n            \"@namedLiterals\": { token: \"keyword\" },\n            \"@default\": { token: \"identifier\" }\n          }\n        }\n      }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","register","module","exports","text","$830edd6bcaff03ee$export$c83be1687c028fc9","$830edd6bcaff03ee$export$789c912f57fe164c","$830edd6bcaff03ee$var$identifier","$830edd6bcaff03ee$var$nonCommentWs","comments","lineComment","blockComment","brackets","surroundingPairs","open","close","autoClosingPairs","notIn","autoCloseBefore","indentationRules","increaseIndentPattern","RegExp","decreaseIndentPattern","defaultToken","tokenPostfix","token","symbols","keywords","namedLiterals","escapes","tokenizer","root","include","stringVerbatim","regex","action","next","stringLiteral","bracketCounting","comment","whitespace","expression","cases"],"version":3,"file":"bicep.255aa51b.js.map"}