{"mappings":"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","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/handlebars/handlebars.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"5R0av\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $4432086fa2051554$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $4432086fa2051554$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ \nvar $cDseA = parcelRequire(\"cDseA\");\nvar $4432086fa2051554$var$__defProp = Object.defineProperty;\nvar $4432086fa2051554$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar $4432086fa2051554$var$__getOwnPropNames = Object.getOwnPropertyNames;\nvar $4432086fa2051554$var$__hasOwnProp = Object.prototype.hasOwnProperty;\nvar $4432086fa2051554$var$__copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of $4432086fa2051554$var$__getOwnPropNames(from))if (!$4432086fa2051554$var$__hasOwnProp.call(to, key) && key !== except) $4432086fa2051554$var$__defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = $4432086fa2051554$var$__getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar $4432086fa2051554$var$__reExport = (target, mod, secondTarget)=>($4432086fa2051554$var$__copyProps(target, mod, \"default\"), secondTarget && $4432086fa2051554$var$__copyProps(secondTarget, mod, \"default\"));\n// src/fillers/monaco-editor-core.ts\nvar $4432086fa2051554$var$monaco_editor_core_exports = {};\n$4432086fa2051554$var$__reExport($4432086fa2051554$var$monaco_editor_core_exports, $cDseA);\n// src/basic-languages/handlebars/handlebars.ts\nvar $4432086fa2051554$var$EMPTY_ELEMENTS = [\n    \"area\",\n    \"base\",\n    \"br\",\n    \"col\",\n    \"embed\",\n    \"hr\",\n    \"img\",\n    \"input\",\n    \"keygen\",\n    \"link\",\n    \"menuitem\",\n    \"meta\",\n    \"param\",\n    \"source\",\n    \"track\",\n    \"wbr\"\n];\nvar $4432086fa2051554$export$c83be1687c028fc9 = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n    comments: {\n        blockComment: [\n            \"{{!--\",\n            \"--}}\"\n        ]\n    },\n    brackets: [\n        [\n            \"<!--\",\n            \"-->\"\n        ],\n        [\n            \"<\",\n            \">\"\n        ],\n        [\n            \"{{\",\n            \"}}\"\n        ],\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    surroundingPairs: [\n        {\n            open: \"<\",\n            close: \">\"\n        },\n        {\n            open: '\"',\n            close: '\"'\n        },\n        {\n            open: \"'\",\n            close: \"'\"\n        }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(`<(?!(?:${$4432086fa2051554$var$EMPTY_ELEMENTS.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, \"i\"),\n            afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n            action: {\n                indentAction: $4432086fa2051554$var$monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n            }\n        },\n        {\n            beforeText: new RegExp(`<(?!(?:${$4432086fa2051554$var$EMPTY_ELEMENTS.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`, \"i\"),\n            action: {\n                indentAction: $4432086fa2051554$var$monaco_editor_core_exports.languages.IndentAction.Indent\n            }\n        }\n    ]\n};\nvar $4432086fa2051554$export$789c912f57fe164c = {\n    defaultToken: \"\",\n    tokenPostfix: \"\",\n    // ignoreCase: true,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [\n                /\\{\\{!--/,\n                \"comment.block.start.handlebars\",\n                \"@commentBlock\"\n            ],\n            [\n                /\\{\\{!/,\n                \"comment.start.handlebars\",\n                \"@comment\"\n            ],\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.root\"\n                }\n            ],\n            [\n                /<!DOCTYPE/,\n                \"metatag.html\",\n                \"@doctype\"\n            ],\n            [\n                /<!--/,\n                \"comment.html\",\n                \"@commentHtml\"\n            ],\n            [\n                /(<)(\\w+)(\\/>)/,\n                [\n                    \"delimiter.html\",\n                    \"tag.html\",\n                    \"delimiter.html\"\n                ]\n            ],\n            [\n                /(<)(script)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@script\"\n                    }\n                ]\n            ],\n            [\n                /(<)(style)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@style\"\n                    }\n                ]\n            ],\n            [\n                /(<)([:\\w]+)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@otherTag\"\n                    }\n                ]\n            ],\n            [\n                /(<\\/)(\\w+)/,\n                [\n                    \"delimiter.html\",\n                    {\n                        token: \"tag.html\",\n                        next: \"@otherTag\"\n                    }\n                ]\n            ],\n            [\n                /</,\n                \"delimiter.html\"\n            ],\n            [\n                /\\{/,\n                \"delimiter.html\"\n            ],\n            [\n                /[^<{]+/\n            ]\n        ],\n        doctype: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.comment\"\n                }\n            ],\n            [\n                /[^>]+/,\n                \"metatag.content.html\"\n            ],\n            [\n                />/,\n                \"metatag.html\",\n                \"@pop\"\n            ]\n        ],\n        comment: [\n            [\n                /\\}\\}/,\n                \"comment.end.handlebars\",\n                \"@pop\"\n            ],\n            [\n                /./,\n                \"comment.content.handlebars\"\n            ]\n        ],\n        commentBlock: [\n            [\n                /--\\}\\}/,\n                \"comment.block.end.handlebars\",\n                \"@pop\"\n            ],\n            [\n                /./,\n                \"comment.content.handlebars\"\n            ]\n        ],\n        commentHtml: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.comment\"\n                }\n            ],\n            [\n                /-->/,\n                \"comment.html\",\n                \"@pop\"\n            ],\n            [\n                /[^-]+/,\n                \"comment.content.html\"\n            ],\n            [\n                /./,\n                \"comment.content.html\"\n            ]\n        ],\n        otherTag: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.otherTag\"\n                }\n            ],\n            [\n                /\\/?>/,\n                \"delimiter.html\",\n                \"@pop\"\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name\"\n            ],\n            [\n                /=/,\n                \"delimiter\"\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ]\n        ],\n        // -- BEGIN <script> tags handling\n        // After <script\n        script: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.script\"\n                }\n            ],\n            [\n                /type/,\n                \"attribute.name\",\n                \"@scriptAfterType\"\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name\"\n            ],\n            [\n                /=/,\n                \"delimiter\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded.text/javascript\",\n                    nextEmbedded: \"text/javascript\"\n                }\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /(<\\/)(script\\s*)(>)/,\n                [\n                    \"delimiter.html\",\n                    \"tag.html\",\n                    {\n                        token: \"delimiter.html\",\n                        next: \"@pop\"\n                    }\n                ]\n            ]\n        ],\n        // After <script ... type\n        scriptAfterType: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.scriptAfterType\"\n                }\n            ],\n            [\n                /=/,\n                \"delimiter\",\n                \"@scriptAfterTypeEquals\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded.text/javascript\",\n                    nextEmbedded: \"text/javascript\"\n                }\n            ],\n            // cover invalid e.g. <script type>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/script\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <script ... type =\n        scriptAfterTypeEquals: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.scriptAfterTypeEquals\"\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                {\n                    token: \"attribute.value\",\n                    switchTo: \"@scriptWithCustomType.$1\"\n                }\n            ],\n            [\n                /'([^']*)'/,\n                {\n                    token: \"attribute.value\",\n                    switchTo: \"@scriptWithCustomType.$1\"\n                }\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded.text/javascript\",\n                    nextEmbedded: \"text/javascript\"\n                }\n            ],\n            // cover invalid e.g. <script type=>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/script\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <script ... type = $S2\n        scriptWithCustomType: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.scriptWithCustomType.$S2\"\n                }\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@scriptEmbedded.$S2\",\n                    nextEmbedded: \"$S2\"\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name\"\n            ],\n            [\n                /=/,\n                \"delimiter\"\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/script\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        scriptEmbedded: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInEmbeddedState.scriptEmbedded.$S2\",\n                    nextEmbedded: \"@pop\"\n                }\n            ],\n            [\n                /<\\/script/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\",\n                    nextEmbedded: \"@pop\"\n                }\n            ]\n        ],\n        // -- END <script> tags handling\n        // -- BEGIN <style> tags handling\n        // After <style\n        style: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.style\"\n                }\n            ],\n            [\n                /type/,\n                \"attribute.name\",\n                \"@styleAfterType\"\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name\"\n            ],\n            [\n                /=/,\n                \"delimiter\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded.text/css\",\n                    nextEmbedded: \"text/css\"\n                }\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /(<\\/)(style\\s*)(>)/,\n                [\n                    \"delimiter.html\",\n                    \"tag.html\",\n                    {\n                        token: \"delimiter.html\",\n                        next: \"@pop\"\n                    }\n                ]\n            ]\n        ],\n        // After <style ... type\n        styleAfterType: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.styleAfterType\"\n                }\n            ],\n            [\n                /=/,\n                \"delimiter\",\n                \"@styleAfterTypeEquals\"\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded.text/css\",\n                    nextEmbedded: \"text/css\"\n                }\n            ],\n            // cover invalid e.g. <style type>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/style\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <style ... type =\n        styleAfterTypeEquals: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.styleAfterTypeEquals\"\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                {\n                    token: \"attribute.value\",\n                    switchTo: \"@styleWithCustomType.$1\"\n                }\n            ],\n            [\n                /'([^']*)'/,\n                {\n                    token: \"attribute.value\",\n                    switchTo: \"@styleWithCustomType.$1\"\n                }\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded.text/css\",\n                    nextEmbedded: \"text/css\"\n                }\n            ],\n            // cover invalid e.g. <style type=>\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/style\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        // After <style ... type = $S2\n        styleWithCustomType: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInSimpleState.styleWithCustomType.$S2\"\n                }\n            ],\n            [\n                />/,\n                {\n                    token: \"delimiter.html\",\n                    next: \"@styleEmbedded.$S2\",\n                    nextEmbedded: \"$S2\"\n                }\n            ],\n            [\n                /\"([^\"]*)\"/,\n                \"attribute.value\"\n            ],\n            [\n                /'([^']*)'/,\n                \"attribute.value\"\n            ],\n            [\n                /[\\w\\-]+/,\n                \"attribute.name\"\n            ],\n            [\n                /=/,\n                \"delimiter\"\n            ],\n            [\n                /[ \\t\\r\\n]+/\n            ],\n            // whitespace\n            [\n                /<\\/style\\s*>/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\"\n                }\n            ]\n        ],\n        styleEmbedded: [\n            [\n                /\\{\\{/,\n                {\n                    token: \"@rematch\",\n                    switchTo: \"@handlebarsInEmbeddedState.styleEmbedded.$S2\",\n                    nextEmbedded: \"@pop\"\n                }\n            ],\n            [\n                /<\\/style/,\n                {\n                    token: \"@rematch\",\n                    next: \"@pop\",\n                    nextEmbedded: \"@pop\"\n                }\n            ]\n        ],\n        // -- END <style> tags handling\n        handlebarsInSimpleState: [\n            [\n                /\\{\\{\\{?/,\n                \"delimiter.handlebars\"\n            ],\n            [\n                /\\}\\}\\}?/,\n                {\n                    token: \"delimiter.handlebars\",\n                    switchTo: \"@$S2.$S3\"\n                }\n            ],\n            {\n                include: \"handlebarsRoot\"\n            }\n        ],\n        handlebarsInEmbeddedState: [\n            [\n                /\\{\\{\\{?/,\n                \"delimiter.handlebars\"\n            ],\n            [\n                /\\}\\}\\}?/,\n                {\n                    token: \"delimiter.handlebars\",\n                    switchTo: \"@$S2.$S3\",\n                    nextEmbedded: \"$S3\"\n                }\n            ],\n            {\n                include: \"handlebarsRoot\"\n            }\n        ],\n        handlebarsRoot: [\n            [\n                /\"[^\"]*\"/,\n                \"string.handlebars\"\n            ],\n            [\n                /[#/][^\\s}]+/,\n                \"keyword.helper.handlebars\"\n            ],\n            [\n                /else\\b/,\n                \"keyword.helper.handlebars\"\n            ],\n            [\n                /[\\s]+/\n            ],\n            [\n                /[^}]/,\n                \"variable.parameter.handlebars\"\n            ]\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=handlebars.d5ee9572.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/basic-languages/handlebars/handlebars.ts\nvar EMPTY_ELEMENTS = [\n  \"area\",\n  \"base\",\n  \"br\",\n  \"col\",\n  \"embed\",\n  \"hr\",\n  \"img\",\n  \"input\",\n  \"keygen\",\n  \"link\",\n  \"menuitem\",\n  \"meta\",\n  \"param\",\n  \"source\",\n  \"track\",\n  \"wbr\"\n];\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\$\\^\\&\\*\\(\\)\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)/g,\n  comments: {\n    blockComment: [\"{{!--\", \"--}}\"]\n  },\n  brackets: [\n    [\"<!--\", \"-->\"],\n    [\"<\", \">\"],\n    [\"{{\", \"}}\"],\n    [\"{\", \"}\"],\n    [\"(\", \")\"]\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  surroundingPairs: [\n    { open: \"<\", close: \">\" },\n    { open: '\"', close: '\"' },\n    { open: \"'\", close: \"'\" }\n  ],\n  onEnterRules: [\n    {\n      beforeText: new RegExp(\n        `<(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`,\n        \"i\"\n      ),\n      afterText: /^<\\/(\\w[\\w\\d]*)\\s*>$/i,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent\n      }\n    },\n    {\n      beforeText: new RegExp(\n        `<(?!(?:${EMPTY_ELEMENTS.join(\"|\")}))(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$`,\n        \"i\"\n      ),\n      action: { indentAction: monaco_editor_core_exports.languages.IndentAction.Indent }\n    }\n  ]\n};\nvar language = {\n  defaultToken: \"\",\n  tokenPostfix: \"\",\n  // ignoreCase: true,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [\n      [/\\{\\{!--/, \"comment.block.start.handlebars\", \"@commentBlock\"],\n      [/\\{\\{!/, \"comment.start.handlebars\", \"@comment\"],\n      [/\\{\\{/, { token: \"@rematch\", switchTo: \"@handlebarsInSimpleState.root\" }],\n      [/<!DOCTYPE/, \"metatag.html\", \"@doctype\"],\n      [/<!--/, \"comment.html\", \"@commentHtml\"],\n      [/(<)(\\w+)(\\/>)/, [\"delimiter.html\", \"tag.html\", \"delimiter.html\"]],\n      [/(<)(script)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@script\" }]],\n      [/(<)(style)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@style\" }]],\n      [/(<)([:\\w]+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]],\n      [/(<\\/)(\\w+)/, [\"delimiter.html\", { token: \"tag.html\", next: \"@otherTag\" }]],\n      [/</, \"delimiter.html\"],\n      [/\\{/, \"delimiter.html\"],\n      [/[^<{]+/]\n      // text\n    ],\n    doctype: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.comment\"\n        }\n      ],\n      [/[^>]+/, \"metatag.content.html\"],\n      [/>/, \"metatag.html\", \"@pop\"]\n    ],\n    comment: [\n      [/\\}\\}/, \"comment.end.handlebars\", \"@pop\"],\n      [/./, \"comment.content.handlebars\"]\n    ],\n    commentBlock: [\n      [/--\\}\\}/, \"comment.block.end.handlebars\", \"@pop\"],\n      [/./, \"comment.content.handlebars\"]\n    ],\n    commentHtml: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.comment\"\n        }\n      ],\n      [/-->/, \"comment.html\", \"@pop\"],\n      [/[^-]+/, \"comment.content.html\"],\n      [/./, \"comment.content.html\"]\n    ],\n    otherTag: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.otherTag\"\n        }\n      ],\n      [/\\/?>/, \"delimiter.html\", \"@pop\"],\n      [/\"([^\"]*)\"/, \"attribute.value\"],\n      [/'([^']*)'/, \"attribute.value\"],\n      [/[\\w\\-]+/, \"attribute.name\"],\n      [/=/, \"delimiter\"],\n      [/[ \\t\\r\\n]+/]\n      // whitespace\n    ],\n    // -- BEGIN <script> tags handling\n    // After <script\n    script: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.script\"\n        }\n      ],\n      [/type/, \"attribute.name\", \"@scriptAfterType\"],\n      [/\"([^\"]*)\"/, \"attribute.value\"],\n      [/'([^']*)'/, \"attribute.value\"],\n      [/[\\w\\-]+/, \"attribute.name\"],\n      [/=/, \"delimiter\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded.text/javascript\",\n          nextEmbedded: \"text/javascript\"\n        }\n      ],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [\n        /(<\\/)(script\\s*)(>)/,\n        [\"delimiter.html\", \"tag.html\", { token: \"delimiter.html\", next: \"@pop\" }]\n      ]\n    ],\n    // After <script ... type\n    scriptAfterType: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.scriptAfterType\"\n        }\n      ],\n      [/=/, \"delimiter\", \"@scriptAfterTypeEquals\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded.text/javascript\",\n          nextEmbedded: \"text/javascript\"\n        }\n      ],\n      // cover invalid e.g. <script type>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <script ... type =\n    scriptAfterTypeEquals: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.scriptAfterTypeEquals\"\n        }\n      ],\n      [\n        /\"([^\"]*)\"/,\n        {\n          token: \"attribute.value\",\n          switchTo: \"@scriptWithCustomType.$1\"\n        }\n      ],\n      [\n        /'([^']*)'/,\n        {\n          token: \"attribute.value\",\n          switchTo: \"@scriptWithCustomType.$1\"\n        }\n      ],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded.text/javascript\",\n          nextEmbedded: \"text/javascript\"\n        }\n      ],\n      // cover invalid e.g. <script type=>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <script ... type = $S2\n    scriptWithCustomType: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.scriptWithCustomType.$S2\"\n        }\n      ],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@scriptEmbedded.$S2\",\n          nextEmbedded: \"$S2\"\n        }\n      ],\n      [/\"([^\"]*)\"/, \"attribute.value\"],\n      [/'([^']*)'/, \"attribute.value\"],\n      [/[\\w\\-]+/, \"attribute.name\"],\n      [/=/, \"delimiter\"],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/script\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    scriptEmbedded: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInEmbeddedState.scriptEmbedded.$S2\",\n          nextEmbedded: \"@pop\"\n        }\n      ],\n      [/<\\/script/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }]\n    ],\n    // -- END <script> tags handling\n    // -- BEGIN <style> tags handling\n    // After <style\n    style: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.style\"\n        }\n      ],\n      [/type/, \"attribute.name\", \"@styleAfterType\"],\n      [/\"([^\"]*)\"/, \"attribute.value\"],\n      [/'([^']*)'/, \"attribute.value\"],\n      [/[\\w\\-]+/, \"attribute.name\"],\n      [/=/, \"delimiter\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded.text/css\",\n          nextEmbedded: \"text/css\"\n        }\n      ],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [\n        /(<\\/)(style\\s*)(>)/,\n        [\"delimiter.html\", \"tag.html\", { token: \"delimiter.html\", next: \"@pop\" }]\n      ]\n    ],\n    // After <style ... type\n    styleAfterType: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.styleAfterType\"\n        }\n      ],\n      [/=/, \"delimiter\", \"@styleAfterTypeEquals\"],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded.text/css\",\n          nextEmbedded: \"text/css\"\n        }\n      ],\n      // cover invalid e.g. <style type>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <style ... type =\n    styleAfterTypeEquals: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.styleAfterTypeEquals\"\n        }\n      ],\n      [\n        /\"([^\"]*)\"/,\n        {\n          token: \"attribute.value\",\n          switchTo: \"@styleWithCustomType.$1\"\n        }\n      ],\n      [\n        /'([^']*)'/,\n        {\n          token: \"attribute.value\",\n          switchTo: \"@styleWithCustomType.$1\"\n        }\n      ],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded.text/css\",\n          nextEmbedded: \"text/css\"\n        }\n      ],\n      // cover invalid e.g. <style type=>\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    // After <style ... type = $S2\n    styleWithCustomType: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInSimpleState.styleWithCustomType.$S2\"\n        }\n      ],\n      [\n        />/,\n        {\n          token: \"delimiter.html\",\n          next: \"@styleEmbedded.$S2\",\n          nextEmbedded: \"$S2\"\n        }\n      ],\n      [/\"([^\"]*)\"/, \"attribute.value\"],\n      [/'([^']*)'/, \"attribute.value\"],\n      [/[\\w\\-]+/, \"attribute.name\"],\n      [/=/, \"delimiter\"],\n      [/[ \\t\\r\\n]+/],\n      // whitespace\n      [/<\\/style\\s*>/, { token: \"@rematch\", next: \"@pop\" }]\n    ],\n    styleEmbedded: [\n      [\n        /\\{\\{/,\n        {\n          token: \"@rematch\",\n          switchTo: \"@handlebarsInEmbeddedState.styleEmbedded.$S2\",\n          nextEmbedded: \"@pop\"\n        }\n      ],\n      [/<\\/style/, { token: \"@rematch\", next: \"@pop\", nextEmbedded: \"@pop\" }]\n    ],\n    // -- END <style> tags handling\n    handlebarsInSimpleState: [\n      [/\\{\\{\\{?/, \"delimiter.handlebars\"],\n      [/\\}\\}\\}?/, { token: \"delimiter.handlebars\", switchTo: \"@$S2.$S3\" }],\n      { include: \"handlebarsRoot\" }\n    ],\n    handlebarsInEmbeddedState: [\n      [/\\{\\{\\{?/, \"delimiter.handlebars\"],\n      [\n        /\\}\\}\\}?/,\n        {\n          token: \"delimiter.handlebars\",\n          switchTo: \"@$S2.$S3\",\n          nextEmbedded: \"$S3\"\n        }\n      ],\n      { include: \"handlebarsRoot\" }\n    ],\n    handlebarsRoot: [\n      [/\"[^\"]*\"/, \"string.handlebars\"],\n      [/[#/][^\\s}]+/, \"keyword.helper.handlebars\"],\n      [/else\\b/, \"keyword.helper.handlebars\"],\n      [/[\\s]+/],\n      [/[^}]/, \"variable.parameter.handlebars\"]\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$4432086fa2051554$export$c83be1687c028fc9","$4432086fa2051554$export$789c912f57fe164c","$cDseA","$4432086fa2051554$var$__defProp","$4432086fa2051554$var$__getOwnPropDesc","getOwnPropertyDescriptor","$4432086fa2051554$var$__getOwnPropNames","getOwnPropertyNames","$4432086fa2051554$var$__hasOwnProp","prototype","hasOwnProperty","$4432086fa2051554$var$monaco_editor_core_exports","$4432086fa2051554$var$__copyProps","to","from","except","desc","key","call","$4432086fa2051554$var$EMPTY_ELEMENTS","wordPattern","comments","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","onEnterRules","beforeText","RegExp","join","afterText","action","indentAction","languages","IndentAction","IndentOutdent","Indent","defaultToken","tokenPostfix","tokenizer","root","token","switchTo","next","doctype","comment","commentBlock","commentHtml","otherTag","script","nextEmbedded","scriptAfterType","scriptAfterTypeEquals","scriptWithCustomType","scriptEmbedded","style","styleAfterType","styleAfterTypeEquals","styleWithCustomType","styleEmbedded","handlebarsInSimpleState","include","handlebarsInEmbeddedState","handlebarsRoot"],"version":3,"file":"handlebars.d5ee9572.js.map"}