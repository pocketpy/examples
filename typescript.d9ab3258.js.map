{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,W,iB,C,A,C,E,E,Q,A,E,Q,S,C,C,C,E,E,E,O,C,O,I,G,E,E,O,C,W,I,ECAA;;;;;+E,EAK+E,IAAA,EAAA,EAAA,SAE3E,EAAY,OAAO,cAAc,CACjC,EAAmB,OAAO,wBAAwB,CAClD,EAAoB,OAAO,mBAAmB,CAC9C,EAAe,OAAO,SAAS,CAAC,cAAc,CAY9C,EAA6B,CAAC,EAHe,AAR/B,CAAA,CAAC,EAAI,EAAM,EAAQ,KACnC,GAAI,GAAQ,AAAgB,UAAhB,OAAO,GAAqB,AAAgB,YAAhB,OAAO,EAC7C,IAAK,IAAI,KAAO,EAAkB,GAC3B,EAAa,IAAI,CAAC,EAAI,IAAQ,IAAQ,GACzC,EAAU,EAAI,EAAK,CAAE,IAAK,IAAM,CAAI,CAAC,EAAI,CAAE,WAAY,CAAE,CAAA,EAAO,EAAiB,EAAM,EAAA,GAAS,EAAK,UAAU,AAAC,EAGxH,CAAA,EAKW,EAA4B,EAJmC,WAQ1E,IAAI,EAAO,CACT,YAAa,uFACb,SAAU,CACR,YAAa,KACb,aAAc,CAAC,KAAM,KAAK,AAC5B,EACA,SAAU,CACR,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACV,CAAC,IAAK,IAAI,CACX,CACD,aAAc,CACZ,CAEE,WAAY,qCACZ,UAAW,YACX,OAAQ,CACN,aAAc,EAA2B,SAAS,CAAC,YAAY,CAAC,aAAa,CAC7E,WAAY,KACd,CACF,EACA,CAEE,WAAY,qCACZ,OAAQ,CACN,aAAc,EAA2B,SAAS,CAAC,YAAY,CAAC,IAAI,CACpE,WAAY,KACd,CACF,EACA,CAEE,WAAY,2CACZ,OAAQ,CACN,aAAc,EAA2B,SAAS,CAAC,YAAY,CAAC,IAAI,CACpE,WAAY,IACd,CACF,EACA,CAEE,WAAY,0BACZ,OAAQ,CACN,aAAc,EAA2B,SAAS,CAAC,YAAY,CAAC,IAAI,CACpE,WAAY,CACd,CACF,EACD,CACD,iBAAkB,CAChB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,GAAI,EACxB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAS,AAAC,EAC3C,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,UAAU,AAAC,EACtD,CAAE,KAAM,MAAO,MAAO,MAAO,MAAO,CAAC,SAAS,AAAC,EAChD,CACD,QAAS,CACP,QAAS,CACP,MAAO,AAAI,OAAO,0BAClB,IAAK,AAAI,OAAO,4BAClB,CACF,CACF,EACI,EAAW,CAEb,aAAc,UACd,aAAc,MACd,SAAU,CAGR,WACA,MACA,KACA,UACA,SACA,UACA,QACA,OACA,QACA,QACA,WACA,QACA,cACA,WACA,UACA,UACA,SACA,KACA,OACA,OACA,SACA,UACA,QACA,UACA,MACA,OACA,WACA,MACA,KACA,aACA,SACA,KACA,QACA,aACA,YACA,KACA,QACA,MACA,SACA,YACA,QACA,MACA,OACA,SACA,SACA,MACA,UACA,UACA,YACA,SACA,WACA,WACA,UACA,SACA,SACA,YACA,MACA,SACA,SACA,QACA,SACA,SACA,OACA,QACA,OACA,MACA,OACA,SACA,YACA,SACA,UACA,MACA,OACA,QACA,OACA,QACA,QACA,QACA,KACD,CACD,UAAW,CACT,KACA,KACA,KACA,KACA,MACA,MACA,KACA,IACA,IACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,KACA,KACA,MACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,IACA,IACA,IACA,KACA,KACA,KACA,MACA,KACA,KACA,MACA,MACA,OACA,KACA,KACA,KACA,IACD,CAED,QAAS,wBACT,QAAS,wEACT,OAAQ,cACR,YAAa,oBACb,aAAc,oBACd,UAAW,iCACX,UAAW,yBACX,UAAW,+EAEX,UAAW,CACT,KAAM,CAAC,CAAC,OAAQ,oBAAoB,CAAE,CAAE,QAAS,QAAS,EAAE,CAC5D,OAAQ,CAEN,CACE,kBACA,CACE,MAAO,CACL,YAAa,UACb,WAAY,YACd,CACF,EACD,CACD,CAAC,eAAgB,kBAAkB,CAInC,CAAE,QAAS,aAAc,EAEzB,CACE,6DACA,CAAE,MAAO,SAAU,QAAS,QAAS,KAAM,SAAU,EACtD,CAED,CAAC,WAAY,YAAY,CACzB,CAAC,mBAAoB,YAAY,CACjC,CAAC,gBAAiB,YAAY,CAC9B,CACE,WACA,CACE,MAAO,CACL,aAAc,YACd,WAAY,EACd,CACF,EACD,CAED,CAAC,kCAAmC,eAAe,CACnD,CAAC,6CAA8C,eAAe,CAC9D,CAAC,sBAAuB,aAAa,CACrC,CAAC,yBAA0B,eAAe,CAC1C,CAAC,yBAA0B,gBAAgB,CAC3C,CAAC,cAAe,SAAS,CAEzB,CAAC,QAAS,YAAY,CAEtB,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,kBAAmB,iBAAiB,CAErC,CAAC,IAAK,SAAU,iBAAiB,CACjC,CAAC,IAAK,SAAU,iBAAiB,CACjC,CAAC,IAAK,SAAU,mBAAmB,CACpC,CACD,WAAY,CACV,CAAC,aAAc,GAAG,CAClB,CAAC,eAAgB,cAAe,SAAS,CACzC,CAAC,OAAQ,UAAW,WAAW,CAC/B,CAAC,UAAW,UAAU,CACvB,CACD,QAAS,CACP,CAAC,UAAW,UAAU,CACtB,CAAC,OAAQ,UAAW,OAAO,CAC3B,CAAC,QAAS,UAAU,CACrB,CACD,MAAO,CACL,CAAC,UAAW,cAAc,CAC1B,CAAC,OAAQ,cAAe,OAAO,CAC/B,CAAC,QAAS,cAAc,CACzB,CAED,OAAQ,CACN,CACE,yBACA,CAAC,wBAAyB,wBAAyB,wBAAwB,CAC5E,CACD,CACE,kCACA,CAAC,wBAAyB,CAAE,MAAO,wBAAyB,KAAM,aAAc,EAAE,CACnF,CACD,CAAC,oBAAqB,CAAC,wBAAyB,wBAAwB,CAAC,CACzE,CAAC,OAAQ,wBAAwB,CACjC,CAAC,aAAc,wBAAwB,CACvC,CAAC,UAAW,SAAS,CACrB,CAAC,aAAc,gBAAgB,CAC/B,CAAC,OAAQ,iBAAiB,CAC1B,CAAC,mBAAoB,CAAC,CAAE,MAAO,SAAU,QAAS,SAAU,KAAM,MAAO,EAAG,gBAAgB,CAAC,CAC9F,CACD,WAAY,CACV,CAAC,IAAK,wBAAwB,CAC9B,CAAC,KAAM,iBAAiB,CACxB,CAAC,aAAc,gBAAgB,CAC/B,CAAC,QAAS,SAAS,CACnB,CACE,KACA,CACE,MAAO,wBACP,KAAM,OACN,QAAS,QACX,EACD,CACF,CACD,cAAe,CACb,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,SAAU,OAAO,CACxB,CACD,cAAe,CACb,CAAC,UAAW,SAAS,CACrB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,SAAU,OAAO,CACxB,CACD,gBAAiB,CACf,CAAC,OAAQ,CAAE,MAAO,oBAAqB,KAAM,kBAAmB,EAAE,CAClE,CAAC,WAAY,SAAS,CACtB,CAAC,WAAY,gBAAgB,CAC7B,CAAC,MAAO,wBAAwB,CAChC,CAAC,IAAK,SAAU,OAAO,CACxB,CACD,gBAAiB,CACf,CAAC,KAAM,oBAAqB,mBAAmB,CAC/C,CAAC,KAAM,oBAAqB,OAAO,CACnC,CAAE,QAAS,QAAS,EACrB,AACH,CACF,C","sources":["<anon>","node_modules/monaco-editor/esm/vs/basic-languages/typescript/typescript.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global = globalThis;\n    var parcelRequire = $parcel$global[\"parcelRequire94c2\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"XtC4N\", function(module, exports) {\n\n$parcel$export(module.exports, \"conf\", () => $0b2c7b5ac92cef97$export$c83be1687c028fc9);\n$parcel$export(module.exports, \"language\", () => $0b2c7b5ac92cef97$export$789c912f57fe164c);\n/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/ \nvar $cDseA = parcelRequire(\"cDseA\");\nvar $0b2c7b5ac92cef97$var$__defProp = Object.defineProperty;\nvar $0b2c7b5ac92cef97$var$__getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar $0b2c7b5ac92cef97$var$__getOwnPropNames = Object.getOwnPropertyNames;\nvar $0b2c7b5ac92cef97$var$__hasOwnProp = Object.prototype.hasOwnProperty;\nvar $0b2c7b5ac92cef97$var$__copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n        for (let key of $0b2c7b5ac92cef97$var$__getOwnPropNames(from))if (!$0b2c7b5ac92cef97$var$__hasOwnProp.call(to, key) && key !== except) $0b2c7b5ac92cef97$var$__defProp(to, key, {\n            get: ()=>from[key],\n            enumerable: !(desc = $0b2c7b5ac92cef97$var$__getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar $0b2c7b5ac92cef97$var$__reExport = (target, mod, secondTarget)=>($0b2c7b5ac92cef97$var$__copyProps(target, mod, \"default\"), secondTarget && $0b2c7b5ac92cef97$var$__copyProps(secondTarget, mod, \"default\"));\n// src/fillers/monaco-editor-core.ts\nvar $0b2c7b5ac92cef97$var$monaco_editor_core_exports = {};\n$0b2c7b5ac92cef97$var$__reExport($0b2c7b5ac92cef97$var$monaco_editor_core_exports, $cDseA);\n// src/basic-languages/typescript/typescript.ts\nvar $0b2c7b5ac92cef97$export$c83be1687c028fc9 = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: \"//\",\n        blockComment: [\n            \"/*\",\n            \"*/\"\n        ]\n    },\n    brackets: [\n        [\n            \"{\",\n            \"}\"\n        ],\n        [\n            \"[\",\n            \"]\"\n        ],\n        [\n            \"(\",\n            \")\"\n        ]\n    ],\n    onEnterRules: [\n        {\n            // e.g. /** | */\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n            afterText: /^\\s*\\*\\/$/,\n            action: {\n                indentAction: $0b2c7b5ac92cef97$var$monaco_editor_core_exports.languages.IndentAction.IndentOutdent,\n                appendText: \" * \"\n            }\n        },\n        {\n            // e.g. /** ...|\n            beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n            action: {\n                indentAction: $0b2c7b5ac92cef97$var$monaco_editor_core_exports.languages.IndentAction.None,\n                appendText: \" * \"\n            }\n        },\n        {\n            // e.g.  * ...|\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n            action: {\n                indentAction: $0b2c7b5ac92cef97$var$monaco_editor_core_exports.languages.IndentAction.None,\n                appendText: \"* \"\n            }\n        },\n        {\n            // e.g.  */|\n            beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n            action: {\n                indentAction: $0b2c7b5ac92cef97$var$monaco_editor_core_exports.languages.IndentAction.None,\n                removeText: 1\n            }\n        }\n    ],\n    autoClosingPairs: [\n        {\n            open: \"{\",\n            close: \"}\"\n        },\n        {\n            open: \"[\",\n            close: \"]\"\n        },\n        {\n            open: \"(\",\n            close: \")\"\n        },\n        {\n            open: '\"',\n            close: '\"',\n            notIn: [\n                \"string\"\n            ]\n        },\n        {\n            open: \"'\",\n            close: \"'\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"`\",\n            close: \"`\",\n            notIn: [\n                \"string\",\n                \"comment\"\n            ]\n        },\n        {\n            open: \"/**\",\n            close: \" */\",\n            notIn: [\n                \"string\"\n            ]\n        }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n            end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n        }\n    }\n};\nvar $0b2c7b5ac92cef97$export$789c912f57fe164c = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: \"invalid\",\n    tokenPostfix: \".ts\",\n    keywords: [\n        // Should match the keys of textToKeywordObj in\n        // https://github.com/microsoft/TypeScript/blob/master/src/compiler/scanner.ts\n        \"abstract\",\n        \"any\",\n        \"as\",\n        \"asserts\",\n        \"bigint\",\n        \"boolean\",\n        \"break\",\n        \"case\",\n        \"catch\",\n        \"class\",\n        \"continue\",\n        \"const\",\n        \"constructor\",\n        \"debugger\",\n        \"declare\",\n        \"default\",\n        \"delete\",\n        \"do\",\n        \"else\",\n        \"enum\",\n        \"export\",\n        \"extends\",\n        \"false\",\n        \"finally\",\n        \"for\",\n        \"from\",\n        \"function\",\n        \"get\",\n        \"if\",\n        \"implements\",\n        \"import\",\n        \"in\",\n        \"infer\",\n        \"instanceof\",\n        \"interface\",\n        \"is\",\n        \"keyof\",\n        \"let\",\n        \"module\",\n        \"namespace\",\n        \"never\",\n        \"new\",\n        \"null\",\n        \"number\",\n        \"object\",\n        \"out\",\n        \"package\",\n        \"private\",\n        \"protected\",\n        \"public\",\n        \"override\",\n        \"readonly\",\n        \"require\",\n        \"global\",\n        \"return\",\n        \"satisfies\",\n        \"set\",\n        \"static\",\n        \"string\",\n        \"super\",\n        \"switch\",\n        \"symbol\",\n        \"this\",\n        \"throw\",\n        \"true\",\n        \"try\",\n        \"type\",\n        \"typeof\",\n        \"undefined\",\n        \"unique\",\n        \"unknown\",\n        \"var\",\n        \"void\",\n        \"while\",\n        \"with\",\n        \"yield\",\n        \"async\",\n        \"await\",\n        \"of\"\n    ],\n    operators: [\n        \"<=\",\n        \">=\",\n        \"==\",\n        \"!=\",\n        \"===\",\n        \"!==\",\n        \"=>\",\n        \"+\",\n        \"-\",\n        \"**\",\n        \"*\",\n        \"/\",\n        \"%\",\n        \"++\",\n        \"--\",\n        \"<<\",\n        \"</\",\n        \">>\",\n        \">>>\",\n        \"&\",\n        \"|\",\n        \"^\",\n        \"!\",\n        \"~\",\n        \"&&\",\n        \"||\",\n        \"??\",\n        \"?\",\n        \":\",\n        \"=\",\n        \"+=\",\n        \"-=\",\n        \"*=\",\n        \"**=\",\n        \"/=\",\n        \"%=\",\n        \"<<=\",\n        \">>=\",\n        \">>>=\",\n        \"&=\",\n        \"|=\",\n        \"^=\",\n        \"@\"\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    digits: /\\d+(_+\\d+)*/,\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n    regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n    regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            [\n                /[{}]/,\n                \"delimiter.bracket\"\n            ],\n            {\n                include: \"common\"\n            }\n        ],\n        common: [\n            // identifiers and keywords\n            [\n                /#?[a-z_$][\\w$]*/,\n                {\n                    cases: {\n                        \"@keywords\": \"keyword\",\n                        \"@default\": \"identifier\"\n                    }\n                }\n            ],\n            [\n                /[A-Z][\\w\\$]*/,\n                \"type.identifier\"\n            ],\n            // to show class names nicely\n            // [/[A-Z][\\w\\$]*/, 'identifier'],\n            // whitespace\n            {\n                include: \"@whitespace\"\n            },\n            // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n            [\n                /\\/(?=([^\\\\\\/]|\\\\.)+\\/([dgimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/,\n                {\n                    token: \"regexp\",\n                    bracket: \"@open\",\n                    next: \"@regexp\"\n                }\n            ],\n            // delimiters and operators\n            [\n                /[()\\[\\]]/,\n                \"@brackets\"\n            ],\n            [\n                /[<>](?!@symbols)/,\n                \"@brackets\"\n            ],\n            [\n                /!(?=([^=]|$))/,\n                \"delimiter\"\n            ],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        \"@operators\": \"delimiter\",\n                        \"@default\": \"\"\n                    }\n                }\n            ],\n            // numbers\n            [\n                /(@digits)[eE]([\\-+]?(@digits))?/,\n                \"number.float\"\n            ],\n            [\n                /(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/,\n                \"number.float\"\n            ],\n            [\n                /0[xX](@hexdigits)n?/,\n                \"number.hex\"\n            ],\n            [\n                /0[oO]?(@octaldigits)n?/,\n                \"number.octal\"\n            ],\n            [\n                /0[bB](@binarydigits)n?/,\n                \"number.binary\"\n            ],\n            [\n                /(@digits)n?/,\n                \"number\"\n            ],\n            // delimiter: after number because of .\\d floats\n            [\n                /[;,.]/,\n                \"delimiter\"\n            ],\n            // strings\n            [\n                /\"([^\"\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /'([^'\\\\]|\\\\.)*$/,\n                \"string.invalid\"\n            ],\n            // non-teminated string\n            [\n                /\"/,\n                \"string\",\n                \"@string_double\"\n            ],\n            [\n                /'/,\n                \"string\",\n                \"@string_single\"\n            ],\n            [\n                /`/,\n                \"string\",\n                \"@string_backtick\"\n            ]\n        ],\n        whitespace: [\n            [\n                /[ \\t\\r\\n]+/,\n                \"\"\n            ],\n            [\n                /\\/\\*\\*(?!\\/)/,\n                \"comment.doc\",\n                \"@jsdoc\"\n            ],\n            [\n                /\\/\\*/,\n                \"comment\",\n                \"@comment\"\n            ],\n            [\n                /\\/\\/.*$/,\n                \"comment\"\n            ]\n        ],\n        comment: [\n            [\n                /[^\\/*]+/,\n                \"comment\"\n            ],\n            [\n                /\\*\\//,\n                \"comment\",\n                \"@pop\"\n            ],\n            [\n                /[\\/*]/,\n                \"comment\"\n            ]\n        ],\n        jsdoc: [\n            [\n                /[^\\/*]+/,\n                \"comment.doc\"\n            ],\n            [\n                /\\*\\//,\n                \"comment.doc\",\n                \"@pop\"\n            ],\n            [\n                /[\\/*]/,\n                \"comment.doc\"\n            ]\n        ],\n        // We match regular expression quite precisely\n        regexp: [\n            [\n                /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n                [\n                    \"regexp.escape.control\",\n                    \"regexp.escape.control\",\n                    \"regexp.escape.control\"\n                ]\n            ],\n            [\n                /(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/,\n                [\n                    \"regexp.escape.control\",\n                    {\n                        token: \"regexp.escape.control\",\n                        next: \"@regexrange\"\n                    }\n                ]\n            ],\n            [\n                /(\\()(\\?:|\\?=|\\?!)/,\n                [\n                    \"regexp.escape.control\",\n                    \"regexp.escape.control\"\n                ]\n            ],\n            [\n                /[()]/,\n                \"regexp.escape.control\"\n            ],\n            [\n                /@regexpctl/,\n                \"regexp.escape.control\"\n            ],\n            [\n                /[^\\\\\\/]/,\n                \"regexp\"\n            ],\n            [\n                /@regexpesc/,\n                \"regexp.escape\"\n            ],\n            [\n                /\\\\\\./,\n                \"regexp.invalid\"\n            ],\n            [\n                /(\\/)([dgimsuy]*)/,\n                [\n                    {\n                        token: \"regexp\",\n                        bracket: \"@close\",\n                        next: \"@pop\"\n                    },\n                    \"keyword.other\"\n                ]\n            ]\n        ],\n        regexrange: [\n            [\n                /-/,\n                \"regexp.escape.control\"\n            ],\n            [\n                /\\^/,\n                \"regexp.invalid\"\n            ],\n            [\n                /@regexpesc/,\n                \"regexp.escape\"\n            ],\n            [\n                /[^\\]]/,\n                \"regexp\"\n            ],\n            [\n                /\\]/,\n                {\n                    token: \"regexp.escape.control\",\n                    next: \"@pop\",\n                    bracket: \"@close\"\n                }\n            ]\n        ],\n        string_double: [\n            [\n                /[^\\\\\"]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /\"/,\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        string_single: [\n            [\n                /[^\\\\']+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /'/,\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        string_backtick: [\n            [\n                /\\$\\{/,\n                {\n                    token: \"delimiter.bracket\",\n                    next: \"@bracketCounting\"\n                }\n            ],\n            [\n                /[^\\\\`$]+/,\n                \"string\"\n            ],\n            [\n                /@escapes/,\n                \"string.escape\"\n            ],\n            [\n                /\\\\./,\n                \"string.escape.invalid\"\n            ],\n            [\n                /`/,\n                \"string\",\n                \"@pop\"\n            ]\n        ],\n        bracketCounting: [\n            [\n                /\\{/,\n                \"delimiter.bracket\",\n                \"@bracketCounting\"\n            ],\n            [\n                /\\}/,\n                \"delimiter.bracket\",\n                \"@pop\"\n            ],\n            {\n                include: \"common\"\n            }\n        ]\n    }\n};\n\n});\n\n\n//# sourceMappingURL=typescript.d9ab3258.js.map\n","/*!-----------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Version: 0.48.0(0037b13fb5d186fdf1e7df51a9416a2de2b8c670)\n * Released under the MIT license\n * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt\n *-----------------------------------------------------------------------------*/\n\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, \"default\"), secondTarget && __copyProps(secondTarget, mod, \"default\"));\n\n// src/fillers/monaco-editor-core.ts\nvar monaco_editor_core_exports = {};\n__reExport(monaco_editor_core_exports, monaco_editor_core_star);\nimport * as monaco_editor_core_star from \"../../editor/editor.api.js\";\n\n// src/basic-languages/typescript/typescript.ts\nvar conf = {\n  wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n  comments: {\n    lineComment: \"//\",\n    blockComment: [\"/*\", \"*/\"]\n  },\n  brackets: [\n    [\"{\", \"}\"],\n    [\"[\", \"]\"],\n    [\"(\", \")\"]\n  ],\n  onEnterRules: [\n    {\n      // e.g. /** | */\n      beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n      afterText: /^\\s*\\*\\/$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.IndentOutdent,\n        appendText: \" * \"\n      }\n    },\n    {\n      // e.g. /** ...|\n      beforeText: /^\\s*\\/\\*\\*(?!\\/)([^\\*]|\\*(?!\\/))*$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n        appendText: \" * \"\n      }\n    },\n    {\n      // e.g.  * ...|\n      beforeText: /^(\\t|(\\ \\ ))*\\ \\*(\\ ([^\\*]|\\*(?!\\/))*)?$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n        appendText: \"* \"\n      }\n    },\n    {\n      // e.g.  */|\n      beforeText: /^(\\t|(\\ \\ ))*\\ \\*\\/\\s*$/,\n      action: {\n        indentAction: monaco_editor_core_exports.languages.IndentAction.None,\n        removeText: 1\n      }\n    }\n  ],\n  autoClosingPairs: [\n    { open: \"{\", close: \"}\" },\n    { open: \"[\", close: \"]\" },\n    { open: \"(\", close: \")\" },\n    { open: '\"', close: '\"', notIn: [\"string\"] },\n    { open: \"'\", close: \"'\", notIn: [\"string\", \"comment\"] },\n    { open: \"`\", close: \"`\", notIn: [\"string\", \"comment\"] },\n    { open: \"/**\", close: \" */\", notIn: [\"string\"] }\n  ],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*//\\\\s*#?region\\\\b\"),\n      end: new RegExp(\"^\\\\s*//\\\\s*#?endregion\\\\b\")\n    }\n  }\n};\nvar language = {\n  // Set defaultToken to invalid to see what you do not tokenize yet\n  defaultToken: \"invalid\",\n  tokenPostfix: \".ts\",\n  keywords: [\n    // Should match the keys of textToKeywordObj in\n    // https://github.com/microsoft/TypeScript/blob/master/src/compiler/scanner.ts\n    \"abstract\",\n    \"any\",\n    \"as\",\n    \"asserts\",\n    \"bigint\",\n    \"boolean\",\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"class\",\n    \"continue\",\n    \"const\",\n    \"constructor\",\n    \"debugger\",\n    \"declare\",\n    \"default\",\n    \"delete\",\n    \"do\",\n    \"else\",\n    \"enum\",\n    \"export\",\n    \"extends\",\n    \"false\",\n    \"finally\",\n    \"for\",\n    \"from\",\n    \"function\",\n    \"get\",\n    \"if\",\n    \"implements\",\n    \"import\",\n    \"in\",\n    \"infer\",\n    \"instanceof\",\n    \"interface\",\n    \"is\",\n    \"keyof\",\n    \"let\",\n    \"module\",\n    \"namespace\",\n    \"never\",\n    \"new\",\n    \"null\",\n    \"number\",\n    \"object\",\n    \"out\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"override\",\n    \"readonly\",\n    \"require\",\n    \"global\",\n    \"return\",\n    \"satisfies\",\n    \"set\",\n    \"static\",\n    \"string\",\n    \"super\",\n    \"switch\",\n    \"symbol\",\n    \"this\",\n    \"throw\",\n    \"true\",\n    \"try\",\n    \"type\",\n    \"typeof\",\n    \"undefined\",\n    \"unique\",\n    \"unknown\",\n    \"var\",\n    \"void\",\n    \"while\",\n    \"with\",\n    \"yield\",\n    \"async\",\n    \"await\",\n    \"of\"\n  ],\n  operators: [\n    \"<=\",\n    \">=\",\n    \"==\",\n    \"!=\",\n    \"===\",\n    \"!==\",\n    \"=>\",\n    \"+\",\n    \"-\",\n    \"**\",\n    \"*\",\n    \"/\",\n    \"%\",\n    \"++\",\n    \"--\",\n    \"<<\",\n    \"</\",\n    \">>\",\n    \">>>\",\n    \"&\",\n    \"|\",\n    \"^\",\n    \"!\",\n    \"~\",\n    \"&&\",\n    \"||\",\n    \"??\",\n    \"?\",\n    \":\",\n    \"=\",\n    \"+=\",\n    \"-=\",\n    \"*=\",\n    \"**=\",\n    \"/=\",\n    \"%=\",\n    \"<<=\",\n    \">>=\",\n    \">>>=\",\n    \"&=\",\n    \"|=\",\n    \"^=\",\n    \"@\"\n  ],\n  // we include these common regular expressions\n  symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  digits: /\\d+(_+\\d+)*/,\n  octaldigits: /[0-7]+(_+[0-7]+)*/,\n  binarydigits: /[0-1]+(_+[0-1]+)*/,\n  hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n  regexpctl: /[(){}\\[\\]\\$\\^|\\-*+?\\.]/,\n  regexpesc: /\\\\(?:[bBdDfnrstvwWn0\\\\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,\n  // The main tokenizer for our languages\n  tokenizer: {\n    root: [[/[{}]/, \"delimiter.bracket\"], { include: \"common\" }],\n    common: [\n      // identifiers and keywords\n      [\n        /#?[a-z_$][\\w$]*/,\n        {\n          cases: {\n            \"@keywords\": \"keyword\",\n            \"@default\": \"identifier\"\n          }\n        }\n      ],\n      [/[A-Z][\\w\\$]*/, \"type.identifier\"],\n      // to show class names nicely\n      // [/[A-Z][\\w\\$]*/, 'identifier'],\n      // whitespace\n      { include: \"@whitespace\" },\n      // regular expression: ensure it is terminated before beginning (otherwise it is an opeator)\n      [\n        /\\/(?=([^\\\\\\/]|\\\\.)+\\/([dgimsuy]*)(\\s*)(\\.|;|,|\\)|\\]|\\}|$))/,\n        { token: \"regexp\", bracket: \"@open\", next: \"@regexp\" }\n      ],\n      // delimiters and operators\n      [/[()\\[\\]]/, \"@brackets\"],\n      [/[<>](?!@symbols)/, \"@brackets\"],\n      [/!(?=([^=]|$))/, \"delimiter\"],\n      [\n        /@symbols/,\n        {\n          cases: {\n            \"@operators\": \"delimiter\",\n            \"@default\": \"\"\n          }\n        }\n      ],\n      // numbers\n      [/(@digits)[eE]([\\-+]?(@digits))?/, \"number.float\"],\n      [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?/, \"number.float\"],\n      [/0[xX](@hexdigits)n?/, \"number.hex\"],\n      [/0[oO]?(@octaldigits)n?/, \"number.octal\"],\n      [/0[bB](@binarydigits)n?/, \"number.binary\"],\n      [/(@digits)n?/, \"number\"],\n      // delimiter: after number because of .\\d floats\n      [/[;,.]/, \"delimiter\"],\n      // strings\n      [/\"([^\"\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/'([^'\\\\]|\\\\.)*$/, \"string.invalid\"],\n      // non-teminated string\n      [/\"/, \"string\", \"@string_double\"],\n      [/'/, \"string\", \"@string_single\"],\n      [/`/, \"string\", \"@string_backtick\"]\n    ],\n    whitespace: [\n      [/[ \\t\\r\\n]+/, \"\"],\n      [/\\/\\*\\*(?!\\/)/, \"comment.doc\", \"@jsdoc\"],\n      [/\\/\\*/, \"comment\", \"@comment\"],\n      [/\\/\\/.*$/, \"comment\"]\n    ],\n    comment: [\n      [/[^\\/*]+/, \"comment\"],\n      [/\\*\\//, \"comment\", \"@pop\"],\n      [/[\\/*]/, \"comment\"]\n    ],\n    jsdoc: [\n      [/[^\\/*]+/, \"comment.doc\"],\n      [/\\*\\//, \"comment.doc\", \"@pop\"],\n      [/[\\/*]/, \"comment.doc\"]\n    ],\n    // We match regular expression quite precisely\n    regexp: [\n      [\n        /(\\{)(\\d+(?:,\\d*)?)(\\})/,\n        [\"regexp.escape.control\", \"regexp.escape.control\", \"regexp.escape.control\"]\n      ],\n      [\n        /(\\[)(\\^?)(?=(?:[^\\]\\\\\\/]|\\\\.)+)/,\n        [\"regexp.escape.control\", { token: \"regexp.escape.control\", next: \"@regexrange\" }]\n      ],\n      [/(\\()(\\?:|\\?=|\\?!)/, [\"regexp.escape.control\", \"regexp.escape.control\"]],\n      [/[()]/, \"regexp.escape.control\"],\n      [/@regexpctl/, \"regexp.escape.control\"],\n      [/[^\\\\\\/]/, \"regexp\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/\\\\\\./, \"regexp.invalid\"],\n      [/(\\/)([dgimsuy]*)/, [{ token: \"regexp\", bracket: \"@close\", next: \"@pop\" }, \"keyword.other\"]]\n    ],\n    regexrange: [\n      [/-/, \"regexp.escape.control\"],\n      [/\\^/, \"regexp.invalid\"],\n      [/@regexpesc/, \"regexp.escape\"],\n      [/[^\\]]/, \"regexp\"],\n      [\n        /\\]/,\n        {\n          token: \"regexp.escape.control\",\n          next: \"@pop\",\n          bracket: \"@close\"\n        }\n      ]\n    ],\n    string_double: [\n      [/[^\\\\\"]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/\"/, \"string\", \"@pop\"]\n    ],\n    string_single: [\n      [/[^\\\\']+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/'/, \"string\", \"@pop\"]\n    ],\n    string_backtick: [\n      [/\\$\\{/, { token: \"delimiter.bracket\", next: \"@bracketCounting\" }],\n      [/[^\\\\`$]+/, \"string\"],\n      [/@escapes/, \"string.escape\"],\n      [/\\\\./, \"string.escape.invalid\"],\n      [/`/, \"string\", \"@pop\"]\n    ],\n    bracketCounting: [\n      [/\\{/, \"delimiter.bracket\", \"@bracketCounting\"],\n      [/\\}/, \"delimiter.bracket\", \"@pop\"],\n      { include: \"common\" }\n    ]\n  }\n};\nexport {\n  conf,\n  language\n};\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","parcelRegister","register","module","exports","$0b2c7b5ac92cef97$export$c83be1687c028fc9","$0b2c7b5ac92cef97$export$789c912f57fe164c","$cDseA","$0b2c7b5ac92cef97$var$__defProp","$0b2c7b5ac92cef97$var$__getOwnPropDesc","getOwnPropertyDescriptor","$0b2c7b5ac92cef97$var$__getOwnPropNames","getOwnPropertyNames","$0b2c7b5ac92cef97$var$__hasOwnProp","prototype","hasOwnProperty","$0b2c7b5ac92cef97$var$monaco_editor_core_exports","$0b2c7b5ac92cef97$var$__copyProps","to","from","except","desc","key","call","wordPattern","comments","lineComment","blockComment","brackets","onEnterRules","beforeText","afterText","action","indentAction","languages","IndentAction","IndentOutdent","appendText","None","removeText","autoClosingPairs","open","close","notIn","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","regexpctl","regexpesc","tokenizer","root","include","common","cases","token","bracket","next","whitespace","comment","jsdoc","regexp","regexrange","string_double","string_single","string_backtick","bracketCounting"],"version":3,"file":"typescript.d9ab3258.js.map"}